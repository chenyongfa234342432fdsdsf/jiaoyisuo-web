import { CloudStorageServiceInterface } from './CloudStorageServiceInterface';
import { EventServiceInterface } from './EventServiceInterface';
import { FriendServiceInterface } from './FriendServiceInterface';
import { MsgExtendServiceInterface } from './MsgExtendServiceInterface';
import { MsgLogServiceInterface } from './MsgLogServiceInterface';
import { MsgServiceInterface } from './MsgServiceInterface';
import { IMEventInterface, KickOptions, KickResult, NIMInitializeOptions, NIMEInstanceStatus, NIMInterface, NIMOtherOptions } from './NIMInterface';
import { PassThroughServiceInterface } from './PassThroughServiceInterface';
import { PluginServiceInterface } from './PluginServiceInterface';
import { SessionServiceInterface } from './SessionServiceInterface';
import { SignalingServiceInterface } from './SignalingServiceInterface';
import { SuperTeamServiceInterface } from './SuperTeamServiceInterface';
import { SystemMessageServiceInterface } from './SystemMessageServiceInterface';
import { TeamServiceInterface } from './TeamServiceInterface';
import { UserServiceInterface } from './UserServiceInterface';
import { EventEmitter } from 'eventemitter3';
import { NIMServiceName } from './types';
export default class NIM extends EventEmitter<IMEventInterface> implements NIMInterface {
    static instance: NIM | null;
    /**
     * 实例的状态
     */
    status: NIMEInstanceStatus;
    /**
     * 账号
     */
    account: string;
    /**
     * 连接参数
     */
    options: NIMInitializeOptions;
    msg: MsgServiceInterface;
    msgLog: MsgLogServiceInterface;
    session: SessionServiceInterface;
    signaling: SignalingServiceInterface;
    user: UserServiceInterface;
    friend: FriendServiceInterface;
    systemMessage: SystemMessageServiceInterface;
    team: TeamServiceInterface;
    event: EventServiceInterface;
    msgExtend: MsgExtendServiceInterface;
    cloudStorage: CloudStorageServiceInterface;
    passThrough: PassThroughServiceInterface;
    superTeam: SuperTeamServiceInterface;
    plugin: PluginServiceInterface;
    constructor(options: NIMInitializeOptions, otherOptions?: NIMOtherOptions);
    connect(): Promise<void>;
    setOptions(): Promise<void>;
    disconnect(): Promise<void>;
    destroy(): Promise<void>;
    /**
     * 踢人
     */
    kick(_options: KickOptions): Promise<KickResult>;
    /**
     * 设置适配器
     * @param _newAdapters 适配器
     */
    static setAdapters(_newAdapters: any): void;
    /**
     * 注册模块. ESM 模式的 NIM 类专用
     * @param _serviceClass 模块类
     * @param _serviceName 标识的模块名
     */
    static registerService(_serviceClass: any, _serviceName: NIMServiceName): void;
    /**
     * 单例模式获取实例
     */
    static getInstance(_options?: NIMInitializeOptions, _otherOptions?: NIMOtherOptions): NIM;
}
