"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsBundledOnce = exports.addPackageInstance = void 0;
const unique_1 = require("./unique");
const getGlobalObject_1 = require("./getGlobalObject");
const globalObject = (0, getGlobalObject_1.getGlobalObject)('assertPackageInstances.ts', {
    instances: []
});
function assertSingleVersion() {
    const versions = (0, unique_1.unique)(globalObject.instances);
    if (versions.length > 1) {
        throw new Error(`Multiple versions \`vite-plugin-ssr@${versions[0]}\` and \`vite-plugin-ssr@${versions[1]}\` loaded. Make sure only one version is loaded.`);
    }
}
function assertBundle() {
    if (!globalObject.checkBundle) {
        return;
    }
    if (globalObject.instances.length <= 1) {
        return;
    }
    throw new Error("vite-plugin-ssr is included twice in your bundle. Make sure it's inlcuded only once. (To reduce bundle size.)");
}
function assertIsBundledOnce() {
    globalObject.checkBundle = true;
    assertBundle();
}
exports.assertIsBundledOnce = assertIsBundledOnce;
function addPackageInstance(projectVersion) {
    globalObject.instances.push(projectVersion);
    assertSingleVersion();
    assertBundle();
}
exports.addPackageInstance = addPackageInstance;
