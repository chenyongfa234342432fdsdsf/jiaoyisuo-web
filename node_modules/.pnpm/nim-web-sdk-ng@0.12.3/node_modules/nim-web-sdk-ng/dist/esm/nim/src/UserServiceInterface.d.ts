export interface UserServiceInterface {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 加入黑名单/从黑名单移除
     *
     * 通 IM1 的 markInBlacklist
     * @locale
     *
     * @locale en
     * Add/remove users from the blacklist
     * @locale
     */
    setBlack(options: UpdateRelationsOptions): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 加入静音列表/从静音列表移除
     *
     * 通 IM1 的 markInMutelist
     * @locale
     *
     * @locale en
     * Add/remove users from the mute list.
     * @locale
     */
    setMute(options: UpdateRelationsOptions): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 获取用户名片数组
     *
     * 注意：每次最多 150 个
     * @locale
     *
     * @locale en
     * Get the array of users’ name cards.
     *
     * Note: Up to 150 name cards can be obtained at a time.
     * @locale
     */
    getUsersNameCardFromServer(options: GetUsersNameCardFromServerOptions): Promise<UserNameCard[]>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 更新我的名片
     * @locale
     *
     * @locale en
     * Update my name card
     * @locale
     */
    updateMyNameCard(options: UpdateMyInfoOptions): Promise<UserNameCard>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 获取黑名单和静音列表
     * @locale
     *
     * @locale en
     * Get blacklist and mute list
     * @locale
     */
    getRelations(): Promise<Relations>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 获取黑名单
     * @locale
     *
     * @locale en
     * Get blacklist
     * @locale
     */
    getBlackList(): Promise<MarkedUserInfo[]>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 获取静音列表
     * @locale
     *
     * @locale en
     * Get mute list
     * @locale
     */
    getMuteList(): Promise<MarkedUserInfo[]>;
}
export declare enum GenderMap {
    unknown = 0,
    male = 1,
    female = 2
}
export declare type Gender = keyof typeof GenderMap;
export declare type UserNameCard = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * accid
     * @locale
     *
     * @locale en
     * accid
     * @locale
     */
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 昵称
     * @locale
     *
     * @locale en
     * Nickname
     * @locale
     */
    nick?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 头像
     * @locale
     *
     * @locale en
     * Avatar
     * @locale
     */
    avatar?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 签名
     * @locale
     *
     * @locale en
     * Signature
     * @locale
     */
    signature?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 性别
     * @locale
     *
     * @locale en
     * Gender
     * @locale
     */
    gender?: Gender;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 邮箱
     * @locale
     *
     * @locale en
     * Mail
     * @locale
     */
    email?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 出生日期
     * @locale
     *
     * @locale en
     * Date of birth
     * @locale
     */
    birth?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 电话
     * @locale
     *
     * @locale en
     * Phone
     * @locale
     */
    tel?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 扩展字段
     * @locale
     *
     * @locale en
     * Extension field
     * @locale
     */
    ext?: string;
    createTime: number;
    updateTime: number;
};
export declare type GetUsersNameCardFromServerOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 账号列表
     *
     * 注意：每次最多 150 个
     * @locale
     *
     * @locale en
     * Account list
     *
     * Note: Up to 150 accounts at a time.
     * @locale
     */
    accounts: string[];
};
export declare type UpdateMyInfoOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 昵称
     * @locale
     *
     * @locale en
     * Nickname
     * @locale
     */
    nick?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 头像
     * @locale
     *
     * @locale en
     * Avatar
     * @locale
     */
    avatar?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 签名
     * @locale
     *
     * @locale en
     * Signature
     * @locale
     */
    signature?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 性别
     * @locale
     *
     * @locale en
     * Gender
     * @locale
     */
    gender?: Gender;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 邮箱
     * @locale
     *
     * @locale en
     * Mail
     * @locale
     */
    email?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 出生日期
     * @locale
     *
     * @locale en
     * Date of birth
     * @locale
     */
    birth?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 电话
     * @locale
     *
     * @locale en
     * Phone
     * @locale
     */
    tel?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 扩展字段
     * @locale
     *
     * @locale en
     * Extension field
     * @locale
     */
    ext?: string;
};
export declare type UpdateRelationsOptions = {
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * isAdd 为 true 时, 会将 account 确定这么设置（黑名单，静音）
     * 如果一个用户被加入了黑名单, 那么就不再会收到此用户发送的消息
     *
     * isAdd 为 false 时, 会将 account 取消设置
     * 如果一个用户被从黑名单移除, 那么可以收到此用户发送的消息
     * @locale
     *
     * @locale en
     * When isAdd is true, the account will be added to the blacklist or mute list.
     * If a user is added to the blacklist, you will no longer receive messages from this user.
     *
     * When isAdd is false, the account will be removed from the blacklist or mute list.
     * If a user is removed from the blacklist, you can receive messages from this user.
     * @locale
     */
    isAdd: boolean;
};
export declare type MarkedUserInfo = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 账号 accid
     * @locale
     *
     * @locale en
     * Account: accid
     * @locale
     */
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否被静音
     * @locale
     *
     * @locale en
     * Whether the account is muted
     * @locale
     */
    isMuted?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否被拉入黑名单
     * @locale
     *
     * @locale en
     * Whether the account is blacklisted
     * @locale
     */
    isBlack?: boolean;
    createTime: number;
    updateTime: number;
};
export declare type Relations = {
    blackList: MarkedUserInfo[];
    muteList: MarkedUserInfo[];
};
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 推送专用，更新并上报厂商推送（APNs、小米推送等）的devicetoken
 * @locale
 *
 * @locale en
 * Dedicated for push notification; update and upload the device token of the manufacturer’s push notification services (APNs, Xiaomi push, etc.)
 * @locale
 */
export declare type UpdatePushTokenOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 证书名
     * @locale
     *
     * @locale en
     * Certificate name
     * @locale
     */
    tokenName: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 推送 token
     * @locale
     *
     * @locale en
     * Token for push notification
     * @locale
     */
    token: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 推送通道。默认 0，表示 apns 通道
     * @locale
     *
     * @locale en
     * Push channel. The default value is 0, which represents the APNs channel
     * @locale
     */
    pushkit: number;
};
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 推送专用
 * @locale
 *
 * @locale en
 * Dedicated for push notification
 * @locale
 */
export declare type UpdateAppBackgroundOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * app 是否正处在后台。
     * true 为 app 转入后台运行
     * false 为 app 切回前台运行
     * @locale
     *
     * @locale en
     * Whether the App is in the background.
     * true: App runs in the background
     * false: App runs in the foreground
     * @locale
     */
    isBackground: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 未读数（角标数字），只有ios需要传这个参数。
     * @locale
     *
     * @locale en
     * Unread count (number displayed as a subscript); you only need to pass this parameter if you are developing iOS App.
     * @locale
     */
    badge: number;
};
