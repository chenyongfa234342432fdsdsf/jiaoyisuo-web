"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateImportGlobs = void 0;
const utils_1 = require("../utils");
const getGlobPath_1 = require("./generateImportGlobs/getGlobPath");
const getGlobRoots_1 = require("./generateImportGlobs/getGlobRoots");
const utils_2 = require("../../utils");
const assertConfigVps_1 = require("./config/assertConfigVps");
const virtualModuleIdPageFiles_1 = require("./generateImportGlobs/virtualModuleIdPageFiles");
const virtualModuleIds = [
    virtualModuleIdPageFiles_1.virtualModuleIdPageFilesServer,
    virtualModuleIdPageFiles_1.virtualModuleIdPageFilesClientSR,
    virtualModuleIdPageFiles_1.virtualModuleIdPageFilesClientCR
];
function generateImportGlobs() {
    let config;
    return {
        name: 'vite-plugin-ssr:virtualModulePageFiles',
        config() {
            return {
                experimental: {
                    importGlobRestoreExtension: true
                }
            };
        },
        async configResolved(config_) {
            (0, assertConfigVps_1.assertConfigVpsResolved)(config_);
            config = config_;
        },
        resolveId(id) {
            if (virtualModuleIds.includes(id)) {
                return id;
            }
        },
        async load(id, options) {
            if (virtualModuleIds.includes(id)) {
                const isForClientSide = id !== virtualModuleIdPageFiles_1.virtualModuleIdPageFilesServer;
                (0, utils_1.assert)(isForClientSide === !(0, utils_1.viteIsSSR_options)(options));
                const isClientRouting = id === virtualModuleIdPageFiles_1.virtualModuleIdPageFilesClientCR;
                const code = await getCode(config, isForClientSide, isClientRouting);
                return code;
            }
        }
    };
}
exports.generateImportGlobs = generateImportGlobs;
async function getCode(config, isForClientSide, isClientRouting) {
    const { command } = config;
    (0, utils_1.assert)(command === 'serve' || command === 'build');
    const isBuild = command === 'build';
    const globRoots = await (0, getGlobRoots_1.getGlobRoots)(config);
    (0, utils_2.debugGlob)('Glob roots: ', globRoots);
    const includePaths = globRoots.map((g) => g.includePath);
    const content = getContent(includePaths.filter(utils_1.isNotNullish), isBuild, isForClientSide, isClientRouting, config);
    (0, utils_2.debugGlob)('Glob imports: ', content);
    return content;
}
function getContent(includePaths, isBuild, isForClientSide, isClientRouting, config) {
    let fileContent = `// This file was generatead by \`node/plugin/plugins/generateImportGlobs.ts\`.

export const pageFilesLazy = {};
export const pageFilesEager = {};
export const pageFilesExportNamesLazy = {};
export const pageFilesExportNamesEager = {};
export const neverLoaded = {};
export const isGeneratedFile = true;

`;
    fileContent += getGlobs(includePaths, isBuild, 'page');
    if (!isForClientSide || isClientRouting) {
        fileContent += '\n' + getGlobs(includePaths, isBuild, 'page.route');
    }
    fileContent += '\n';
    if (isForClientSide) {
        fileContent += [
            getGlobs(includePaths, isBuild, 'page.client'),
            getGlobs(includePaths, isBuild, 'page.client', 'extractExportNames'),
            getGlobs(includePaths, isBuild, 'page.server', 'extractExportNames'),
            getGlobs(includePaths, isBuild, 'page', 'extractExportNames')
        ].join('\n');
        if (config.vitePluginSsr.includeAssetsImportedByServer) {
            fileContent += getGlobs(includePaths, isBuild, 'page.server', 'extractAssets');
        }
    }
    else {
        fileContent += [
            getGlobs(includePaths, isBuild, 'page.server'),
            getGlobs(includePaths, isBuild, 'page.client', 'extractExportNames')
        ].join('\n');
        if (isBuild && config.vitePluginSsr.prerender) {
            // We extensively use `PageFile['exportNames']` while pre-rendering, in order to avoid loading page files unnecessarily, and therefore reducing memory usage.
            fileContent += [
                getGlobs(includePaths, true, 'page', 'extractExportNames'),
                getGlobs(includePaths, true, 'page.server', 'extractExportNames')
            ].join('\n');
        }
    }
    return fileContent;
}
function getGlobs(includePaths, isBuild, fileSuffix, query) {
    const isEager = isBuild && (query === 'extractExportNames' || fileSuffix === 'page.route');
    let pageFilesVar;
    if (query === 'extractExportNames') {
        if (!isEager) {
            pageFilesVar = 'pageFilesExportNamesLazy';
        }
        else {
            pageFilesVar = 'pageFilesExportNamesEager';
        }
    }
    else if (query === 'extractAssets') {
        (0, utils_1.assert)(!isEager);
        pageFilesVar = 'neverLoaded';
    }
    else if (!query) {
        if (!isEager) {
            pageFilesVar = 'pageFilesLazy';
        }
        else {
            pageFilesVar = 'pageFilesEager';
        }
    }
    else {
        (0, utils_1.assert)(false);
    }
    const varNameSuffix = (fileSuffix === 'page' && 'Isomorph') ||
        (fileSuffix === 'page.client' && 'Client') ||
        (fileSuffix === 'page.server' && 'Server') ||
        (fileSuffix === 'page.route' && 'Route');
    (0, utils_1.assert)(varNameSuffix);
    const varName = `${pageFilesVar}${varNameSuffix}`;
    const varNameLocals = [];
    return [
        ...includePaths.map((globRoot, i) => {
            const varNameLocal = `${varName}${i + 1}`;
            varNameLocals.push(varNameLocal);
            const globPath = `'${(0, getGlobPath_1.getGlobPath)(globRoot, fileSuffix)}'`;
            const globOptions = JSON.stringify({ eager: isEager, as: query });
            (0, utils_1.assert)(globOptions.startsWith('{"eager":true') || globOptions.startsWith('{"eager":false'));
            const globLine = `const ${varNameLocal} = import.meta.glob(${globPath}, ${globOptions});`;
            return globLine;
        }),
        `const ${varName} = {${varNameLocals.map((varNameLocal) => `...${varNameLocal}`).join(',')}};`,
        `${pageFilesVar}['.${fileSuffix}'] = ${varName};`,
        ''
    ].join('\n');
}
