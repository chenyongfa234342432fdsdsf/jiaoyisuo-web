'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var FastGlob = require('fast-glob');
var path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var FastGlob__default = /*#__PURE__*/_interopDefaultLegacy(FastGlob);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

const FILE_EXT = ['ts', 'js', 'tsx', 'jsx', 'vue', 'scss', 'sass', 'html', 'json'];
const BASE_URL = 'src/**/*';
/**
 * @description: 扫描所有指定文件并返回所有出现过的字符
 * @param {*} options
 */
const getCodes = async (options) => {
    const codeSet = new Set();
    if (!options) {
        options = { include: BASE_URL };
    }
    if (!options.include) {
        options.include = BASE_URL;
    }
    const getFileCodeSet = newFilePath => {
        return new Promise(resolve => {
            const str = fs__default["default"].readFileSync(newFilePath, 'utf-8');
            const newSet = new Set(str.split(''));
            resolve(newSet);
        });
    };
    const setCodeSet = async () => {
        const files = await fileScanner(options);
        const setters = files.map(filePath => new Promise(async (resolve) => {
            const newSet = await getFileCodeSet(filePath);
            newSet.forEach(c => {
                if (!codeSet.has(c)) {
                    codeSet.add(c);
                }
            });
            resolve(true);
        }));
        await Promise.all(setters);
    };
    await setCodeSet();
    return Array(...codeSet).join('');
};
const toStringArray = (str) => {
    if (typeof str === 'string') {
        return [str];
    }
    return str;
};
const toFixExt = (fileUrls, fileExt) => {
    return toStringArray(fileUrls).map(i => {
        const infos = i.split(path__default["default"].sep);
        const endInfo = infos[infos.length - 1];
        if (endInfo.includes('.')) {
            return i;
        }
        if (endInfo === '**') {
            return i;
        }
        return `${i}.${fileExt}`;
    });
};
const getFileExt = (fileExt) => {
    if (!fileExt) {
        return `{${FILE_EXT.join(',')}}`;
    }
    if (fileExt instanceof Array) {
        if (fileExt.length === 0) {
            return '*';
        }
        if (fileExt.length === 1) {
            return fileExt[0];
        }
    }
    return `{${toStringArray(fileExt).join(',')}}`;
};
/**
 * @description: get all request files
 * @param {*} options
 */
async function fileScanner(options) {
    const fileExt = getFileExt(options.fileExt);
    const includes = toFixExt(options.include, fileExt);
    const excludes = options.exclude ? toFixExt(options.exclude, fileExt) : [];
    return await FastGlob__default["default"](includes, { ignore: excludes, dot: true });
}

exports.fileScanner = fileScanner;
exports.getCodes = getCodes;
