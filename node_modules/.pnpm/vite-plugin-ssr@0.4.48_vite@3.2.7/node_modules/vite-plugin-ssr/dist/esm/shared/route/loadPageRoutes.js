import { isErrorPageId } from './error-page';
import { assert, assertUsage, hasProp, slice } from './utils';
import { deduceRouteStringFromFilesystemPath } from './deduceRouteStringFromFilesystemPath';
export { loadPageRoutes };
export { findPageRouteFile };
async function loadPageRoutes(pageContext) {
    await Promise.all(pageContext._pageFilesAll.filter((p) => p.fileType === '.page.route').map((p) => { var _a; return (_a = p.loadFile) === null || _a === void 0 ? void 0 : _a.call(p); }));
    const { onBeforeRouteHook, filesystemRoots } = getGlobalHooks(pageContext);
    const pageRoutes = getPageRoutes(filesystemRoots, pageContext);
    return { pageRoutes, onBeforeRouteHook };
}
function getPageRoutes(filesystemRoots, pageContext) {
    const pageRoutes = [];
    pageContext._allPageIds
        .filter((pageId) => !isErrorPageId(pageId))
        .forEach((pageId) => {
        const pageRouteFile = findPageRouteFile(pageId, pageContext._pageFilesAll);
        if (!pageRouteFile) {
            const routeString = deduceRouteStringFromFilesystemPath(pageId, filesystemRoots);
            assert(routeString.startsWith('/'));
            assert(!routeString.endsWith('/') || routeString === '/');
            pageRoutes.push({
                pageId,
                routeString,
                pageRouteFilePath: null,
                routeType: 'FILESYSTEM'
            });
        }
        else {
            const { filePath, fileExports } = pageRouteFile;
            assert(fileExports);
            assertUsage('default' in fileExports, `${filePath} should have a default export.`);
            if (hasProp(fileExports, 'default', 'string')) {
                const routeString = fileExports.default;
                assertUsage(routeString.startsWith('/'), `A Route String should start with a leading \`/\` but \`${filePath}\` has \`export default '${routeString}'\`. Make sure to \`export default '/${routeString}'\` instead.`);
                pageRoutes.push({
                    pageId,
                    routeString,
                    pageRouteFilePath: filePath,
                    routeType: 'STRING'
                });
                return;
            }
            if (hasProp(fileExports, 'default', 'function')) {
                const routeFunction = fileExports.default;
                let allowAsync = false;
                const allowKey = 'iKnowThePerformanceRisksOfAsyncRouteFunctions';
                if (allowKey in fileExports) {
                    assertUsage(hasProp(fileExports, allowKey, 'boolean'), `The export \`${allowKey}\` of ${filePath} should be a boolean.`);
                    allowAsync = fileExports[allowKey];
                }
                pageRoutes.push({
                    pageId,
                    routeFunction,
                    pageRouteFilePath: filePath,
                    allowAsync,
                    routeType: 'FUNCTION'
                });
                return;
            }
            assertUsage(false, `The default export of ${filePath} should be a string or a function.`);
        }
    });
    return pageRoutes;
}
function getGlobalHooks(pageContext) {
    let onBeforeRouteHook = null;
    const filesystemRoots = [];
    pageContext._pageFilesAll
        .filter((p) => p.fileType === '.page.route' && p.isDefaultPageFile)
        .forEach(({ filePath, fileExports }) => {
        assert(fileExports);
        if ('onBeforeRoute' in fileExports) {
            assertUsage(hasProp(fileExports, 'onBeforeRoute', 'function'), `\`export { onBeforeRoute }\` of ${filePath} should be a function.`);
            const { onBeforeRoute } = fileExports;
            onBeforeRouteHook = { filePath, onBeforeRoute };
        }
        if ('filesystemRoutingRoot' in fileExports) {
            assertUsage(hasProp(fileExports, 'filesystemRoutingRoot', 'string'), `\`export { filesystemRoutingRoot }\` of ${filePath} should be a string.`);
            assertUsage(hasProp(fileExports, 'filesystemRoutingRoot', 'string'), `\`export { filesystemRoutingRoot }\` of ${filePath} is \`'${fileExports.filesystemRoutingRoot}'\` but it should start with a leading slash \`/\`.`);
            filesystemRoots.push({
                filesystemRoot: dirname(filePath),
                routeRoot: fileExports.filesystemRoutingRoot
            });
        }
    });
    return { onBeforeRouteHook, filesystemRoots };
}
function findPageRouteFile(pageId, pageFilesAll) {
    return pageFilesAll.find((p) => p.pageId === pageId && p.fileType === '.page.route');
}
function dirname(filePath) {
    assert(filePath.startsWith('/'));
    assert(!filePath.endsWith('/'));
    const paths = filePath.split('/');
    const dirPath = slice(paths, 0, -1).join('/') || '/';
    assert(dirPath.startsWith('/'));
    assert(!dirPath.endsWith('/') || dirPath === '/');
    return dirPath;
}
