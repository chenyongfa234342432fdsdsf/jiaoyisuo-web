"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertPageContextProvidedByUser = void 0;
const utils_1 = require("./utils");
function assertPageContextProvidedByUser(pageContextProvidedByUser, { hook, errorMessagePrefix }) {
    if (!errorMessagePrefix) {
        (0, utils_1.assert)(hook);
        const { hookName, hookFilePath } = hook;
        (0, utils_1.assert)(hookFilePath.startsWith('/'));
        (0, utils_1.assert)(!hookName.endsWith(')'));
        errorMessagePrefix = `The \`pageContext\` provided by the \`export { ${hookName} }\` of ${hookFilePath}`;
    }
    (0, utils_1.assertUsage)((0, utils_1.isObject)(pageContextProvidedByUser), `${errorMessagePrefix} should be an object.`);
    (0, utils_1.assertUsage)(!('_objectCreatedByVitePluginSsr' in pageContextProvidedByUser), `${errorMessagePrefix} should not be the whole \`pageContext\` object, see https://vite-plugin-ssr.com/pageContext-manipulation#do-not-return-entire-pagecontext`);
    // In principle, it's possible to use `onBeforeRoute()` to override and define the whole routing.
    // Is that a good idea to allow users to do this? Beyond deep integration with Vue Router or React Router, is there a use case for this?
    (0, utils_1.assertWarning)(!('_pageId' in pageContextProvidedByUser), 'You are using `onBeforeRoute()` to override vite-plugin-ssr routing. This is experimental: make sure to contact a vite-plugin-ssr maintainer before using this.', { onlyOnce: true });
}
exports.assertPageContextProvidedByUser = assertPageContextProvidedByUser;
