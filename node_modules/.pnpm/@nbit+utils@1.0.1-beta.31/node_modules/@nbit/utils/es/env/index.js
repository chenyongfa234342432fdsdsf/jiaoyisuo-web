var _EnvTypesMap;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import '../index.js';
import * as index$1 from '../fast-url/index.js';
var getFastUrl = index$1.getFastUrl;
// 环境枚举
var EnvTypesEnum;
(function (EnvTypesEnum) {
  // 本地环境
  EnvTypesEnum["development"] = "development";
  // sg 开发环境
  EnvTypesEnum["dev"] = "dev";
  // 测试环境
  EnvTypesEnum["test"] = "test";
  // 压测环境
  EnvTypesEnum["stress"] = "stress";
  // 生产环境
  EnvTypesEnum["production"] = "production";
})(EnvTypesEnum || (EnvTypesEnum = {}));
/**
 * Nodejs 环境变量映射到实际业务的环境变量简称
 */
var EnvTypesMap = (_EnvTypesMap = {}, _defineProperty(_EnvTypesMap, EnvTypesEnum.development, 'staging'), _defineProperty(_EnvTypesMap, EnvTypesEnum.dev, 'dev'), _defineProperty(_EnvTypesMap, EnvTypesEnum.test, 'staging'), _defineProperty(_EnvTypesMap, EnvTypesEnum.stress, 'stress'), _defineProperty(_EnvTypesMap, EnvTypesEnum.production, 'prod'), _EnvTypesMap);
/** S3 配置文件名枚举 */
var S3UrlNameEnum;
(function (S3UrlNameEnum) {
  /** dns 配置文件名 */
  S3UrlNameEnum["dnsConfig"] = "_dnsConfig.json";
  /** 动态化配置文件名 */
  S3UrlNameEnum["moduleAuthConfig"] = "_mainFuncStatus.json";
})(S3UrlNameEnum || (S3UrlNameEnum = {}));
/**
 * 获取 S3 域名配置信息
 */
var getBaseEnvS3Url = function getBaseEnvS3Url(mode, type) {
  if (mode === EnvTypesEnum.production) {
    return getFastUrl("https://newbit-prod-s3.s3.ap-northeast-1.amazonaws.com/".concat(type));
  }
  if (mode === EnvTypesEnum.dev) {
    return getFastUrl("https://newbit-dev-s3.s3.ap-southeast-1.amazonaws.com/".concat(type));
  }
  if (mode === EnvTypesEnum.test) {
    return getFastUrl("https://newbit-staging-s3.s3.ap-southeast-1.amazonaws.com/".concat(type));
  }
  // 默认采用测试环境
  return getFastUrl("https://newbit-staging-s3.s3.ap-southeast-1.amazonaws.com/".concat(type));
};
/**
 * 获取 S3 域名配置信息
 */
var getEnvS3Url = function getEnvS3Url(mode, businessId) {
  var urlName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : S3UrlNameEnum.dnsConfig;
  return getBaseEnvS3Url(mode, "".concat(businessId).concat(urlName));
};
/**
 * 获取 S3 秘钥信息
 */
var getEnvSecretS3KeyConfig = function getEnvSecretS3KeyConfig(mode, accessKey) {
  return getBaseEnvS3Url(mode, "".concat(accessKey, ".json"));
};
/**
 * 获取融合模式秘钥信息
 */
var getMergeModeEnvSecretS3KeyConfig = function getMergeModeEnvSecretS3KeyConfig(mode, accessKey) {
  if (mode === EnvTypesEnum.production) {
    return "https://hybird-accesskey-prod.s3.ap-northeast-1.amazonaws.com/".concat(accessKey, ".json");
  }
  if (mode === EnvTypesEnum.dev) {
    return "https://hybird-accesskey-dev.s3.ap-northeast-1.amazonaws.com/".concat(accessKey, ".json");
  }
  if (mode === EnvTypesEnum.test) {
    return "https://hybird-accesskey-staging.s3.ap-northeast-1.amazonaws.com/".concat(accessKey, ".json");
  }
  // 默认采用测试环境
  return "https://hybird-accesskey-staging.s3.ap-northeast-1.amazonaws.com/".concat(accessKey, ".json");
};
export { EnvTypesEnum, EnvTypesMap, S3UrlNameEnum, getBaseEnvS3Url, getEnvS3Url, getEnvSecretS3KeyConfig, getMergeModeEnvSecretS3KeyConfig };
