import { FileProgressObject, UploadFileResult } from './CloudStorageServiceInterface';
import { IMMessage, TMsgAntiSpamInfo, TMsgPushInfo, TMsgScene, TMsgSetting, TMsgTeamSpecializationInfo, TMsgType } from './MsgServiceInterface';
export declare type StrObj = {
    [key: string]: string;
};
export declare type StrAnyObj = {
    [key: string]: any;
};
export declare type NumAnyObj = {
    [key: number]: any;
};
export declare type AnyArr = any[];
export declare type NIMServiceName = 'auth' | 'msg' | 'msgLog' | 'team' | 'superTeam' | 'misc' | 'sync' | 'user' | 'session' | 'systemMessage' | 'friend' | 'event' | 'msgExtend' | 'passThrough' | 'plugin' | 'cloudSession' | 'signaling' | 'cloudStorage';
export interface IBaseSendMsgOptions {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 场景
     *
     * 'p2p' (单人聊天)
     * 'team' (群聊)
     * 'superTeam' (超大群聊天)
     * @locale
     *
     * @locale en
     * Scenes
     *
     * 'p2p' (one-to-one chat)
     * 'team' (group chat)
     * 'superTeam' (super group chat)
     * @locale
     */
    scene: TMsgScene;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 接收方, 对方帐号或者群id
     * @locale
     *
     * @locale en
     * The recipient: the other party's account or group ID
     * @locale
     */
    to: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 文本消息内容，通 IM1 的 text
     * @locale
     *
     * @locale en
     * The recipient: the other party's account or group ID
     * @locale
     */
    body?: string;
    /**
     * 发送方帐号
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息客户端唯一标识。只在于重发时可以指定
     * @locale
     *
     * @locale en
     * The unique identifier (generated by the SDK) of the message. It can only be specified when resending the message.
     * @locale
     */
    idClient?: string;
    /**
     * 是否为本地，目前如果为 true，这条消息并不会被发出去。
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 扩展字段
     * @locale
     *
     * @locale en
     * Extension field
     * @locale
     */
    ext?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 第三方回调的扩展字段
     * @locale
     *
     * @locale en
     * Extension fields for third-party callbacks
     * @locale
     */
    callbackExt?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息子类型，格式为大于0的整数，开发者可自定义
     * @locale
     *
     * @locale en
     * Message subtype (format: an integer greater than 0)
     * @locale
     */
    subType?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息的杂项设置
     * @locale
     *
     * @locale en
     * Miscellaneous settings for messages
     * @locale
     */
    setting?: TMsgSetting;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 反垃圾相关配置
     * @locale
     *
     * @locale en
     * Anti-spam related configurations
     * @locale
     */
    antiSpamInfo?: TMsgAntiSpamInfo;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 推送相关配置
     * @locale
     *
     * @locale en
     * Push related configurations
     * @locale
     */
    pushInfo?: TMsgPushInfo;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 群组特化的杂项配置
     * @locale
     *
     * @locale en
     * Miscellaneous configuration for group specialization
     * @locale
     */
    teamSpecializationInfo?: Pick<TMsgTeamSpecializationInfo, 'needForcePush' | 'forcePushIDsList' | 'pushContent' | 'needACK'>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被回复的消息体
     * 举例存在一个 A 消息，用户回复这个 A 消息，那么需要在此 replyMsg 里传入 A 消息整体。
     * 其需要的的是以下几个字段：
     * A ==> from、to、time、idServer、idClient
     * A.threadMessageInfo ==> threadMsgFromAccount、threadMsgToAccount、threadMsgTime、threadMsgIdServer、threadMsgIdClient
     * @locale
     *
     * @locale en
     * Message body that is replied
     * For example, assume that there is message A, when a user replies to message A, “replyMsg” needs to be passed into message A.
     * It requires the following fields:
     * A ==> from, to, time, idServer, idClient
     * A.threadMessageInfo ==> threadMsgFromAccount, threadMsgToAccount, threadMsgTime, threadMsgIdServer, threadMsgIdClient
     * @locale
     */
    replyMsg?: IMMessage;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送前的回调函数，用于发送前拿到这个消息对象
     * 此时这个消息对象还没有 idServer 和准确的 time，并且 status 也只是在 sending
     * @locale
     *
     * @locale en
     * The callback function before sending, used to get the message object before sending
     * At this time, the message has no “idServer” and accurate “time”, and the “status” is just “sending”.
     * @locale
     */
    onSendBefore?: (msg: IMMessage) => void;
}
export interface ISendMsgOptions extends IBaseSendMsgOptions {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息类型
     * @locale
     *
     * @locale en
     * Message type
     * @locale
     */
    type: TMsgType;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 附件，可能是文件，也可能是地理位置信息等
     * @locale
     *
     * @locale en
     * Attachments, which can be files, geolocation information, etc.
     * @locale
     */
    attach?: string;
}
export declare type TGEO = {
    title: string;
    lat: number;
    lng: number;
};
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 发送文本消息的参数
 * @locale
 *
 * @locale en
 * Parameters for sending text messages
 * @locale
 */
export interface ISendTextMsgOptions extends IBaseSendMsgOptions {
    body: string;
    attach?: string;
}
export interface ISendTipMsgOptions extends IBaseSendMsgOptions {
    body: string;
    attach?: string;
}
export interface ISendGeoLocationMsgOptions extends IBaseSendMsgOptions {
    attach: TGEO;
}
export interface ISendCustomMsgOptions extends IBaseSendMsgOptions {
    attach: string;
}
export interface IBaseUploadFileOptions {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * JS 的 File 对象。
     *
     * 浏览器专用
     * @locale
     *
     * @locale en
     * File object of JS
     *
     * Browser specific
     * @locale
     */
    file?: File;
    /**
     * @deprecated Use {@link IBaseUploadFileOptions.file} instead.
     *
     * @Multi_Lang_Tag
     * @locale cn
     * 存储文件的 DOM 元素，与上面的 file 只要选填一个就可以了。
     *
     * 浏览器专用
     *
     * 如果传字符串，最后会以 document.getElementById('fileInput').files[0] 拿到 File 对象
     * 如果传的是 DOM 节点，最后以 fileInput.files[0] 拿到 File 对象
     * @locale
     *
     * @locale en
     * The DOM element that stores the file
     *
     * Browser specific, about to be deprecated
     *
     * If you pass a string, you will finally get the File object with document.getElementById('fileInput').files[0]
     * If the DOM node is passed, finally get the File object with fileInput.files[0]
     * @locale
     *
     */
    fileInput?: string | HTMLInputElement;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 临时文件路径
     *
     * uni-app，RN，小程序等特殊的 JS 运行环境专用（chooseImage 拿到的临时路径）
     * @locale
     *
     * @locale en
     * Temporary file path
     *
     * uni-app, RN, applet, and other special JS runtime environment dedicated (temporary path obtained by chooseImage)
     * @locale
     */
    filePath?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * maxSize 限制文件大小。
     *
     * 只对浏览器生效。
     *
     * uni-app，小程序等，由于sdk只能得到一个 filePath 临时路径，不能得到整个文件的信息。
     * 所以请开发者自行在选择文件后进行判断，参考那些端的API如 wx.chooseImage，uni.chooseImage
     * @locale
     *
     * @locale en
     * maxSize : maximum file size.
     *
     * Only valid for browsers.
     *
     * For uni-app, applet, etc., because the SDK can only get a temporary filePath path, the information of the entire file cannot be obtained.
     * So please make your determination after selecting the file. Refer to those frame/platform’s APIs such as wx.chooseImage, uni.chooseImage.
     * @locale
     */
    maxSize?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 存储场景，不传默认实例化配置，默认为"im"
     * @locale
     *
     * @locale en
     * Storage scene (default: instantiation configuration, i.e., "im")
     * @locale
     */
    nosScenes?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 存储有效时间，不传则默认实例化配置
     *
     * 不得小于一天，单位秒
     * @locale
     *
     * @locale en
     * Storage valid time (default: instantiation configuration)
     *
     * Cannot be less than one day (unit: second)
     * @locale
     */
    nosSurvivalTime?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 上传进度
     * @locale
     *
     *
     * @locale en
     * Upload progress
     * @locale
     */
    onUploadProgress?: (obj: FileProgressObject) => void;
}
export interface IUploadFileOptions extends IBaseUploadFileOptions {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 文件类型
     * @locale
     *
     * @locale en
     * File type
     * @locale
     */
    type?: 'image' | 'audio' | 'video' | 'file';
}
export declare type MixStoreTokenResTag = {
    token: string;
    shortUrl: string;
    objectName: string;
    accessKeyId: string;
    secretAccessKey: string;
    sessionToken: string;
    region: string;
    maxRetries: number;
    bucket: string;
};
export interface IBaseSendFileOptions extends IBaseSendMsgOptions, IBaseUploadFileOptions {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 如果之前已经上传好了文件，那么直接传入 attach 字段
     * 接下来不会再上传它，而是直接发往 IM 服务器
     * @locale
     *
     * @locale en
     * If you have got uploadFileResult via the uploadFile method, the information of uploadFileResult will be directly passed to the “attach” field
     * After that, messages will be directly sent to the IM server, hence it is not required to upload file(s) again.
     * @locale
     */
    attach?: UploadFileResult;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 上传前回调事件
     * @locale
     *
     * @locale en
     * Upload callback event
     * @locale
     */
    onUploadStart?: (task: StrAnyObj) => void;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 上传完成的回调
     * @locale
     *
     * @locale en
     * Upload the completed callback
     * @locale
     */
    onUploadDone?: (file: UploadFileResult) => void;
}
export interface ISendFileOptions extends IBaseSendFileOptions {
    type: 'image' | 'audio' | 'video' | 'file';
}
