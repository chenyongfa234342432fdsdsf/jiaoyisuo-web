"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineOptimizeDepsEntries = void 0;
const getPageFileObject_1 = require("../../../../shared/getPageFiles/getPageFileObject");
const deduceRouteStringFromFilesystemPath_1 = require("../../../../shared/route/deduceRouteStringFromFilesystemPath");
const loadPageRoutes_1 = require("../../../../shared/route/loadPageRoutes");
const resolveRouteString_1 = require("../../../../shared/route/resolveRouteString");
const helpers_1 = require("../../helpers");
const utils_1 = require("../../utils");
async function determineOptimizeDepsEntries(config) {
    const pageFilesAll = (await (0, helpers_1.findPageFiles)(config, ['.page', '.page.client', '.page.route'])).map((p) => (0, getPageFileObject_1.getPageFileObject)(p));
    let pageFiles = pageFilesAll.filter((p) => p.fileType === '.page' || p.fileType === '.page.client');
    if (pageFiles.length > 10) {
        pageFiles = pageFiles.filter((p) => {
            if (p.isErrorPageFile || p.isDefaultPageFile || p.isRendererPageFile) {
                return true;
            }
            if ((0, loadPageRoutes_1.findPageRouteFile)(p.pageId, pageFilesAll)) {
                return false;
            }
            {
                const routeString = (0, deduceRouteStringFromFilesystemPath_1.deduceRouteStringFromFilesystemPath)(p.pageId, 
                // There is no easy way to get the `filesystemRoots` at Vite config resolve time
                []);
                const url = (0, resolveRouteString_1.getUrlFromRouteString)(routeString);
                return url === '/';
            }
        });
    }
    pageFiles = pageFiles.slice(0, 10);
    const entries = pageFiles.map(({ filePath }) => (0, utils_1.makeFilePathAbsolute)(filePath, config));
    return entries;
}
exports.determineOptimizeDepsEntries = determineOptimizeDepsEntries;
