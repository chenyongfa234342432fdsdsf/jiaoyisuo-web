import { AntispamTag } from './QChatServerServiceInterface';
export interface QChatRoleServiceInterface {
    /**
     * 新增服务器身份组
     */
    createServerRole(options: CreateServerRoleOptions): Promise<QChatServerRole>;
    /**
     * 移除服务器身份组
     */
    deleteServerRole(options: DeleteServerRoleOptions): Promise<void>;
    /**
     * 修改服务器身份组信息
     */
    updateServerRole(options: UpdateServerRoleOptions): Promise<QChatServerRole>;
    /**
     * 查询服务器下身份组列表
     */
    getServerRoles(options: GetServerRolesOptions): Promise<GetServerRolesResult>;
    /**
     * 将某身份组加入某频道
     */
    addChannelRole(options: AddChannelRoleOptions): Promise<QChatChannelRole>;
    /**
     * 删除某频道下的某身份组
     */
    removeChannelRole(options: RemoveChannelRoleOptions): Promise<void>;
    /**
     * 修改频道下某身份组的权限
     */
    updateChannelRole(options: UpdateChannelRoleOptions): Promise<QChatChannelRole>;
    /**
     * 查询某频道下的身份组信息列表
     */
    getChannelRoles(options: GetChannelRolesOptions): Promise<QChatChannelRole[]>;
    /**
     * 为某个人定制某频道的权限
     */
    addMemberRole(options: AddMemberRoleOptions): Promise<QChatMemberRole>;
    /**
     * 删除频道下某人的定制权限
     */
    removeMemberRole(options: RemoveMemberRoleOptions): Promise<void>;
    /**
     * 修改某人的定制权限
     */
    updateMemberRole(options: UpdateMemberRoleOptions): Promise<QChatMemberRole>;
    /**
     * 查询某人的定制权限
     */
    getMemberRoles(options: GetMemberRolesOptions): Promise<QChatMemberRole[]>;
    /**
     * 将某些人加入某服务器身份组
     */
    addMembersToServerRole(options: AddMembersToServerRoleOptions): Promise<AddMembersToServerRoleResult>;
    /**
     * 将某些人移除某服务器身份组
     */
    removeMembersFromServerRole(options: RemoveMembersFromServerRoleOptions): Promise<RemoveMembersFromServerRoleResult>;
    /**
     * 查询某服务器下某身份组下的成员列表
     */
    getMembersFromServerRole(options: GetMembersFromServerRoleOptions): Promise<QChatServerRoleMember[]>;
    /**
     * 通过 accid(account ID) 查询 QChatServerRole 列表，结果会分页
     *
     * 注：返回的结果，参数形式类似 QChatServerRole，只是没有 auths 字段
     */
    getServerRolesByAccid(options: GetServerRolesByAccidOptions): Promise<Omit<QChatServerRole, 'auths'>[]>;
    /**
     * 通过一批 accids(account ID) 查询 QChatServerRole 列表，结果不分页并且只拿第一页。
     */
    getExistingServerRolesByAccids(options: GetExistingServerRolesByAccidsOptions): Promise<GetExistingServerRolesByAccidsResult>;
    /**
     * 通过一批服务器身份组（serverRoleIds）来查询频道的身份组信息（QChatChannelRole）。返回某服务器身份加入过频道，该频道的身份组信息。结果不分页
     */
    getExistingChannelRolesByServerRoleIds(options: GetExistingChannelRolesByServerRoleIdsOptions): Promise<QChatChannelRole[]>;
    /**
     * 通过一批 accids(account ID) 查询是否有定制权限（QChatMemberRole）。
     *
     * 返回有定制权限的 accid（account id） 列表，查询结果不分页
     */
    getExistingAccidsOfMemberRoles(options: GetExistingAccidsOfMemberRolesOptions): Promise<string[]>;
    /**
     * 查询一批 accids 是否在某个服务器身份组（ServerRole）。
     *
     * 返回在此服务器身份组下的 accid（account id） 列表，查询结果不分页
     */
    getExistingAccidsInServerRole(options: GetExistingAccidsInServerRoleOptions): Promise<string[]>;
    /**
     * 批量更新 serverRole 的优先级
     */
    updateServerRolePriorities(options: UpdateServerRolePrioritiesOptions): Promise<QChatServerRole[]>;
    /**
     * 查询自己是否拥有某个权限
     */
    checkPermission(options: CheckPermissionOptions): Promise<boolean>;
    /**
     * 添加一个身份组到频道分组
     */
    addChannelCategoryRole(options: AddChannelCategoryRoleOptions): Promise<QChatChannelCategoryRole>;
    /**
     * 从频道分组中移除身份组
     */
    removeChannelCategoryRole(options: RemoveChannelCategoryRoleOptions): Promise<void>;
    /**
     * 更新频道分组中的身份组
     */
    updateChannelCategoryRole(options: UpdateChannelCategoryRoleOptions): Promise<QChatChannelCategoryRole>;
    /**
     * 分页获取频道分组下的身份组列表
     */
    getChannelCategoryRole(options: GetChannelCategoryRoleOptions): Promise<QChatChannelCategoryRole[]>;
    /**
     * 添加指定成员在“频道分组”中的定制权限
     */
    addChannelCategoryMemberRole(options: AddChannelCategoryMemberRoleOptions): Promise<QChatChannelCategoryMemberRole>;
    /**
     * 删除指定成员在“频道分组”中的定制权限
     */
    removeChannelCategoryMemberRole(options: RemoveChannelCategoryMemberRoleOptions): Promise<void>;
    /**
     * 更新指定成员在“频道分组”中的定制权限
     */
    updateChannelCategoryMemberRole(options: UpdateChannelCategoryMemberRoleOptions): Promise<QChatChannelCategoryMemberRole>;
    /**
     * 分页获取“频道分组”下的成员权限列表
     */
    getChannelCategoryMemberRole(options: GetChannelCategoryMemberRoleOptions): Promise<QChatChannelCategoryMemberRole[]>;
    /**
     * 查询自己是否拥有某些权限
     */
    checkPermissions(options: QChatCheckPermissionsOptions): Promise<QChatCheckPermissionsResult>;
}
export declare type QChatCheckPermissionsOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道 ID 如果不填则表示查询服务器权限
     */
    channelId?: string;
    /**
     * 查询的权限列表
     */
    auths: QChatRoleAuthKey[];
};
export declare type QChatCheckPermissionsResult = QChatRoleAuth;
export declare type GetChannelCategoryMemberRoleOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * 时间戳
     */
    timetag?: number;
    /**
     * 数量
     */
    limit?: number;
};
export declare type UpdateChannelCategoryMemberRoleOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * 用户 id
     */
    accid: string;
    /**
     * 权限
     */
    auths: QChatRoleAuth;
};
export declare type RemoveChannelCategoryMemberRoleOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * 用户 id
     */
    accid: string;
};
/**
 * 某成员在“频道分组”的定制权限
 */
export declare type QChatChannelCategoryMemberRole = {
    id: string;
    /**
     * 服务器成员的 account id
     */
    accid: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 有效标志：false-无效，true-有效
     */
    validFlag: boolean;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
    /**
     * 权限
     */
    auths: QChatRoleAuth;
    /**
     * 服务器成员的昵称
     */
    nick?: string;
    /**
     * 服务器成员的头像
     */
    avatar?: string;
    /**
     * 服务器成员自定义扩展
     */
    ext?: string;
    /**
     * 服务器成员类型
     */
    memberType: TMemberType;
    /**
     * 服务器成员加入时间
     */
    joinTime: number;
    /**
     * 服务器成员的邀请者的 account ID
     */
    inviter: string;
};
export declare type AddChannelCategoryMemberRoleOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * account ID, 账号
     */
    accid: string;
};
export declare type GetChannelCategoryRoleOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * 时间戳
     */
    timetag?: number;
    /**
     * 数量
     */
    limit?: number;
};
export declare type UpdateChannelCategoryRoleOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * 身份组 ID
     */
    roleId: string;
    /**
     * 权限
     */
    auths: QChatRoleAuth;
};
export declare type RemoveChannelCategoryRoleOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * 身份组 ID
     */
    roleId: string;
};
export declare type AddChannelCategoryRoleOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * 服务器身份组 ID
     */
    parentRoleId: string;
};
export declare type QChatChannelCategoryRole = {
    /**
     * 身份组 ID
     */
    roleId: string;
    /**
     * 频道分组 ID
     */
    categoryId: string;
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 服务器身份组 ID
     */
    parentRoleId: string;
    /**
     * 身份组类型： everyone 标志所有人都适用的身份组, custom 表示针对个人可定制的身份组
     */
    type: TRoleType;
    /**
     * 有效标志：false-无效，true-有效
     */
    validFlag: boolean;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
    /**
     * 权限
     */
    auths: QChatRoleAuth;
    /**
     * 身份组名称
     */
    name: string;
    /**
     * 身份组图标
     */
    icon?: string;
    /**
     * 身份组自定义扩展
     */
    ext?: string;
};
export declare type CheckPermissionOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 频道ID 不填则表示查询服务器权限
     */
    channelId?: string;
    /**
     * 查询的权限
     */
    auth: QChatRoleAuthKey;
};
export declare type QChatRoleAuthKey = keyof QChatRoleAuth;
export declare type AddChannelRoleOptions = {
    serverId: string;
    channelId: string;
    /**
     * 继承服务器的身份组id
     */
    parentRoleId: string;
};
export declare type AddMemberRoleOptions = {
    serverId: string;
    channelId: string;
    /**
     * account ID, 账号
     */
    accid: string;
};
export declare type AddMembersToServerRoleOptions = {
    serverId: string;
    /**
     * 身份组 id
     */
    roleId: string;
    /**
     * account ID, 账号列表
     */
    accids: string[];
};
export declare type AddMembersToServerRoleResult = {
    /**
     * 添加成功的数组
     */
    successAccids: string[];
    /**
     * 添加失败的数组
     */
    failedAccids: string[];
};
export declare enum ERoleType {
    everyone = 1,
    /**
     * 定制身份组
     */
    custom = 2
}
export declare type TRoleType = keyof typeof ERoleType;
export declare enum EMemberType {
    /**
     * 普通成员
     */
    normal = 0,
    /**
     * 所有者
     */
    owner = 1
}
export declare type TMemberType = keyof typeof EMemberType;
export declare type CreateServerRoleOptions = {
    serverId: string;
    /**
     * 角色名
     */
    name: string;
    /**
     * 角色类型
     */
    /**
     * 身份组优先级
     *
     * everyone 最低为 0。
     *
     * 数字越大优先级越高
     */
    priority: number;
    /**
     * 身份组图片url
     */
    icon?: string;
    /**
     * 扩展字段
     */
    ext?: string;
    /**
     * 反垃圾相关字段
     */
    antispamTag?: AntispamTag;
};
export declare type DeleteServerRoleOptions = {
    serverId: string;
    /**
     * 身份组 id
     */
    roleId: string;
};
export declare type GetChannelRolesOptions = {
    serverId: string;
    channelId: string;
    /**
     * 分页起始时间
     */
    timetag: number;
    /**
     * 分页页码
     */
    limit?: number;
};
export declare type GetMemberRolesOptions = {
    serverId: string;
    channelId: string;
    /**
     * 分页起始时间，即查询创建时间在这个时间之后的 member role
     */
    timetag: number;
    /**
     * 分页页码
     */
    limit: number;
};
export declare type GetMembersFromServerRoleOptions = {
    serverId: string;
    /**
     * 身份组 id
     */
    roleId: string;
    /**
     * 分页条件-起始时间
     */
    timetag?: number;
    /**
     * 分页条件-页码（一页显示多少条）
     */
    limit?: number;
    /**
     * 分页条件-的起始 account ID, 账号
     */
    accid?: string;
};
export declare type GetServerRolesOptions = {
    /**
     * 服务器 ID
     */
    serverId: string;
    /**
     * 以 channelId 的名义查询。
     *
     * 注：传入这个字段，可以允许拥有“频道”维度的 {@link QChatRoleAuth.manageRole | manageRole} 权限的人查询。否则角色需要有 {@link QChatRoleAuth.manageRole | manageRole} 权限才能允许查询
     */
    channelId?: string;
    /**
     * 以 categoryId 的名义查询。
     *
     * 注：传入这个字段，可以允许拥有“频道分组”维度的 {@link QChatRoleAuth.manageRole | manageRole} 权限的人查询。否则角色需要有 {@link QChatRoleAuth.manageRole | manageRole} 权限才能允许查询
     */
    categoryId?: string;
    /**
     * 分页页码
     */
    limit?: number;
    /**
     * 分页的起始优先级，起始页为 0
     */
    priority?: number;
};
export declare type GetServerRolesResult = {
    /**
     * 返回全部的 QChatServerRole
     */
    roles: QChatServerRole[];
    /**
     * 返回自己所在的身份组列表
     */
    isMemberRoles: string[];
};
export declare type GetServerRolesByAccidOptions = {
    serverId: string;
    /**
     * 分页条件-的起始 account ID, 账号
     */
    accid: string;
    /**
     * 分页条件-起始时间
     */
    timetag: number;
    /**
     * 分页条件-页码（一页显示多少条）
     */
    limit: number;
};
export declare type GetExistingServerRolesByAccidsOptions = {
    serverId: string;
    accids: string[];
};
export declare type GetExistingServerRolesByAccidsResult = {
    /**
     * accid (account ID) 作为 key 值，values 就是服务器身份组的列表（QChatServerRole[]）
     */
    [key: string]: QChatServerRole[];
};
export declare type RemoveChannelRoleOptions = {
    serverId: string;
    channelId: string;
    /**
     * 身份组 id
     */
    roleId: string;
};
export declare type RemoveMemberRoleOptions = {
    serverId: string;
    channelId: string;
    /**
     * account ID 账号
     */
    accid: string;
};
export declare type RemoveMembersFromServerRoleOptions = {
    serverId: string;
    /**
     * 身份组 id
     */
    roleId: string;
    /**
     * account ID 账号列表
     */
    accids: string[];
};
export declare type RemoveMembersFromServerRoleResult = {
    successAccids: string[];
    failedAccids: string[];
};
export declare type UpdateChannelRoleOptions = {
    serverId: string;
    channelId: string;
    /**
     * 身份组 id
     */
    roleId: string;
    /**
     * 权限列表
     */
    auths: Partial<QChatRoleAuth>;
};
export declare type UpdateMemberRoleOptions = {
    serverId: string;
    channelId: string;
    accid: string;
    /**
     * 权限列表
     */
    auths: Partial<QChatRoleAuth>;
};
export declare type UpdateServerRoleOptions = {
    serverId: string;
    roleId: string;
    name?: string;
    icon?: string;
    ext?: string;
    /**
     * 权限
     */
    auths?: QChatRoleAuth;
    /**
     * 优先级，越小的数字优先级越高
     */
    priority?: number;
    /**
     * 反垃圾相关字段
     */
    antispamTag?: AntispamTag;
};
export declare type UpdateServerRolesOptions = {
    serverId: string;
    value: {
        roleId: string;
        name?: string;
        icon?: string;
        ext?: string;
        /**
         * 优先级
         */
        priority?: number;
    }[];
};
export declare enum ERoleAuthType {
    /**
     * 忽略，继承自上层权限。
     *
     * 举个例子：个人定制化权限里忽略 A 权限，但频道里 A 权限 allow，就会继承频道里关于 A 的权限。
     *
     * 那么此人最终针对 A 权限就是 allow
     */
    ignore = 0,
    /**
     * 拒绝
     */
    deny = -1,
    /**
     * 允许。
     *
     * 若多个自定义的身份组针对同一个权限分别设置 `allow`，`deny`，`ignore`
     *
     * 那么 `allow` 的优先级最高，`deny` 次之
     */
    allow = 1
}
export declare type TRoleAuthType = keyof typeof ERoleAuthType;
export declare type QChatRoleAuth = {
    /**
     * 管理服务器：修改服务器。仅 server 的身份组有此权限可配置
     */
    manageServer?: TRoleAuthType;
    /**
     * 管理频道，server 和 channel 的身份组都有此权限配置
     *
     * 注意，channel 下定制的个人权限里，打开此权限，只能够编辑、删除此频道，无法新建。
     */
    manageChannel?: TRoleAuthType;
    /**
     * 管理角色的权限，server 和 channel 的身份组都有此权限配置
     */
    manageRole?: TRoleAuthType;
    /**
     * 发送消息，server 和 channel 的身份组都有此权限配置
     */
    sendMsg?: TRoleAuthType;
    /**
     * 修改自己在该server的服务器成员信息，仅 server 的身份组有此权限可配置
     */
    accountInfoSelf?: TRoleAuthType;
    /**
     * 邀请他人进入server的，仅 server 的身份组有此权限可配置
     */
    inviteServer?: TRoleAuthType;
    /**
     * 踢除他人的权限，仅 server 的身份组有此权限可配置
     */
    kickServer?: TRoleAuthType;
    /**
     * 修改他人在该server的服务器成员信息，仅 server 的身份组有此权限可配置
     */
    accountInfoOther?: TRoleAuthType;
    /**
     * 撤回他人消息的权限，server 和 channel 的身份组都有此权限配置
     */
    recallMsg?: TRoleAuthType;
    /**
     * 删除他人消息的权限，server 和 channel 的身份组都有此权限配置
     */
    deleteMsg?: TRoleAuthType;
    /**
     * @ 他人的权限，server 和 channel 的身份组都有此权限配置
     */
    remindOther?: TRoleAuthType;
    /**
     * @ everyone，server 和 channel 的身份组都有此权限配置
     */
    remindEveryone?: TRoleAuthType;
    /**
     * 管理黑白名单的权限，server和channel都有
     */
    manageBlackWhiteList?: TRoleAuthType;
    /**
     * 封禁他人的权限，仅server有，允许成员永久封禁其他成员访问此服务器
     */
    banServerMember?: TRoleAuthType;
    /**
     * RTC频道：连接的权限
     */
    RTCChannelConnect?: TRoleAuthType;
    /**
     * RTC频道：断开他人连接的权限
     */
    RTCChannelDisconnectOther?: TRoleAuthType;
    /**
     * RTC频道：开启麦克风的权限
     */
    RTCChannelOpenMicrophone?: TRoleAuthType;
    /**
     * RTC频道：开启摄像头的权限
     */
    RTCChannelOpenCamera?: TRoleAuthType;
    /**
     * RTC频道：开启/关闭他人麦克风的权限
     */
    RTCChannelOpenCloseOtherMicrophone?: TRoleAuthType;
    /**
     * RTC频道：开启/关闭他人摄像头的权限
     */
    RTCChannelOpenCloseOtherCamera?: TRoleAuthType;
    /**
     * RTC频道：开启/关闭全员麦克风的权限
     */
    RTCChannelOpenCloseEveryoneMicrophone?: TRoleAuthType;
    /**
     * RTC频道：开启/关闭全员摄像头的权限
     */
    RTCChannelOpenCloseEveryoneCamera?: TRoleAuthType;
    /**
     * RTC频道：打开自己共享屏幕的权限
     */
    RTCChannelOpenShareScreen?: TRoleAuthType;
    /**
     * RTC频道：关闭他人屏幕共享的权限
     */
    RTCChannelCloseOtherShareScreen?: TRoleAuthType;
    /**
     * 申请邀请管理权限，仅 server 有这个权限。
     */
    manageInviteApply?: TRoleAuthType;
    manageInviteApplyHistory?: TRoleAuthType;
    mentionedRole?: TRoleAuthType;
    [key: number]: TRoleAuthType;
};
/**
 * 频道身份组
 */
export declare type QChatChannelRole = {
    serverId: string;
    channelId: string;
    /**
     * 权限对象
     */
    auths: QChatRoleAuth;
    /**
     * 身份组 id
     */
    roleId: string;
    /**
     * 继承服务器的身份组id
     */
    parentRoleId: string;
    /**
     * 身份组类型： everyone 标志所有人都适用的身份组, custom 表示针对个人可定制的身份组
     */
    type: TRoleType;
    /**
     * 身份组扩展字段
     */
    ext?: string;
    /**
     * 身份组图标
     */
    icon?: string;
    /**
     * 身份组名称
     */
    name: string;
    createTime: number;
    updateTime: number;
};
/**
 * (某频道下给某人)定制权限
 */
export declare type QChatMemberRole = {
    id: string;
    /**
     * 成员的 account id
     */
    accid: string;
    channelId: string;
    serverId: string;
    /**
     * 权限
     */
    auths: QChatRoleAuth;
    /**
     * 昵称
     */
    nick?: string;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 扩展
     */
    ext?: string;
    /**
     * 成员类型
     */
    memberType: TMemberType;
    /**
     * 加入时间
     */
    joinTime: number;
    /**
     * 邀请者的 account ID
     */
    inviter: string;
    createTime: number;
    updateTime: number;
};
/**
 * 服务器身份组
 */
export declare type QChatServerRole = {
    /**
     * 权限对象，key-value 形式提供，格式如
     *
     * { key1: 'ignore', key2: 'allow', key3: 'deny' }
     */
    auths: QChatRoleAuth;
    /**
     * 扩展字段
     */
    ext?: string;
    /**
     * 图标 url
     */
    icon: string;
    /**
     * 身份组别名
     */
    name: string;
    /**
     * 拥有的成员数量
     */
    memberCount: number;
    /**
     * 权限优先级，数字越小，优先级越高。
     */
    priority: number;
    /**
     * 主键标识
     */
    roleId: string;
    serverId: string;
    /**
     * 类型
     *
     * "everyone" 代表所有成员都适用的默认规则
     *
     * "custom" 代表用户自行设置的身份组
     */
    type: TRoleType;
    createTime: number;
    updateTime: number;
};
/**
 * 服务器身份组的成员
 */
export declare type QChatServerRoleMember = {
    serverId: string;
    accid: string;
    roleId: string;
    createTime: number;
    updateTime: number;
};
export declare type GetExistingChannelRolesByServerRoleIdsOptions = {
    serverId: string;
    channelId: string;
    /**
     * 服务器身份组的 id 列表
     */
    roleIds: string[];
};
export declare type GetExistingAccidsOfMemberRolesOptions = {
    serverId: string;
    channelId: string;
    /**
     * account id 列表
     */
    accids: string[];
};
export declare type GetExistingAccidsInServerRoleOptions = {
    serverId: string;
    roleId: string;
    /**
     * account id 列表
     */
    accids: string[];
};
export declare type UpdateServerRolePrioritiesOptions = {
    serverId: string;
    /**
     * QChatServerRole 中只需要传 serverId, roleId 和 priority。传其他字段如 ext 等会被忽略。
     */
    serverRoles: Partial<QChatServerRole>[];
};
