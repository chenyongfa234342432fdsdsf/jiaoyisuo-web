export { setPageFiles };
export { setPageFilesAsync };
export { getPageFilesAll };
import { assert, unique } from '../utils';
import { determinePageId } from '../determinePageId';
import { parseGlobResults } from './parseGlobResults';
const pageFiles = (globalThis.__vite_plugin_ssr__pageFiles = globalThis.__vite_plugin_ssr__pageFiles || {
    pageFilesAll: undefined,
    pageFilesGetter: undefined
});
function setPageFiles(pageFilesExports) {
    pageFiles.pageFilesAll = parseGlobResults(pageFilesExports);
}
function setPageFilesAsync(getPageFilesExports) {
    pageFiles.pageFilesGetter = async () => {
        setPageFiles(await getPageFilesExports());
    };
}
async function getPageFilesAll(isClientSide, isProduction) {
    if (isClientSide) {
        assert(!pageFiles.pageFilesGetter);
        assert(isProduction === undefined);
    }
    else {
        assert(pageFiles.pageFilesGetter);
        assert(typeof isProduction === 'boolean');
        if (!pageFiles.pageFilesAll ||
            // We reload all glob imports in dev to make auto-reload work
            !isProduction) {
            await pageFiles.pageFilesGetter();
        }
    }
    assert(pageFiles.pageFilesAll);
    const pageFilesAll = pageFiles.pageFilesAll;
    const allPageIds = getAllPageIds(pageFilesAll);
    return { pageFilesAll, allPageIds };
}
function getAllPageIds(allPageFiles) {
    const fileIds = allPageFiles
        .filter(({ isDefaultPageFile }) => !isDefaultPageFile)
        .map(({ filePath }) => filePath)
        .map(determinePageId);
    const allPageIds = unique(fileIds);
    return allPageIds;
}
