"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExports = exports.getExportUnion = void 0;
const utils_1 = require("../utils");
const assertExports_1 = require("./assertExports");
function getExports(pageFiles) {
    const exportsAll = {};
    pageFiles.forEach((pageFile) => {
        const exportValues = getExportValues(pageFile);
        exportValues.forEach(({ exportName, exportValue, isFromDefaultExport }) => {
            (0, utils_1.assert)(exportName !== 'default');
            exportsAll[exportName] = exportsAll[exportName] ?? [];
            exportsAll[exportName].push({
                exportValue,
                filePath: pageFile.filePath,
                // @ts-expect-error
                _filePath: pageFile.filePath,
                _fileType: pageFile.fileType,
                _isFromDefaultExport: isFromDefaultExport
            });
        });
    });
    const pageExports = createObjectWithDeprecationWarning();
    const exports = {};
    Object.entries(exportsAll).forEach(([exportName, values]) => {
        values.forEach(({ exportValue, _fileType, _isFromDefaultExport }) => {
            exports[exportName] = exports[exportName] ?? exportValue;
            // Legacy `pageContext.pageExports`
            if (_fileType === '.page' && !_isFromDefaultExport) {
                if (!(exportName in pageExports)) {
                    pageExports[exportName] = exportValue;
                }
            }
        });
    });
    (0, utils_1.assert)(!('default' in exports));
    (0, utils_1.assert)(!('default' in exportsAll));
    return {
        exports,
        exportsAll,
        pageExports
    };
}
exports.getExports = getExports;
function getExportValues(pageFile) {
    const { filePath, fileExports } = pageFile;
    (0, utils_1.assert)(fileExports); // assume pageFile.loadFile() was called
    const exportValues = [];
    Object.entries(fileExports)
        .sort((0, utils_1.makeLast)(([exportName]) => exportName === 'default')) // `export { bla }` should override `export default { bla }`
        .forEach(([exportName, exportValue]) => {
        let isFromDefaultExport = exportName === 'default';
        if (isFromDefaultExport) {
            if (!(0, utils_1.isJavaScriptFile)(filePath)) {
                // `.vue` and `.md` files
                exportName = 'Page';
            }
            else {
                (0, utils_1.assertUsage)((0, utils_1.isObject)(exportValue), `The \`export default\` of ${filePath} should be an object.`);
                Object.entries(exportValue).forEach(([defaultExportName, defaultExportValue]) => {
                    (0, assertExports_1.assertDefaultExports)(defaultExportName, filePath);
                    exportValues.push({
                        exportName: defaultExportName,
                        exportValue: defaultExportValue,
                        isFromDefaultExport
                    });
                });
                return;
            }
        }
        exportValues.push({
            exportName,
            exportValue,
            isFromDefaultExport
        });
    });
    exportValues.forEach(({ exportName, isFromDefaultExport }) => {
        (0, utils_1.assert)(!(isFromDefaultExport && assertExports_1.forbiddenDefaultExports.includes(exportName)));
    });
    return exportValues;
}
function createObjectWithDeprecationWarning() {
    return new Proxy({}, {
        get(...args) {
            // We only show the warning in Node.js because when using Client Routing Vue integration uses `Object.assign(pageContextReactive, pageContext)` which will wrongully trigger the warning. There is no cross-browser way to catch whether the property accessor was initiated by an `Object.assign()` call.
            if (!(0, utils_1.isBrowser)()) {
                (0, utils_1.assertWarning)(false, '`pageContext.pageExports` is outdated. Use `pageContext.exports` instead, see https://vite-plugin-ssr.com/exports', { onlyOnce: true, showStackTrace: true });
            }
            return Reflect.get(...args);
        }
    });
}
function getExportUnion(exportsAll, propName) {
    return (exportsAll[propName]
        ?.map((e) => {
        (0, utils_1.assertUsage)((0, utils_1.hasProp)(e, 'exportValue', 'string[]'), `\`export { ${propName} }\` of ${e.filePath} should be an array of strings.`);
        return e.exportValue;
    })
        .flat() ?? []);
}
exports.getExportUnion = getExportUnion;
