import { NIMEModuleParamCloudStorageConfig } from './CloudStorageServiceInterface';
export declare type StrAnyObj = {
    [key: string]: any;
};
export declare type StrObj = {
    [key: string]: string;
};
export declare type QChat = {
    id: string;
    name: string;
    announcement: string;
    broadcastUrl: string;
    custom: string;
    createTime: number;
    updateTime: number;
    creator: string;
    mute: boolean;
    onlineMemberNum: number;
};
/**
 * 实例初始化参数
 *
 * eg. new sdk({ ...QChatInitializeOptions })
 */
export interface QChatInitializeOptions {
    account: string;
    /**
     * 注意 k 是小写的
     */
    appkey: string;
    token: string;
    /**
     * 连接地址列表
     *
     * 推荐使用服务器 API 获取。还可通过 NIM 连接实例获取，形式如 `await nim.plugin.getQChatAddress({ipType: 0})`
     */
    linkAddresses: string[];
    /**
     * 鉴权方式，默认0
     * 0 表示最初的loginToken的校验方式，
     * 1 表示基于appSecret计算的token鉴权方式，
     * 2表示基于第三方回调的token鉴权方式，
     */
    authType?: number;
    /**
     * 登录自定义字段，用于提交给用户的第三方回调服务进行登录检测
     */
    loginExt?: string;
    /**
     * 日志分级
     *
     * 可选值，"off" | "error" | "warn" | "log" | "debug"
     *
     * 这个参数仅在初始化有效，setOptions{@link QChatInterface.setOptions | setOptions}中不生效
     */
    debugLevel?: string;
    /**
     * 是否需要自动重连
     */
    needReconnect?: boolean;
    /**
     * 自动重连尝试次数
     */
    reconnectionAttempts?: number;
    /**
     * 是否 deviceId 需要固定下来。默认 false。
     *
     * true：sdk 随机对设备生成一个设备标识并存入 localstorage 缓存起来，也就是说一个浏览器来说所有 SDK 实例连接都被认为是共同的设备。
     *
     * false：每一个 sdk 实例连接时，使用随机的字符串作为设备标识，相当于每个实例采用的不同的设备连接上来的。
     *
     * 注意：这个参数会影响多端互踢的策略。有关于多端互踢策略的配置可以参见服务器文档。
     *
     */
    isFixedDeviceId?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * Abtest 是否开启，默认 true 开启
     *
     * 注: 打开这个开关，在 sdk 内部会试探某些新功能的开启，建议开发者不要轻易设置它。
     * @locale
     *
     * @locale en
     * @locale
     */
    isAbtestEnable?: boolean;
}
export interface QChatOtherOptions {
    /**
     * cloud storage 模块配置
     */
    cloudStorageConfig: NIMEModuleParamCloudStorageConfig;
    /**
     * QChatMedia模块配置
     */
    QChatMedia?: {
        /**
         * neroom sdk
         *
         * QChatMedia强依赖neroom sdk（应用组那边开发的音视频频道的SDK）
         */
        neroom: any;
    };
}
export declare type WillReconnectEventResult = {
    /**
     * 重试次数
     */
    retryCount: number;
    /**
     * 重试间隔
     */
    duration: number;
};
export declare enum EClientType {
    Android = 1,
    iOS = 2,
    PC = 4,
    WindowsPhone = 8,
    Web = 16,
    Server = 32,
    Mac = 64
}
export declare type TClientType = keyof typeof EClientType;
export declare type LoginResult = {
    appkey: string;
    /**
     * 端测的IP
     */
    clientIP: string;
    /**
     * 端测的端口
     */
    clientPort: number;
    /**
     * 端类型
     */
    clientType: TClientType;
    /**
     * 连接 id
     */
    consid: string;
    /**
     * 自定义的端类型
     */
    customClientType: number;
    /**
     * 设备 id
     */
    deviceId: string;
    /**
     * 是否为自动连接（断线重连）
     */
    isAutoReconnect: boolean;
    /**
     * 登录时间
     */
    loginTime: number;
    /**
     * 是否在线
     */
    online: boolean;
    /**
     * 端的系统信息
     */
    os: string;
    /**
     * 推送类型
     */
    pushType: number;
    /**
     * 1 表示之前有推送
     */
    hasTokenPreviously: boolean;
};
export declare type MultiSpotLoginResult = {
    /**
     * account id
     */
    account: string;
    /**
     * socket 连接 id
     */
    connectionId: string;
    /**
     * 设备id
     */
    deviceId: string;
    /**
     * ip 地址
     */
    ip: string;
    /**
     * mac 地址
     */
    mac: string;
    /**
     * 是否在线
     */
    online: boolean;
    /**
     * 系统版本
     */
    os: string;
    /**
     * 登录时间
     */
    time: number;
    /**
     * 客户端类型
     */
    clientType: TClientType;
};
export declare type TKickedReason = {
    /**
     * 未知 | 互斥类型的客户端互踢-不允许同一个帐号在多个地方同时登录 | 服务器端发起踢客户端指令-被服务器踢了 | 被自己账号所在的其他端踢掉 | 被悄悄踢掉, 表示这个链接已经废掉了
     */
    reason: 'unknow' | 'samePlatformKick' | 'serverKick' | 'otherPlatformKick' | 'silentlyKick';
    /**
     * 原因的详细描述
     */
    message: string;
    /**
     * 踢了本链接的那个客户端的类型
     */
    clientType: TClientType;
    /**
     * 踢了本链接的那个客户端的自定义端类型
     */
    customClientType: number;
    /**
     * 扩展字段
     */
    ext?: string;
};
export declare type QChatMessageUnread = {
    /**
     * 消息所属的服务器的id
     */
    serverId: string;
    /**
     * 消息所属的频道的id
     */
    channelId: number;
    /**
     * SDK端测生成的消息id
     */
    idClient: string;
};
