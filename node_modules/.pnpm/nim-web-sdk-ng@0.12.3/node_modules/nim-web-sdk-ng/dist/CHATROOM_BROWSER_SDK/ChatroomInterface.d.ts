import { NIMEModuleParamCloudStorageConfig } from './CloudStorageServiceInterface';
import { Chatroom, ChatroomMember, ChatroomMessage } from './types';
export interface ChatroomInterface {
    /**
     * 实例状态
     */
    status: NIMEChatroomInstanceStatus;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 建立连接，并且登录
     * @locale
     *
     * @locale en
     * Establish a WebSocket persistent connection and log in to the chatroom.
     * @locale
     */
    connect(): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 断开连接
     *
     * 退出登录状态，并断开 websocket 连接
     * disconnect完成后，实例不会被销毁，可再次 connect 方法登录IM
     * @locale
     *
     * @locale en
     * Disconnect.
     *
     * Log out and disconnect the WebSocket persistent connection.
     * After the disconnect is completed, the chatroom instance will not be destroyed, you can log in to the chatroom again via calling “connect(): Promise<void>”.
     * @locale
     */
    disconnect(): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 更新初始化传入的参数，在初始化完成后使用
     *
     * 请注意！传入的参数会在下一次调用connect或重连生效
     *
     * @locale
     *
     * @locale en
     * @locale
     */
    setOptions(options: ChatroomInitializeOptions): void;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 销毁实例
     * 销毁当前 IM 实例，同时会退出登录状态，并断开websocket连接
     * 移除所有监听事件，销毁部分内部变量，并且此实例再也无法调用 connect 恢复 IM 连接
     * @locale
     *
     * @locale en
     * Destroy the chatroom instance.
     *
     * Destroy the current chatroom instance, log out at the same time, and disconnect the WebSocket persistent connection
     * Remove all listening events, destroy some internal variables, and the connection can no longer be restored for the instance by calling “connect(): Promise<void>”.
     * @locale
     */
    destroy(): Promise<void>;
}
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 聊天室实例初始化参数
 *
 * eg. new sdk({ ...ChatroomInitializeOptions })
 * @locale
 *
 * @locale en
 * Chatroom instance initialization parameters
 *
 * eg . new sdk ( { ... ChatroomInitializeOptions })
 * @locale
 */
export interface ChatroomInitializeOptions {
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 注意 k 是小写的
     * @locale
     *
     * @locale en
     * Note: “k” in “appkey” must be lowercase.
     * @locale
     */
    appkey: string;
    token: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 聊天室 id
     * @locale
     *
     * @locale en
     * chatroom id
     * @locale
     */
    chatroomId: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 聊天室地址列表
     * @locale
     *
     * @locale en
     * Chatroom address list
     * @locale
     */
    chatroomAddresses: string[];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 日志分级
     *
     * 可选值，"off" | "error" | "warn" | "log" | "debug"
     * @locale
     *
     * @locale en
     * Log classification
     *
     * optional value, "off" | "error" | "warn" | "log" | "debug"
     * @locale
     */
    debugLevel?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否需要自动重连
     * @locale
     *
     * @locale en
     * Whether automatic reconnection is required
     * @locale
     */
    needReconnect?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 自动重连尝试次数
     * @locale
     *
     * @locale en
     * Automatic reconnection attempts
     * @locale
     */
    reconnectionAttempts?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否为游客
     * @locale
     *
     * @locale en
     * Whether it a tourist
     * @locale
     */
    isAnonymous?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 标签，可设置多个，仅代表本次登录
     * @locale
     *
     * @locale en
     * Chatroom tag. You can set multiple chatroom tags. The tags that you set are only valid for the current login; if you log in again, you need to set the tags again.
     * @locale
     */
    tags?: string[];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 登录登出等通知目标的标签，是一个标签表达式
     * @locale
     *
     * @locale en
     * The tag of the target members who need to be notified of events such as the Login and Logout events.
     * @locale
     */
    notifyTargetTags?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 鉴权方式，默认0
     * 0 表示最初的loginToken的校验方式，
     * 1 表示基于appSecret计算的token鉴权方式，
     * 2 表示基于第三方回调的token鉴权方式，
     * @locale
     *
     * @locale en
     * Authentication method (default: 0)
     * 0 indicates the authentication method based on the initial loginToken.
     * 1 represents the authentication method based on the token calculated using appSecret.
     * 2 indicates the authentication method based on the token got from third-party callback.
     * @locale
     */
    authType?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 登录自定义字段，用于提交给用户的第三方回调服务进行登录检测
     * @locale
     *
     * @locale en
     * Login customization field, used for submitting to the user's third-party callback service for login authentication.
     * @locale
     */
    loginExt?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否 deviceId 需要固定下来。默认 false。
     *
     * true：sdk 随机对设备生成一个设备标识并存入 localstorage 缓存起来，也就是说一个浏览器来说所有 SDK 实例连接都被认为是共同的设备。
     *
     * false：每一个 sdk 实例连接时，使用随机的字符串作为设备标识，相当于每个实例采用的不同的设备连接上来的。
     *
     * 注意：这个参数会影响多端互踢的策略。有关于多端互踢策略的配置可以参见服务器文档。
     * @locale
     *
     * @locale en
     * @locale
     */
    isFixedDeviceId?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * Abtest 是否开启，默认 true 开启
     *
     * 注: 打开这个开关，在 sdk 内部会试探某些新功能的开启，建议开发者不要轻易设置它。
     * @locale
     *
     * @locale en
     * @locale
     */
    isAbtestEnable?: boolean;
}
export interface ChatroomOtherOptions {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * cloud storage 模块配置
     * @locale
     *
     * @locale en
     * cloud storage config
     * @locale
     */
    cloudStorageConfig?: NIMEModuleParamCloudStorageConfig;
}
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 静态方法
 * @locale
 *
 * @locale en
 * Static method
 * @locale
 */
export interface ChatroomInterfaceStatic {
    /**
     * 构造函数
     */
    new (options?: ChatroomInitializeOptions, otherOptions?: ChatroomOtherOptions): ChatroomInterface;
    /**
     * 单例模式获取实例
     */
    getInstance(_options?: ChatroomInitializeOptions, _otherOptions?: ChatroomOtherOptions): ChatroomInterface;
    /**
     * 设置适配器
     * @param _newAdapters 适配器
     */
    setAdapters(_newAdapters: any): void;
}
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 实例的状态标识
 *
 * - unconnected: 尚未建立连接(初始化、主动登出、达到最大重连次数)
 * - connecting: 正在建立连接中
 * - connected: 已连接，尚未完成鉴权认证
 * - logined: 已连接, 并且完成了鉴权认证，可以正常开始发送协议
 * - waitReconnect: 等待重连中
 * - destroyed: 实例已经销毁
 * @locale
 *
 * @locale en
 * Status of the instance
 *
 * - unconnected: no connection has been established(Initialization, active logout, and maximum reconnection times)
 * - connecting: Establishing connection
 * - connected: Connected, authentication has not been completed
 * - logined: Connected and completed the authentication
 * - waitReconnect: Waiting for reconnection
 * - destroyed: The instance has been destroyed
 * @locale
 */
export declare type NIMEChatroomInstanceStatus = 'unconnected' | 'connecting' | 'connected' | 'logined' | 'waitReconnect' | 'destroyed';
/**
 * Example：
 *
 * const instance = new SDK()
 *
 * instance.on('logined', loginResult => { console.log(loginResult) }
 */
export interface ChatroomEventInterface {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 初始化成功登陆
     * @locale
     *
     * @locale en
     * Initialization succeeded and login
     * @locale
     */
    logined: [loginResult: TLoginedResult];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被踢下线
     * @locale
     *
     * @locale en
     * Be forced to go offline
     * @locale
     */
    kicked: [kickedReason: TKickedReason];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 开始自动重连
     * @locale
     *
     * @locale en
     * Start automatic reconnection
     * @locale
     */
    willReconnect: [params: TWillReconnect];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 连接断开
     * @locale
     *
     * @locale en
     * Disconnect
     * @locale
     */
    disconnect: [];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到消息
     * @locale
     *
     * @locale en
     * Received messages
     * @locale
     */
    chatroomMsg: [chatroomMsg: ChatroomMessage];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 当前用户标签变更
     * @locale
     */
    tagsUpdate: [currentTags: string[]];
}
export declare type TLoginedResult = {
    chatroom: Chatroom;
    member: ChatroomMember;
};
export declare type TKickedReason = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 未知 | 聊天室已经被解散 | 被管理员或踢了 | 多端被踢-不允许同一个帐号在多个地方同时登录 | 被悄悄踢掉, 表示这个链接已经废掉了 | 被拉黑了
     * @locale
     *
     * @locale en
     * Unknown | Chatroom has been disbanded | Removed from chatroom by Administrator | Force offline - the same account is not allowed to log in to multiple devices at the same time | Quietly kicked out, indicating that the link has been abolished | Blocked
     * @locale
     */
    reason: 'unknow' | 'chatroomClosed' | 'managerKick' | 'samePlatformKick' | 'silentlyKick' | 'blacked';
    message: string;
};
export declare type TWillReconnect = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 重试次数
     * @locale
     *
     * @locale en
     * number of retries
     * @locale
     */
    retryCount: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 重试间隔
     * @locale
     *
     * @locale en
     * retry interval
     * @locale
     */
    duration: number;
};
