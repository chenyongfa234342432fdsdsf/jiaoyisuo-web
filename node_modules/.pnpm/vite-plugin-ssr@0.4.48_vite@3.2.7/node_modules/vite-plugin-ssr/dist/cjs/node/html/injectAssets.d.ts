import type { MediaType } from './inferMediaType';
import type { ViteDevServer } from 'vite';
import type { InjectToStream } from 'react-streaming/server';
export { injectAssets__public };
export { injectAssets };
export { injectAssetsToStream };
export type { PageContextInjectAssets };
export { PageAsset };
declare type PageAsset = {
    src: string;
    assetType: 'script' | 'style' | 'preload';
    mediaType: null | NonNullable<MediaType>['mediaType'];
    preloadType: null | NonNullable<MediaType>['preloadType'];
};
declare function injectAssets__public(htmlString: string, pageContext: Record<string, unknown>): Promise<string>;
declare type PageContextInjectAssets = {
    urlPathname: string;
    _getPageAssets: () => Promise<PageAsset[]>;
    _pageId: string;
    _passToClient: string[];
    _isHtmlOnly: boolean;
    _pageContextPromise: Promise<unknown> | null;
    _renderHook: {
        hookFilePath: string;
        hookName: 'render';
    };
    _isProduction: boolean;
    _viteDevServer: null | ViteDevServer;
    _baseUrl: string;
    is404: null | boolean;
};
declare function injectAssets(htmlString: string, pageContext: PageContextInjectAssets): Promise<string>;
declare function injectAssetsToStream(pageContext: PageContextInjectAssets, injectToStream: null | InjectToStream): {
    injectAtStreamBegin: (htmlBegin: string) => Promise<string>;
    injectAtStreamEnd: (htmlEnd: string) => Promise<string>;
};
