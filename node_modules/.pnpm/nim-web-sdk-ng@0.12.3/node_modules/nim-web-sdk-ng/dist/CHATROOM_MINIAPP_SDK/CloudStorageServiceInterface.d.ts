import { IUploadFileOptions, UploadFileResult } from './types';
export interface CloudStorageServiceInterface {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 上传文件
     * @locale
     *
     * @locale en
     * Upload files
     * @locale
     */
    uploadFile(options: IUploadFileOptions): Promise<UploadFileResult>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 短链转长链
     * @locale
     *
     * @locale en
     *
     * @locale
     */
    getOriginUrl(options: string): Promise<string>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 获取文件鉴权的token
     * @locale
     * @locale en
     * Get the token for the authorization of file access.
     * @locale
     */
    getFileToken(options: GetFileTokenOptions): Promise<GetFileTokenResult | void>;
}
export declare type GetFileTokenOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 类型 2表示带过期时间的全局token鉴权，3表示文件级别的url鉴权
     * @locale
     *
     * @locale en
     *
     * @locale
     */
    type: 2 | 3;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 如果type=3,是url鉴权，需要传url数组
     * @locale
     *
     * @locale en
     *
     * @locale
     */
    urls?: string[] | string;
};
export declare type GetFileTokenResult = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 类型 2表示带过期时间的全局token鉴权，3表示文件级别的url鉴权
     * @locale
     *
     * @locale en
     *
     * @locale
     */
    type: 2 | 3;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 如果是url鉴权，就返回url数组对应的tokens
     * @locale
     *
     * @locale en
     *
     * @locale
     */
    tokens?: string[];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 基于过期时间鉴权的token
     * @locale
     *
     * @locale en
     *
     * @locale
     */
    token?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * token的过期时间，单位s
     * @locale
     *
     * @locale en
     *
     * @locale
     */
    ttl: number;
};
export declare type NIMEModuleParamCloudStorageConfig = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * NOS上传地址（直传）
     * @locale
     *
     * @locale en
     * @locale
     */
    commonUploadHost?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * NOS上传地址（分片）
     * @locale
     *
     * @locale en
     * @locale
     */
    chunkUploadHost?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送文件消息中文件的url的通配符地址，例：'https://{host}/{object}'
     * @locale
     *
     * @locale en
     * @locale
     */
    uploadReplaceFormat?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 接收到文件消息的替换模版
     * 这个是用来接到消息后，要按一定模式替换掉文件链接的。给予一个安全下载链接。
     * 例：'https://{bucket}-nosdn.netease.im/{object}'
     * @locale
     *
     * @locale en
     * @locale
     */
    downloadUrl?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到哪些host地址，需要替换成downloadUrl，例：收到nos.netease.com/{bucket}/{obj}
     * @locale
     *
     * @locale en
     * @locale
     */
    downloadHostList?: string[];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 服务器下发的域名存在，并且对象前缀匹配成功，那么强行替换为`${protocol}${serverCdnDomain}/${decodePath.slice(prefixIndex)}`
     * @locale
     *
     * @locale en
     * @locale
     */
    nosCdnEnable?: boolean;
    /**
     * NOS 上传专用的 cdn 配置
     */
    cdn?: {
        /**
         * 默认的下载域名
         */
        defaultCdnDomain?: string;
        /**
         * 下载域名
         */
        cdnDomain?: string;
        /**
         * 桶名, 一般 NOS 默认为 "nim"
         */
        bucket?: string;
        /**
         * 路径前缀，一般不需要填写
         */
        objectNamePrefix?: string;
    };
    /**
     * amazon aws s3 sdk
     *
     * 注：若传入 s3 sdk 后，本 SDK 根据融合存储策略配置，可能会 new 创建出它的实例并使用它的实例方法进行上传/存储。
     */
    s3?: any;
    /**
     * localStorage 缓存的云存储配置的键名的前缀。默认叫 NIMClient
     *
     * 注: 举个例子，根据默认配置，策略缓存的键叫 'NIMClient-AllGrayscaleConfig'。
     */
    storageKeyPrefix?: string;
    /**
     * 是否需要开启融合存储整个策略。默认为 true
     *
     * 注: 为 false 则不会进行 lbs 灰度开关和策略获取，直接退化到老的 nos 上传逻辑。
     */
    isNeedToGetUploadPolicyFromServer?: boolean;
};
