"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPageFileObject = void 0;
const determinePageId_1 = require("../determinePageId");
const route_1 = require("../route");
const utils_1 = require("../utils");
function getPageFileObject(filePath) {
    const isRelevant = (pageId) => pageFile.pageId === pageId ||
        (pageFile.isDefaultPageFile && (pageFile.isRendererPageFile || isAncestorDefaultPage(pageId, pageFile.filePath)));
    const fileType = determineFileType(filePath);
    const pageFile = {
        filePath,
        fileType,
        isRelevant,
        isDefaultPageFile: isDefaultFilePath(filePath),
        isRendererPageFile: isDefaultFilePath(filePath) && isRendererFilePath(filePath),
        isErrorPageFile: (0, route_1.isErrorPageId)(filePath),
        pageId: (0, determinePageId_1.determinePageId)(filePath)
    };
    return pageFile;
}
exports.getPageFileObject = getPageFileObject;
function determineFileType(filePath) {
    (0, utils_1.assertPosixPath)(filePath);
    const fileName = filePath.split('/').slice(-1)[0];
    const fileNameSegments = fileName.split('.');
    const suffix1 = fileNameSegments.slice(-3)[0];
    const suffix2 = fileNameSegments.slice(-2)[0];
    if (suffix2 === 'page') {
        return '.page';
    }
    (0, utils_1.assert)(suffix1 === 'page', { filePath });
    if (suffix2 === 'server') {
        return '.page.server';
    }
    if (suffix2 === 'client') {
        return '.page.client';
    }
    if (suffix2 === 'route') {
        return '.page.route';
    }
    (0, utils_1.assert)(false, { filePath });
}
function isDefaultFilePath(filePath) {
    (0, utils_1.assertPosixPath)(filePath);
    (0, utils_1.assert)(filePath.startsWith('/'));
    if ((0, route_1.isErrorPageId)(filePath)) {
        return false;
    }
    return filePath.includes('/_default');
}
function isRendererFilePath(filePath) {
    (0, utils_1.assertPosixPath)(filePath);
    (0, utils_1.assert)(filePath.startsWith('/'));
    return filePath.includes('/renderer/');
}
function isAncestorDefaultPage(pageId, defaultPageFilePath) {
    (0, utils_1.assertPosixPath)(pageId);
    (0, utils_1.assertPosixPath)(defaultPageFilePath);
    (0, utils_1.assert)(pageId.startsWith('/'));
    (0, utils_1.assert)(defaultPageFilePath.startsWith('/'));
    (0, utils_1.assert)(!pageId.endsWith('/'));
    (0, utils_1.assert)(!defaultPageFilePath.endsWith('/'));
    (0, utils_1.assert)(isDefaultFilePath(defaultPageFilePath));
    const defaultPageDir = (0, utils_1.slice)(defaultPageFilePath.split('/'), 0, -1)
        .filter((filePathSegment) => filePathSegment !== '_default')
        .join('/');
    return pageId.startsWith(defaultPageDir);
}
