export interface FriendServiceInterface {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 获取好友列表
     * @locale
     *
     * @locale en
     * Get friend list
     * @locale
     */
    getFriends(): Promise<FriendProfile[]>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 直接加为好友
     *
     * 直接加某个用户为好友后, 对方不需要确认, 直接成为当前登录用户的好友。
     * 对方会收到一条类型为 类型为 type 为 friendReuqest 的系统通知，attach.type 为 addFriend,,
     * 此类系统通知的 from 字段的值为申请方的帐号, to 字段的值为接收方的账号。
     * @locale
     *
     * @locale en
     * Add as friends directly
     *
     * After user A (the currently logged-in user) directly add user B as a friend, user B does not need to approve it and directly becomes the friend of user A.
     * User B will receive a system notification whose type is friendRequest and attach.type is addFriend.
     * The value of the “from” field of this type of system notification is the account of the sender (in this case, user A). And the value of the “to” field is the account of the receiver (in this case, user B).
     * @locale
     */
    addFriend(options: AddFriendOptions): Promise<FriendProfile>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 申请加为好友
     *
     * 申请加某个用户为好友后, 对方会收到一条类型为 type 为 friendReuqest 的系统通知，attach.type 为 applyFriend,
     * 用户在收到好友申请后, 可以选择通过或者拒绝好友申请
     * @locale
     *
     * @locale en
     * Send a friend request
     *
     * After user A (sender) sends a friend to User B (receiver), user B will receive a system notification whose type is friendRequest and attach.type is applyFriend.
     * After receiving the friend request, user B can approve or reject the friend request.
     * @locale
     */
    applyFriend(options: ApplyFriendOptions): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 通过好友申请
     *
     * 通过申请后, 对方会收到一条类型为 type 为 friendReuqest 的系统通知，attach.type 为 passFriendApply,
     * @locale
     *
     * @locale en
     * Approve friend request
     *
     * After user B approves the friend request, user A will receive a system notification whose type is friendRequest, attach.type is passFriendApply,
     * @locale
     */
    passFriendApply(options: PassFriendApplyOptions): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 拒绝好友申请
     *
     * 拒绝申请后, 对方会收到一条类型为 type 为 friendReuqest 的系统通知，attach.type 为 rejectFriendApply,
     * @locale
     *
     * @locale en
     * Reject friend request
     *
     * After user B rejects the friend request, user A will receive a system notification whose type is friendRequest and attach.type is rejectFriendApply.
     * @locale
     */
    rejectFriendApply(options: RejectFriendApplyOptions): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 删除好友
     *
     * 删除好友后, 被删除的人会收到一条类型为 type 为 deleteFriend 的系统通知
     * 此类系统通知的 from 字段的值为删除方的帐号, to 字段的值为被删除方的账号。
     * @locale
     *
     * @locale en
     * Delete friend
     *
     * After user B deletes user A from user B’s friend list, user A will receive a system notification whose type is deleteFriend.
     * The value of the “from” field of this type of system notification is the account of the person who deletes their friend (in this case, user B); and the value of the “to” field is the account of the deleted person (in this case, user A).
     * @locale
     */
    deleteFriend(options: DeleteFriendOptions): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 更新好友
     *
     * 只能更新备注和扩展字段
     * @locale
     *
     * @locale en
     * Update friends
     *
     * Only remarks and extension fields can be updated.
     * @locale
     */
    updateFriend(options: UpdateFriendOptions): Promise<void>;
}
export declare enum FriendProfileRelationShip {
    notFriend = 0,
    normalFriend = 1
}
export declare enum FriendProfilePassRelationShip {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 直接加
     * @locale
     *
     * @locale en
     * Add friend directly
     * @locale
     */
    add = 1,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 请求加
     * @locale
     *
     * @locale en
     * Send a friend request
     * @locale
     */
    ask = 2,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同意加
     * @locale
     *
     * @locale en
     * Agree to be added as a friend
     * @locale
     */
    agree = 3
}
export declare type FriendProfile = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 账号 accid
     * @locale
     *
     * @locale en
     * Account (accid)
     * @locale
     */
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 备注
     * @locale
     *
     * @locale en
     * Remark
     * @locale
     */
    alias?: string;
    updateTime: number;
    createTime: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否有效，默认 true。为 true 代表是双方是彼此的朋友
     * @locale
     *
     * @locale en
     * Whether it is effective
     * @locale
     */
    valid: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 扩展字段
     * @locale
     *
     * @locale en
     * Extension field
     * @locale
     */
    ext?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 服务端扩展字段，此字段客户端 sdk 只读，服务端 api 读写
     * @locale
     *
     * @locale en
     * Server extension field. For the client SDK, the field is read-only; for the server APIs, the field can be read and written.
     * @locale
     */
    serverex?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 主动好友关系（好友状态）
     * @locale
     *
     * @locale en
     * Friend status
     * @locale
     */
    relationShip?: FriendProfileRelationShip;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被动好友关系（加此好友的验证类型）
     * @locale
     *
     * @locale en
     * Verification type for adding the person as a friend
     * @locale
     */
    passRelationShip?: FriendProfilePassRelationShip;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 此好友来源，默认 0
     * @locale
     *
     * @locale en
     * This friend source, default 0
     * @locale
     */
    source?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 位运算扩展
     * @locale
     *
     * @locale en
     * Bit operation extension
     * @locale
     */
    bitsExtension?: number;
};
export declare type AddFriendOptions = {
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 附言
     * @locale
     *
     * @locale en
     * Bit operation extension
     * @locale
     */
    ps?: string;
};
export declare type ApplyFriendOptions = {
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 附言
     * @locale
     *
     * @locale en
     * postscript
     * @locale
     */
    ps?: string;
};
export declare type PassFriendApplyOptions = {
    account: string;
    ps: string;
};
export declare type RejectFriendApplyOptions = {
    account: string;
    ps: string;
};
export declare type DeleteFriendOptions = {
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否要删除好友的备注
     *
     * @locale
     *
     * @locale en
     * Whether to delete the friend's remark
     * @locale
     */
    delAlias: boolean;
};
export declare type UpdateFriendOptions = {
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 备注
     * @locale
     *
     * @locale en
     * Remark
     * @locale
     */
    alias: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 扩展字段
     * @locale
     *
     * @locale en
     * Extension field
     * @locale
     */
    ext?: string;
};
