"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobRoots = void 0;
const fs_1 = __importDefault(require("fs"));
const utils_1 = require("../../utils");
const path_1 = __importDefault(require("path"));
const symlink_dir_1 = __importDefault(require("symlink-dir"));
const resolve_1 = __importDefault(require("resolve"));
const assertConfigVps_1 = require("../config/assertConfigVps");
async function getGlobRoots(config) {
    (0, assertConfigVps_1.assertConfigVpsResolved)(config);
    const { root } = config;
    (0, utils_1.assertPosixPath)(root);
    const includePageFiles = resolveConfig(config.vitePluginSsr.pageFiles);
    const globRoots = [
        {
            pkgName: null,
            pkgRootResolved: root,
            includePath: '/'
        },
        ...(await Promise.all(includePageFiles.map((pkgName) => createIncludePath(pkgName, root)))).filter(utils_1.isNotNullish)
    ];
    return globRoots;
}
exports.getGlobRoots = getGlobRoots;
function resolveConfig(pageFiles) {
    const includePageFiles = [];
    if (pageFiles?.include) {
        includePageFiles.push(...pageFiles.include.map(normalizeIncludePaths));
    }
    return includePageFiles;
}
function normalizeIncludePaths(includePath) {
    includePath = (0, utils_1.toPosixPath)(includePath);
    if (includePath.endsWith('/')) {
        includePath = includePath.slice(0, -1);
    }
    return includePath;
}
async function createIncludePath(pkgName, root) {
    (0, utils_1.assertUsage)(isNpmName(pkgName), `Wrong vite-plugin-ssr config \`pageFiles.include\`: the string \`${pkgName}\` is not a valid npm package name.`);
    const { pkgJson, pkgRoot } = resolvePackage(pkgName, { preserveSymlinks: true, root });
    const pageFilesDir = pkgJson['vite-plugin-ssr']?.pageFilesDir ?? '';
    const pkgRootResolved = resolvePackageRoot(pkgName, { preserveSymlinks: false, root });
    {
        (0, utils_1.assertPosixPath)(root);
        (0, utils_1.assertPosixPath)(pkgRootResolved);
        const appRootIncludedInPkgRoot = root.startsWith(pkgRootResolved);
        if (appRootIncludedInPkgRoot) {
            return { pkgName, pkgRootResolved, includePath: null };
        }
    }
    const crawlRoot = path_1.default.posix.join(pkgRootResolved, pageFilesDir);
    (0, utils_1.assertUsage)(!root.startsWith(crawlRoot), `The page files include path ${crawlRoot} is a parent of the app's root ${root}. You need to use/change the \`pageFilesDir\` options. Contact the vite-plugin-ssr maintainer on GitHub / Discord for more information.`);
    const pkgRootRelative = path_1.default.posix.relative(root, pkgRoot);
    if (!pkgRootRelative.startsWith('..')) {
        const includePath = path_1.default.posix.join(pkgRootRelative, pageFilesDir);
        return { pkgName, pkgRootResolved, includePath };
    }
    const includePath = path_1.default.posix.join('node_modules', '.vite-plugin-ssr', pkgName, pageFilesDir);
    if (!fs_1.default.existsSync(includePath)) {
        const sourceAbsolute = crawlRoot;
        const targetAbsolute = `${root}/${includePath}`;
        (0, utils_1.assert)(!root.startsWith(crawlRoot)); // See above
        (0, utils_1.assert)(!targetAbsolute.startsWith(sourceAbsolute)); // Ensure it's not a cyclic symlink
        const source = path_1.default.posix.relative(root, sourceAbsolute);
        const target = path_1.default.posix.relative(root, targetAbsolute);
        await (0, symlink_dir_1.default)(source, target);
    }
    return { pkgName, pkgRootResolved, includePath };
}
function isNpmName(str) {
    if (str.includes('.')) {
        return false;
    }
    if (str.includes('\\')) {
        return false;
    }
    if (!str.includes('/')) {
        return true;
    }
    if (str.split('/').length === 2 && str.startsWith('@')) {
        return true;
    }
    return false;
}
function resolvePackage(pkgName, options) {
    const pkgJsonPath = resolvePackageJson(pkgName, options);
    const pkgRoot = path_1.default.posix.dirname(pkgJsonPath);
    const pkgJson = JSON.parse(fs_1.default.readFileSync(pkgJsonPath, 'utf8'));
    return { pkgJson, pkgRoot };
}
function resolvePackageRoot(pkgName, options) {
    const pkgJsonPath = resolvePackageJson(pkgName, options);
    const pkgRoot = path_1.default.posix.dirname(pkgJsonPath);
    return pkgRoot;
}
function resolvePackageJson(pkgName, { preserveSymlinks, root }) {
    let pkgJsonPath;
    try {
        // We cannot use Node.js's `require.resolve()`: https://stackoverflow.com/questions/10111163/in-node-js-how-can-i-get-the-path-of-a-module-i-have-loaded-via-require-that-is/63441056#63441056
        pkgJsonPath = resolve_1.default.sync(`${pkgName}/package.json`, { preserveSymlinks, basedir: root });
    }
    catch (_err) {
        (0, utils_1.assertUsage)(false, `Cannot find \`${pkgName}\`. Did you install it?`);
    }
    pkgJsonPath = (0, utils_1.toPosixPath)(pkgJsonPath);
    return pkgJsonPath;
}
