"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.manifest = void 0;
const utils_1 = require("../utils");
const helpers_1 = require("../helpers");
const assertPluginManifest_1 = require("./manifest/assertPluginManifest");
const runtimeConfig_1 = require("../../globalContext/runtimeConfig");
const extractExportNamesPlugin_1 = require("./extractExportNamesPlugin");
const assertConfigVps_1 = require("./config/assertConfigVps");
function manifest() {
    let ssr;
    let runtimeConfig;
    return [
        {
            name: 'vite-plugin-ssr:runtimeConfig',
            apply: (0, helpers_1.apply)('dev'),
            configResolved(config) {
                onConfigResolved(config);
                (0, runtimeConfig_1.setRuntimeConfig)(runtimeConfig);
            }
        },
        {
            name: 'vite-plugin-ssr:pluginManifest',
            apply: 'build',
            configResolved: onConfigResolved,
            generateBundle() {
                (0, utils_1.assert)(typeof ssr === 'boolean');
                (0, utils_1.assert)(runtimeConfig);
                if (ssr)
                    return;
                const manifest = {
                    version: utils_1.projectInfo.projectVersion,
                    usesClientRouter: (0, extractExportNamesPlugin_1.isUsingClientRouter)(),
                    ...runtimeConfig
                };
                (0, assertPluginManifest_1.assertPluginManifest)(manifest);
                this.emitFile({
                    fileName: `vite-plugin-ssr.json`,
                    type: 'asset',
                    source: JSON.stringify(manifest, null, 2)
                });
            }
        }
    ];
    function onConfigResolved(config) {
        (0, assertConfigVps_1.assertConfigVpsResolved)(config);
        ssr = (0, utils_1.viteIsSSR)(config);
        runtimeConfig = (0, runtimeConfig_1.resolveRuntimeConfig)(config);
    }
}
exports.manifest = manifest;
