import {
  decimal_default
} from "./chunk-I26NEMIA.js";
import {
  require_lodash
} from "./chunk-7VHWCIA3.js";
import {
  require_react
} from "./chunk-XRNU55GO.js";
import {
  __export,
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/.pnpm/@nbit+utils@1.0.1-beta.20/node_modules/@nbit/utils/es/decimal/index.js
var decimal_exports = {};
__export(decimal_exports, {
  SafeCalcUtil: () => SafeCalcUtil,
  formatCurrency: () => formatCurrency,
  formatNumberDecimal: () => formatNumberDecimal,
  formatObjectNumberByKeys: () => formatObjectNumberByKeys,
  formatZeroPrefix: () => formatZeroPrefix,
  getDigits: () => getDigits,
  getSafeCurrency: () => getSafeCurrency,
  getSafeDecimal: () => getSafeDecimal,
  removeDecimalZero: () => removeDecimalZero,
  setPrecision: () => setPrecision
});
var import_lodash = __toESM(require_lodash());
function setPrecision(val) {
  decimal_default.set({
    precision: val
  });
}
function getSafeCurrency(safeCurrency) {
  if (!safeCurrency) {
    return "0";
  }
  if ((0, import_lodash.isString)(safeCurrency)) {
    if (safeCurrency === "--") {
      return "0";
    }
    var number = new decimal_default(safeCurrency.trim());
    if (isNaN(number.toNumber())) {
      return "0";
    }
    return number.toFixed();
  }
  return safeCurrency;
}
function getSafeDecimal(value) {
  if (value instanceof decimal_default) {
    return value;
  }
  if (!value) {
    return new decimal_default(0);
  }
  if (typeof value === "string") {
    return new decimal_default(getSafeCurrency(value));
  }
  return new decimal_default(value);
}
var SafeCalcUtil = {
  mul: function mul(a, b) {
    return getSafeDecimal(a).mul(getSafeDecimal(b));
  },
  div: function div(a, b) {
    return getSafeDecimal(a).div(getSafeDecimal(b));
  },
  add: function add(a, b) {
    return getSafeDecimal(a).add(getSafeDecimal(b));
  },
  sub: function sub(a, b) {
    return getSafeDecimal(a).sub(getSafeDecimal(b));
  }
};
function formatZeroPrefix(value, digits) {
  digits = typeof digits === "number" ? digits : getDigits(value);
  var _val = getSafeDecimal(value);
  var comparedZeroRes = _val.comparedTo(getSafeDecimal(0));
  if (comparedZeroRes === 0) {
    return "".concat(_val.toFixed(digits)).replace(/[+-]*/, "");
  }
  return _val.toFixed(digits);
}
var removeDecimalZero = function removeDecimalZero2(val) {
  var regexp = /(?:\.0*|(\.\d+?)0+)$/;
  val = "".concat(val).replace(regexp, "$1");
  return val;
};
var formatNumberDecimal = function formatNumberDecimal2(data) {
  var digits = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
  var isRound = arguments.length > 2 ? arguments[2] : void 0;
  var delPostZero = arguments.length > 3 ? arguments[3] : void 0;
  var round = (0, import_lodash.isNumber)(isRound) ? isRound : isRound ? decimal_default.ROUND_HALF_UP : decimal_default.ROUND_DOWN;
  var result = getSafeDecimal(formatZeroPrefix(getSafeDecimal(data).toFixed(digits, round), digits)).toFixed(digits, round);
  if (!delPostZero) {
    return result;
  }
  return removeDecimalZero(result);
};
function formatObjectNumberByKeys(obj, keys, offset) {
  keys.forEach(function(k) {
    if (obj[k]) {
      obj[k] = formatNumberDecimal(obj[k], offset, false, true);
    }
  });
  return obj;
}
var formatCurrency = function formatCurrency2(data, digits) {
  var _data;
  var keepDigits = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var isRound = arguments.length > 3 ? arguments[3] : void 0;
  if (!((_data = data) !== null && _data !== void 0 && _data.toString())) {
    return "";
  }
  if (!digits && digits !== 0) {
    digits = getDigits(data);
  }
  data = getSafeDecimal(data);
  var value = (keepDigits ? formatNumberDecimal(data, digits, isRound) : formatNumberDecimal(data, digits, isRound, true)).split(".");
  var n = value[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  if (value.length > 1) {
    n = "".concat(n, ".").concat(value[1]);
  }
  return n;
};
function getDigits(data) {
  var _data$toFixed$split$;
  if (typeof data === "string") {
    var _data$split$;
    return ((_data$split$ = data.split(".")[1]) === null || _data$split$ === void 0 ? void 0 : _data$split$.length) || 0;
  }
  data = getSafeDecimal(data);
  return ((_data$toFixed$split$ = data.toFixed().split(".")[1]) === null || _data$toFixed$split$ === void 0 ? void 0 : _data$toFixed$split$.length) || 0;
}

// node_modules/.pnpm/@nbit+utils@1.0.1-beta.20/node_modules/@nbit/utils/es/market/index.js
var market_exports = {};
__export(market_exports, {
  getColorClassByPrice: () => getColorClassByPrice
});
var up_color_class = "text-buy_up_color";
var down_color_class = "text-sell_down_color";
function getColorClassByPrice(price) {
  var target = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  if (!price || price === "--" || !target && target !== 0 || target === "--") {
    return "";
  }
  var _price = getSafeDecimal(price);
  var _targetPrice = getSafeDecimal(target);
  if (_price.gt(_targetPrice)) {
    return up_color_class;
  } else if (_price.eq(_targetPrice)) {
    return "";
  } else {
    return down_color_class;
  }
}

// node_modules/.pnpm/@nbit+utils@1.0.1-beta.20/node_modules/@nbit/utils/es/index.js
setPrecision(40);

// node_modules/.pnpm/@nbit+react@1.0.0-beta.20/node_modules/@nbit/react/es/increase-tag/index.js
var import_react = __toESM(require_react());
var defaultProps = {
  hasColor: true,
  hasPrefix: true,
  hasPostfix: false,
  isRound: false,
  kSign: true,
  needPercentCalc: false,
  delZero: true,
  defaultEmptyText: "--",
  diffTarget: 0
};
var IncreaseTag = function IncreaseTag2(props) {
  var left = props.left, right = props.right, hasFather = props.hasFather, digits = props.digits;
  var value = "".concat(props.value === void 0 ? "--" : props.value);
  var increaseClassStr = props.hasColor ? market_exports.getColorClassByPrice(value, props.diffTarget) : "";
  var increaseClassStrWrap = increaseClassStr ? "tag-wrap-".concat(increaseClassStr) : "tag-wrap";
  var _digits = digits !== null && digits !== void 0 ? digits : decimal_exports.getDigits(value);
  var getformatFixStr = function getformatFixStr2(val, origin) {
    var postfix = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "%";
    var hasPrefix = props.hasPrefix, hasPostfix = props.hasPostfix, kSign = props.kSign;
    var str = "";
    if (hasPrefix) {
      var comparedZeroRes = decimal_exports.getSafeDecimal(val).comparedTo(decimal_exports.getSafeDecimal(0));
      var prefix = comparedZeroRes === 1 ? "+" : "";
      str = "".concat(prefix).concat(str);
    }
    str = "".concat(str).concat(val);
    if (hasPostfix) {
      str = "".concat(str).concat(postfix);
    }
    if (kSign) {
      var list = str.split(".");
      if (list.length > 1)
        ;
      var decimal = list.length > 1 ? ".".concat(list[1]) : "";
      str = list[0].replace(/(\d)(?=(?:\d{3})+$)/g, "$1,") + decimal;
    }
    return str;
  };
  var getIncreaseNumber = function getIncreaseNumber2() {
    var isCheckZero = props.isCheckZero, defaultEmptyText = props.defaultEmptyText, hasPostfix = props.hasPostfix, delZero = props.delZero, isRound = props.isRound, needPercentCalc = props.needPercentCalc;
    if (value === "" || value === "--" || value === void 0) {
      return defaultEmptyText;
    }
    if (isCheckZero) {
      if (value === "0") {
        return defaultEmptyText;
      }
    }
    var accurateVal;
    if (!hasPostfix) {
      accurateVal = decimal_exports.formatZeroPrefix(decimal_exports.getSafeDecimal(value).toFixed(_digits, isRound ? decimal_default.ROUND_HALF_UP : decimal_default.ROUND_DOWN), _digits);
      if (delZero) {
        accurateVal = decimal_exports.removeDecimalZero(accurateVal);
      }
      return getformatFixStr(accurateVal, value, "");
    }
    if (needPercentCalc) {
      accurateVal = decimal_exports.formatZeroPrefix(decimal_exports.getSafeDecimal(value).mul(Math.pow(10, 2)).toFixed(_digits, isRound ? decimal_default.ROUND_HALF_UP : decimal_default.ROUND_DOWN), _digits);
      if (delZero) {
        accurateVal = decimal_exports.removeDecimalZero(accurateVal);
      }
      return getformatFixStr(accurateVal, value, "%");
    }
    accurateVal = decimal_exports.formatZeroPrefix(decimal_exports.getSafeDecimal(value).toFixed(_digits, isRound ? decimal_default.ROUND_HALF_UP : decimal_default.ROUND_DOWN), _digits);
    if (delZero) {
      accurateVal = decimal_exports.removeDecimalZero(accurateVal);
    }
    return getformatFixStr(accurateVal);
  };
  if (hasFather) {
    return import_react.default.createElement("span", {
      className: "".concat(increaseClassStrWrap)
    }, import_react.default.createElement("span", {
      className: "increase-wrap ".concat(increaseClassStr)
    }, left && left, getIncreaseNumber(), right && right));
  }
  return import_react.default.createElement("span", {
    className: "increase-wrap ".concat(increaseClassStr)
  }, left && left, getIncreaseNumber(), right && right);
};
IncreaseTag.defaultProps = defaultProps;
var index = (0, import_react.memo)(IncreaseTag);
export {
  index as IncreaseTag
};
//# sourceMappingURL=@nbit_react.js.map
