import { QChatServerRole } from './QChatRoleServiceInterface';
import { MemberInfo, AntispamTag, TQChatSearchOrder } from './QChatServerServiceInterface';
export interface QChatChannelServiceInterface {
    /**
     * 创建频道
     */
    createChannel(options: CreateChannelOptions): Promise<ChannelInfo>;
    /**
     * 删除建频道
     */
    deleteChannel(options: DeleteChannelOptions): Promise<void>;
    /**
     * 更新频道
     */
    updateChannel(options: UpdateChannelOptions): Promise<ChannelInfo>;
    /**
     * 查询频道列表
     */
    getChannels(options: GetChannelsOptions): Promise<ChannelInfo[]>;
    /**
     * 查询频道列表（分页）
     */
    getChannelsByPage(options: GetChannelsByPageOptions): Promise<GetChannelsByPageResult>;
    /**
     * 订阅频道
     *
     * 注：仅当 type 为 5 时返回 undefined，而 type 为 1，2，3 时返回 UnreadInfo[]。
     */
    subscribeChannel(options: SubscribeChannelOptions): Promise<SubscribeChannelResult | void>;
    /**
     * 查询未读信息
     */
    getChannelUnreadInfos(options: GetUnreadInfoOptions): Promise<QChatChannelUnreadInfo[]>;
    /**
     * 获取频道下的成员（分页）
     */
    getMembersByPage(options: GetMembersByPageOptions): Promise<GetMembersByPageResult>;
    /**
     * 更新频道的白/黑名单身份组
     *
     * 1. 针对公开的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 0，那么设置的身份组在此公开频道的黑名单。此身份组用户将无法查到此频道的信息
     *
     * 2. 针对私密的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 1，那么设置的身份组在此私密频道的白名单。此身份组用户将可以查到此频道的信息
     */
    updateWhiteBlackRole(options: UpdateWhiteBlackRoleOptions): Promise<void>;
    /**
     * 更新频道的白/黑名单成员
     *
     * 1. 针对公开的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 0，那么设置的成员在此公开频道的黑名单。此成员将无法查到此频道的信息
     *
     * 2. 针对私密的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 1，那么设置的成员在此私密频道的白名单。此成员将可以查到此频道的信息
     */
    updateWhiteBlackMembers(options: UpdateWhiteBlackMembersOptions): Promise<void>;
    /**
     * 分页查询频道的白/黑名单身份组
     */
    getWhiteBlackRolesPage(options: GetWhiteBlackRolesPageOptions): Promise<GetWhiteBlackRolesPageResult>;
    /**
     * 分页查询频道的白/黑名单成员
     */
    getWhiteBlackMembersPage(options: GetWhiteBlackMembersPageOptions): Promise<GetWhiteBlackMembersPageResult>;
    /**
     * 根据身份组ID查询已存在的白/黑名单身份组
     */
    getExistingWhiteBlackRoles(options: GetExistingWhiteBlackRolesOptions): Promise<GetExistingWhiteBlackRolesResult>;
    /**
     * 根据成员ID查询已存在的白/黑名单的成员
     */
    getExistingWhiteBlackMembers(options: GetExistingWhiteBlackMembersOptions): Promise<GetExistingWhiteBlackMembersResult>;
    /**
     * 修改频道信息中的"频道分组"相关字段
     */
    updateCategoryInfoOfChannel(options: UpdateCategoryInfoOfChannelOptions): Promise<ChannelInfo>;
    /**
     * 创建"频道分组"
     */
    createChannelCategory(options: CreateChannelCategoryOptions): Promise<QChatChannelCategoryInfo>;
    /**
     * 更新"频道分组"
     */
    updateChannelCategory(options: UpdateChannelCategoryOptions): Promise<QChatChannelCategoryInfo>;
    /**
     * 删除"频道分组"
     */
    removeChannelCategory(options: RemoveChannelCategoryOptions): Promise<void>;
    /**
     * 根据分组ID查询"频道分组"
     */
    getChannelCategoriesByID(options: GetChannelCategoriesByIDOptions): Promise<QChatChannelCategoryInfo[]>;
    /**
     * 更新"频道分组"白/黑名单身份组
     */
    updateChannelCategoryWhiteBlackRole(options: UpdateChannelCategoryWhiteBlackRoleOptions): Promise<void>;
    /**
     * 查询"频道分组"白/黑名单身份组列表(分页)
     */
    getChannelCategoryWhiteBlackRolesPage(options: GetChannelCategoryWhiteBlackRolesPageOptions): Promise<GetChannelCategoryWhiteBlackRolesPageResult>;
    /**
     * 更新"频道分组"白/黑名单成员
     */
    updateChannelCategoryWhiteBlackMembers(options: UpdateChannelCategoryWhiteBlackMembersOptions): Promise<void>;
    /**
     * 查询"频道分组"白/黑名单成员列表(分页)
     */
    getChannelCategoryWhiteBlackMembersPage(options: GetChannelCategoryWhiteBlackMembersPageOptions): Promise<GetChannelCategoryWhiteBlackMembersPageResult>;
    /**
     * 根据身份组ID查询"频道分组"白/黑名单身份组列表
     */
    getChannelCategoryWhiteBlackRoles(options: GetChannelCategoryWhiteBlackRolesOptions): Promise<QChatServerRole[]>;
    /**
     * 根据成员ID查询"频道分组"白/黑名单成员列表
     */
    getChannelCategoryWhiteBlackMembers(options: GetChannelCategoryWhiteBlackMembersOptions): Promise<MemberInfo[]>;
    /**
     * 查询"频道分组"列表
     */
    getChannelCategoriesPage(options: GetChannelCategoriesPageOptions): Promise<GetChannelCategoriesPageResult>;
    /**
     * 查询"频道分组"下频道列表
     */
    getChannelCategoryChannelsPage(options: GetChannelCategoryChannelsPageOptions): Promise<GetChannelCategoryChannelsPageResult>;
    /**
     * 检索频道
     */
    getChannelSearchByPage(options: GetChannelSearchByPageOptions): Promise<GetChannelSearchByPageResult>;
    /**
     * 检索频道的成员
     */
    channelMemberSearch(options: QChatChannelMemberSearchOptions): Promise<QChatChannelMemberInfo[]>;
    /**
     * 以游客身份订阅频道
     */
    subscribeAsVisitor(options: NIMEQChatChannelSubscribeAsVisitorOptions): Promise<NIMEQChatChannelSubscribeAsVisitorResult>;
}
export declare type NIMEQChatChannelSubscribeAsVisitorOptions = {
    /**
     * 操作类型 1 为订阅； 2 为取消订阅
     */
    opeType: 1 | 2;
    /**
     * 订阅模式
     *
     * 注: 订阅服务器目前默认且只能固定传 6
     */
    type?: 6;
    /**
     * 欲订阅的频道信息
     */
    channels: {
        /**
         * 服务器id
         */
        serverId: string;
        /**
         * 频道id
         */
        channelId: string;
    }[];
};
export declare type NIMEQChatChannelSubscribeAsVisitorResult = {
    /**
     * 订阅失败频道列表
     */
    failedChannels: {
        /**
         * 服务器id
         */
        serverId: string;
        /**
         * 频道id
         */
        channelId: string;
    }[];
};
export declare type QChatChannelMemberInfo = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 头像
     */
    avatar: string;
    /**
     * 账号 数组 , 最多100个
     */
    accid: string;
    /**
     * 昵称
     */
    nick: string;
    /**
     * 创建时间
     */
    createTime: string;
    /**
     * 修改时间
     */
    updateTime: string;
};
export declare type QChatChannelMemberSearchOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 关键字
     */
    keyword: string;
    /**
     * 查询数量，默认和最大都是 100 条
     */
    limit?: number;
};
export declare enum QChatEChannelSortType {
    reorderWeight = 0,
    createTime = 1
}
export declare type TSortType = keyof typeof QChatEChannelSortType;
export declare type UpdateCategoryInfoOfChannelOptions = {
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 频道类别id，传0从频道分组中移除频道
     */
    categoryId?: string;
    /**
     * 同步模式：0-不与类别同步模式(默认)，1-与类别同步模式
     */
    syncMode?: number;
};
export declare type GetChannelCategoryWhiteBlackMembersPageOptions = {
    /**
     * 分组ID
     */
    categoryId: string;
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 分页条件-上一次查询的时间戳，0等同于表示当前时间。
     */
    timetag: number;
    /**
     * 分页页码，默认 100 条
     */
    limit?: number;
};
export declare type GetChannelCategoryWhiteBlackMembersPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: MemberInfo[];
};
export declare type UpdateChannelCategoryWhiteBlackMembersOptions = {
    /**
     * 分组ID
     */
    categoryId: string;
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 操作类型。新增传 "add", 移除传 "remove"
     */
    opeType: keyof typeof EWhiteBlackOpeType;
    /**
     * 成员的 account ID，一次最多传入 100 个
     */
    toAccids: string[];
};
export declare type GetChannelCategoryChannelsPageOptions = {
    /**
     * 分组ID
     */
    categoryId: string;
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 分页条件-上一次查询的时间戳。默认0，0等同于表示当前时间。
     */
    timetag: number;
    /**
     * 分页页码，默认 100 条
     */
    limit?: number;
};
export declare type GetChannelCategoryChannelsPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: ChannelInfo[];
};
export declare type GetChannelSearchByPageOptions = {
    /**
     * 关键字
     */
    keyword: string;
    /**
     * 查询时间范围的开始时间
     */
    startTime?: number;
    /**
     * 查询时间范围的结束时间，要求比开始时间大
     */
    endTime?: number;
    /**
     * 排序规则：ASC-升序 ,DESC-倒序 默认DESC
     */
    order?: TQChatSearchOrder;
    /**
     * 返回结果的记录数，最大和默认都是100
     */
    limit?: number;
    /**
     * 不填时查询所有服务器，填写时查询指定服务器
     */
    serverId?: string;
    /**
     * 排序条件 reorderWeight-自定义权重排序、createTime-创建时间（默认）
     */
    sort?: TSortType;
    /**
     * 排序条件 查询游标，查询的起始位置，上一次查询结果中的listQueryTag字段会返回cursor字段。
     */
    cursor?: string;
};
export declare type GetChannelSearchByPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
        /**
         * 查询游标，下次查询的起始位置
         */
        cursor: string;
    };
    datas: ChannelInfo[];
};
export declare type GetChannelCategoriesPageOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 创建时间 必填 按照创建时间逆序，0等同于表示当前时间。
     */
    timetag: number;
    /**
     * 分页页码，默认 100 条
     */
    limit?: number;
};
export declare type GetChannelCategoriesPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: QChatChannelCategoryInfo[];
};
export declare type GetChannelCategoryWhiteBlackMembersOptions = {
    /**
     * 分组ID
     */
    categoryId: string;
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 账号列表 , 最多100个
     */
    accids: string[];
};
export declare type GetChannelCategoryWhiteBlackMembersResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: MemberInfo[];
};
export declare type GetChannelCategoryWhiteBlackRolesOptions = {
    /**
     * 分组ID
     */
    categoryId: string;
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 身份组ID列表，最多100个
     */
    roleIds: string[];
};
export declare type GetChannelCategoryWhiteBlackRolesResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: QChatServerRole[];
};
export declare type GetChannelCategoryWhiteBlackRolesPageOptions = {
    /**
     * 分组ID
     */
    categoryId: string;
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 分页条件-上一次查询的时间戳，0等同于表示当前时间。
     */
    timetag: number;
    /**
     * 分页页码，默认 100 条
     */
    limit?: number;
};
export declare type GetChannelCategoryWhiteBlackRolesPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: QChatServerRole[];
};
export declare type UpdateChannelCategoryWhiteBlackRoleOptions = {
    /**
     * 分组ID
     */
    categoryId: string;
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link QChatChannelCategoryInfo.viewMode | QChatChannelCategoryInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 操作类型。新增传 "add", 移除传 "remove"
     */
    opeType: keyof typeof EWhiteBlackOpeType;
    /**
     * 身份组 ID
     */
    roleId: string;
};
export declare type GetChannelCategoriesByIDOptions = {
    /**
     * 分组ID 列表
     */
    categoryIds: string[];
};
export declare type RemoveChannelCategoryOptions = {
    /**
     * 分组ID
     */
    categoryId: string;
};
export declare type UpdateChannelCategoryOptions = {
    /**
     * 分组ID
     */
    categoryId: string;
    /**
     * 分组名称
     */
    name?: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 查看模式：0-公开模式(默认)，1-私密模式
     */
    viewMode?: number;
};
export declare type CreateChannelCategoryOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 分组名称
     */
    name?: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 查看模式：0-公开模式(默认)，1-私密模式
     */
    viewMode?: number;
};
export declare type QChatChannelCategoryInfo = {
    /**
     * 分组ID
     */
    categoryId: string;
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 所有者
     */
    owner: string;
    /**
     * 查看模式：0-公开模式，1-私密模式
     */
    viewMode: number;
    /**
     * 有效标志：false-无效，true-有效
     */
    validFlag: boolean;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
    /**
     * 频道数量
     */
    channelNumber: number;
};
export declare type GetMembersByPageOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 分页条件-上一次查询的时间戳。默认0，0等同于表示当前时间。
     */
    timetag?: number;
    /**
     * 分页数量，默认 100 条
     */
    limit?: number;
};
export declare type GetMembersByPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: MemberInfo[];
};
export declare enum EWhiteBlackType {
    white = 1,
    black = 2
}
export declare enum EWhiteBlackOpeType {
    add = 1,
    remove = 2
}
export declare type UpdateWhiteBlackRoleOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 身份组 ID
     */
    roleId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 操作类型。新增传 "add", 移除传 "remove"
     */
    opeType: keyof typeof EWhiteBlackOpeType;
};
export declare type UpdateWhiteBlackMembersOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 成员的 account ID，一次最多传入 100 个
     */
    toAccids: string[];
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 操作类型。新增传 "add", 移除传 "remove"
     */
    opeType: keyof typeof EWhiteBlackOpeType;
};
export declare type GetWhiteBlackRolesPageOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 分页条件-上一次查询的时间戳。默认0，0等同于表示当前时间。
     */
    timetag?: number;
    /**
     * 分页页码，默认 100 条
     */
    limit?: number;
};
export declare type GetWhiteBlackRolesPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: QChatServerRole[];
};
export declare type GetWhiteBlackMembersPageOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 分页条件-上一次查询的时间戳。默认0，0等同于表示当前时间。
     */
    timetag?: number;
    /**
     * 分页页码，默认 100 条
     */
    limit?: number;
};
export declare type GetExistingWhiteBlackRolesOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 身份组 id 数组 , 最多100个
     */
    roleIds: string[];
};
export declare type GetExistingWhiteBlackRolesResult = {
    /**
     * 服务器身份组
     */
    datas: QChatServerRole[];
};
export declare type GetExistingWhiteBlackMembersOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 频道 ID
     */
    channelId: string;
    /**
     * 类型
     *
     * 1. 针对公开的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 0，接口只允许设置黑名单，type 传 "black"
     *
     * 2. 针对私密的频道 {@link ChannelInfo.viewMode | ChannelInfo.viewMode} 为 1，接口只允许设置白名单，type 传 "white"
     */
    type: keyof typeof EWhiteBlackType;
    /**
     * 账号 数组 , 最多100个
     */
    accids: string[];
};
export declare type GetExistingWhiteBlackMembersResult = {
    /**
     * 成员数组
     */
    datas: MemberInfo[];
};
export declare type GetWhiteBlackMembersPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: MemberInfo[];
};
export declare type CreateChannelOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 类型：message-消息频道,ext-自定义频道
     */
    type: TChannelInfoType;
    /**
     * 名称
     */
    name?: string;
    /**
     * 主题
     */
    topic?: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 查看模式：0-公开模式(默认)，1-私密模式
     */
    viewMode?: number;
    /**
     * 反垃圾相关字段
     */
    antispamTag?: AntispamTag;
    /**
     * 频道类别id
     */
    categoryId?: string;
    /**
     * 同步模式：0-不与类别同步模式(默认)，1-与类别同步模式
     */
    syncMode?: number;
    /**
     * 游客可见性模式
     *
     * 注: 0 代表对游客可见, 1 代表对游客不可见, 2-跟随模式(默认)
     *
     * 跟随模式: 当频道公开时(viewMode 为 0)对游客可见, 频道私密时(viewMode 为 1)对游客不可见.
     */
    visitorMode?: number;
};
export declare type DeleteChannelOptions = {
    /**
     * 频道id
     */
    channelId: string;
};
export declare type UpdateChannelOptions = {
    /**
     * 频道ID
     */
    channelId: string;
    /**
     * 服务器ID
     */
    serverId?: string;
    /**
     * 名称
     */
    name?: string;
    /**
     * 类型：message-消息频道,ext-自定义频道
     */
    type?: TChannelInfoType;
    /**
     * 应用id
     */
    /**
     * 主题
     */
    topic?: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 查看模式：0-公开模式(默认)，1-私密模式
     */
    viewMode?: number;
    /**
     * 反垃圾相关字段
     */
    antispamTag?: AntispamTag;
    /**
     * 游客可见性模式
     *
     * 注: 0 代表对游客可见, 1 代表对游客不可见, 2-跟随模式(默认)
     *
     * 跟随模式: 当频道公开时(viewMode 为 0)对游客可见, 频道私密时(viewMode 为 1)对游客不可见.
     */
    visitorMode?: number;
};
export declare type GetChannelsOptions = {
    /**
     * 频道id
     */
    channelIds: string[];
};
export declare enum EChannelInfoType {
    message = 0,
    media = 1,
    ext = 100
}
export declare type TChannelInfoType = keyof typeof EChannelInfoType;
export declare type ChannelInfo = {
    /**
     * 频道id
     */
    channelId: string;
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 应用id
     */
    /**
     * 名称
     */
    name: string;
    /**
     * 主题
     */
    topic: string;
    /**
     * 自定义扩展
     */
    ext: string;
    /**
     * 类型：message-消息频道,ext-自定义频道,media-音视频频道
     */
    type: TChannelInfoType;
    /**
     * 有效标志：0-无效，1-有效
     */
    validFlag: 0 | 1;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
    /**
     * 所有者
     */
    owner: string;
    /**
     * 查看模式：0-公开模式(默认)，1-私密模式
     */
    viewMode: number;
    /**
     * 游客可见性模式
     *
     * 注: 0 代表对游客可见, 1 代表对游客不可见, 2-跟随模式(默认)
     *
     * 跟随模式: 当频道公开时(viewMode 为 0)对游客可见, 频道私密时(viewMode 为 1)对游客不可见.
     */
    visitorMode?: number;
    /**
     * 频道类别id
     */
    categoryId: string;
    /**
     * 同步模式：0-不与类别同步模式(默认)1-与类别同步模式
     */
    syncMode: number;
    /**
     * 自定义排序权重值
     */
    reorderWeight: string;
};
export declare type GetChannelsByPageOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 时间戳 传0取当前时间
     */
    timetag: number;
    /**
     * 条数
     */
    limit: number;
};
export declare type GetChannelsByPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: ChannelInfo[];
};
export declare type SubscribeChannelOptions = {
    /**
     * 订阅类型 :
     *
     * 1.订阅某个channel的【消息】/【通知】
     *
     * 2.订阅某个channel的【消息未读数】/【通知】
     *
     * 3.订阅某个channel的【消息未读状态】/【通知】
     *
     * 5.订阅某个频道的消息正在输入的系统通知
     */
    type: number;
    /**
     * 操作类型 1 为订阅； 2 为取消订阅
     */
    opeType: 1 | 2;
    channels: {
        /**
         * 服务器id
         */
        serverId: string;
        /**
         * 频道id
         */
        channelId: string;
    }[];
};
export declare type SubscribeChannelResult = {
    /**
     * 订阅成功频道的未读数详情
     */
    unreadInfos: QChatChannelUnreadInfo[];
    /**
     * 订阅失败频道列表
     */
    failedChannels: {
        /**
         * 服务器id
         */
        serverId: string;
        /**
         * 频道id
         */
        channelId: string;
    }[];
};
export declare type QChatChannelUnreadInfo = {
    /**
     * 服务器id
     */
    serverId: string;
    /**
     * 频道id
     */
    channelId: string;
    /**
     * 未读数
     */
    unreadCount: number;
    /**
     * 艾特消息未读数
     */
    mentionedCount: number;
    /**
     * 已读时间戳
     */
    ackTimestamp?: number;
    /**
     * 最大未读数
     */
    maxCount?: number;
    /**
     * 最后一条消息的时间戳
     */
    lastMsgTime?: number;
};
export declare type QChatServerUnreadInfo = {
    /**
     * 服务器id
     */
    serverId: string;
    /**
     * 未读数
     */
    unreadCount: number;
    /**
     * 艾特消息未读数
     */
    mentionedCount: number;
    /**
     * 最大未读数
     */
    maxCount?: number;
};
export declare type GetUnreadInfoOptions = {
    channels: {
        /**
         * 服务器id
         */
        serverId: string;
        /**
         * 频道id
         */
        channelId: string;
    }[];
};
