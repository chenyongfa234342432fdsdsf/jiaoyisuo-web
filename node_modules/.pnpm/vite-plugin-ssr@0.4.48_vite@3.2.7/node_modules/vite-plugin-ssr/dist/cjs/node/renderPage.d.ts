/// <reference types="node" />
import { RouteMatches } from '../shared/route';
import { PageFile, ExportsAll } from '../shared/getPageFiles';
import { PromiseType } from './utils';
import type { PageAsset } from './html/injectAssets';
import { StreamPipeNode, StreamPipeWeb, StreamReadableNode, StreamReadableWeb, StreamWritableNode, StreamWritableWeb } from './html/stream';
import { PageContextUrls } from '../shared/addComputedUrlProps';
import { GlobalContext } from './globalContext';
import type { ViteDevServer } from 'vite';
import { ViteManifest } from './viteManifest';
export { renderPage };
export { prerenderPage };
export { renderStatic404Page };
export { loadPageFilesServer };
declare type GlobalRenderingContext = GlobalContext & {
    _allPageIds: string[];
    _pageFilesAll: PageFile[];
};
declare function renderPage<PageContextAdded extends {}, PageContextInit extends {
    /** @deprecated */
    url?: string;
    /** The URL of the HTTP request */
    urlOriginal?: string;
}>(pageContextInit: PageContextInit): Promise<PageContextInit & {
    errorWhileRendering: null | unknown;
} & (({
    httpResponse: HttpResponse;
} & PageContextAdded) | ({
    httpResponse: null;
} & Partial<PageContextAdded>))>;
declare type StatusCode = 200 | 404 | 500;
declare type ContentType = 'application/json' | 'text/html;charset=utf-8';
declare type HttpResponse = {
    statusCode: StatusCode;
    contentType: ContentType;
    body: string;
    getBody: () => Promise<string>;
    getReadableWebStream: () => StreamReadableWeb;
    pipe: (writable: StreamWritableWeb | StreamWritableNode) => void;
    /** @deprecated */
    getNodeStream: () => Promise<StreamReadableNode>;
    /** @deprecated */
    getWebStream: () => StreamReadableWeb;
    /** @deprecated */
    pipeToNodeWritable: StreamPipeNode;
    /** @deprecated */
    pipeToWebWritable: StreamPipeWeb;
};
declare function prerenderPage(pageContext: {
    urlOriginal: string;
    routeParams: Record<string, string>;
    _isPreRendering: true;
    _pageId: string;
    _usesClientRouter: boolean;
    _pageContextAlreadyProvidedByPrerenderHook?: true;
    is404: null | boolean;
} & PageFiles & GlobalRenderingContext): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
    pageContext: (({
        urlOriginal: string;
        routeParams: Record<string, string>;
        _isPreRendering: true;
        _pageId: string;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByPrerenderHook?: true | undefined;
        is404: null | boolean;
    } & {
        exports: Record<string, unknown>;
        exportsAll: ExportsAll;
        pageExports: Record<string, unknown>;
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        _getPageAssets: () => Promise<PageAsset[]>;
    } & GlobalRenderingContext) & {
        _isPageContextRequest: boolean;
        _urlProcessor: null;
    }) & PageContextUrls;
} | {
    documentHtml: string;
    pageContextSerialized: string;
    pageContext: (({
        urlOriginal: string;
        routeParams: Record<string, string>;
        _isPreRendering: true;
        _pageId: string;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByPrerenderHook?: true | undefined;
        is404: null | boolean;
    } & {
        exports: Record<string, unknown>;
        exportsAll: ExportsAll;
        pageExports: Record<string, unknown>;
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        _getPageAssets: () => Promise<PageAsset[]>;
    } & GlobalRenderingContext) & {
        _isPageContextRequest: boolean;
        _urlProcessor: null;
    }) & PageContextUrls;
}>;
declare function renderStatic404Page(globalContext: GlobalRenderingContext & {
    _isPreRendering: true;
}): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
    pageContext: (({
        urlOriginal: string;
        routeParams: Record<string, string>;
        _isPreRendering: true;
        _pageId: string;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByPrerenderHook?: true | undefined;
        is404: boolean | null;
    } & {
        exports: Record<string, unknown>;
        exportsAll: ExportsAll;
        pageExports: Record<string, unknown>;
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        _getPageAssets: () => Promise<PageAsset[]>;
    } & GlobalRenderingContext) & {
        _isPageContextRequest: boolean;
        _urlProcessor: null;
    }) & PageContextUrls;
} | {
    documentHtml: string;
    pageContextSerialized: string;
    pageContext: (({
        urlOriginal: string;
        routeParams: Record<string, string>;
        _isPreRendering: true;
        _pageId: string;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByPrerenderHook?: true | undefined;
        is404: boolean | null;
    } & {
        exports: Record<string, unknown>;
        exportsAll: ExportsAll;
        pageExports: Record<string, unknown>;
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        _getPageAssets: () => Promise<PageAsset[]>;
    } & GlobalRenderingContext) & {
        _isPageContextRequest: boolean;
        _urlProcessor: null;
    }) & PageContextUrls;
} | null>;
declare type PageContext_loadPageFilesServer = {
    urlOriginal: string;
    _baseUrl: string;
    _baseAssets: string | null;
    _pageFilesAll: PageFile[];
    _isPreRendering: boolean;
    _isProduction: boolean;
    _viteDevServer: null | ViteDevServer;
    _manifestClient: null | ViteManifest;
    _includeAssetsImportedByServer: boolean;
} & PageContextDebug;
declare type PageFiles = PromiseType<ReturnType<typeof loadPageFilesServer>>;
declare function loadPageFilesServer(pageContext: {
    _pageId: string;
} & PageContext_loadPageFilesServer): Promise<{
    exports: Record<string, unknown>;
    exportsAll: ExportsAll;
    pageExports: Record<string, unknown>;
    Page: unknown;
    _isHtmlOnly: boolean;
    _passToClient: string[];
    _pageFilePathsLoaded: string[];
} & {
    _getPageAssets: () => Promise<PageAsset[]>;
}>;
declare type PageContextDebug = {
    _routeMatches: 'ROUTE_ERROR' | RouteMatches;
};
