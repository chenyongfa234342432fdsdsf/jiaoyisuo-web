"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertConfigVpsUser = exports.assertConfigVpsResolved = void 0;
const utils_1 = require("../../../utils");
function assertConfigVpsUser(vitePluginSsr, userInputFormat) {
    (0, utils_1.assert)((0, utils_1.isObject)(vitePluginSsr));
    assertConfig('disableAutoFullBuild', 'should be a boolean', (0, utils_1.hasProp)(vitePluginSsr, 'disableAutoFullBuild', 'boolean') ||
        (0, utils_1.hasProp)(vitePluginSsr, 'disableAutoFullBuild', 'undefined'));
    assertPageFilesConfig(vitePluginSsr);
    assertPrerenderConfig(vitePluginSsr);
    assertConfig('includeCSS', 'should be an array of strings', (0, utils_1.hasProp)(vitePluginSsr, 'includeCSS', 'string[]') || (0, utils_1.hasProp)(vitePluginSsr, 'includeCSS', 'undefined'));
    assertConfig('includeAssetsImportedByServer', 'should be a boolean', (0, utils_1.hasProp)(vitePluginSsr, 'includeAssetsImportedByServer', 'boolean') ||
        (0, utils_1.hasProp)(vitePluginSsr, 'includeAssetsImportedByServer', 'undefined'));
    return;
    function assertPrerenderConfig(vitePluginSsr) {
        assertConfig('prerender', 'should be an object or a boolean', (0, utils_1.hasProp)(vitePluginSsr, 'prerender', 'object') ||
            (0, utils_1.hasProp)(vitePluginSsr, 'prerender', 'boolean') ||
            (0, utils_1.hasProp)(vitePluginSsr, 'prerender', 'undefined'));
        const prerender = vitePluginSsr.prerender ?? {};
        if (prerender && typeof prerender !== 'boolean') {
            assertConfig('prerender.partial', 'should be a boolean', (0, utils_1.hasProp)(prerender, 'partial', 'undefined') || (0, utils_1.hasProp)(prerender, 'partial', 'boolean'));
            assertConfig('prerender.noExtraDir', 'should be a boolean', (0, utils_1.hasProp)(prerender, 'noExtraDir', 'undefined') || (0, utils_1.hasProp)(prerender, 'noExtraDir', 'boolean'));
            assertConfig('prerender.parallel', 'should be a boolean or a number', (0, utils_1.hasProp)(prerender, 'parallel', 'undefined') ||
                (0, utils_1.hasProp)(prerender, 'parallel', 'boolean') ||
                (0, utils_1.hasProp)(prerender, 'parallel', 'number'));
            assertConfig('prerender.disableAutoRun', 'should be a boolean', (0, utils_1.hasProp)(prerender, 'disableAutoRun', 'undefined') || (0, utils_1.hasProp)(prerender, 'disableAutoRun', 'boolean'));
        }
    }
    function assertPageFilesConfig(vitePluginSsr) {
        assertConfig('pageFiles', 'should be an object', (0, utils_1.hasProp)(vitePluginSsr, 'pageFiles', 'undefined') || (0, utils_1.hasProp)(vitePluginSsr, 'pageFiles', 'object'));
        if (!vitePluginSsr.pageFiles) {
            return;
        }
        if (vitePluginSsr.pageFiles?.include !== undefined) {
            assertConfig('pageFiles.include', 'should be a string array', (0, utils_1.hasProp)(vitePluginSsr.pageFiles, 'include', 'string[]'));
        }
    }
    function assertConfig(configPath, errMsg, condition) {
        if (!userInputFormat) {
            (0, utils_1.assert)(condition);
        }
        else {
            const p = configPath.split('.');
            (0, utils_1.assert)(p.length <= 2);
            const configPathInObject = p.length === 2 ? `${p[0]}: { ${p[1]} }` : configPath;
            const configProp = p[p.length - 1];
            (0, utils_1.assert)(configProp);
            (0, utils_1.assertUsage)(condition, `${userInputFormat({ configPath, configPathInObject, configProp })} ${errMsg}.`);
        }
    }
}
exports.assertConfigVpsUser = assertConfigVpsUser;
function assertConfigVpsResolved(config) {
    (0, utils_1.assert)((0, utils_1.hasProp)(config, 'vitePluginSsr', 'object'));
    const { vitePluginSsr } = config;
    // Internal assertion
    assertConfigVpsUser(vitePluginSsr, null);
}
exports.assertConfigVpsResolved = assertConfigVpsResolved;
