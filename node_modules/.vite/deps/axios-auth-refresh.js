import {
  require_axios
} from "./chunk-2U2MIU66.js";
import {
  __commonJS
} from "./chunk-S5KM4IGW.js";

// node_modules/.pnpm/axios-auth-refresh@3.3.4_axios@0.21.3/node_modules/axios-auth-refresh/dist/index.min.js
var require_index_min = __commonJS({
  "node_modules/.pnpm/axios-auth-refresh@3.3.4_axios@0.21.3/node_modules/axios-auth-refresh/dist/index.min.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t(require_axios()) : "function" == typeof define && define.amd ? define(["axios"], t) : "object" == typeof exports ? exports["axios-auth-refresh"] = t(require_axios()) : e["axios-auth-refresh"] = t(e.axios);
    }(exports, function(e) {
      return function() {
        "use strict";
        var t = { 593: function(e2, t2, r2) {
          Object.defineProperty(t2, "__esModule", { value: true }), t2.resendFailedRequest = t2.getRetryInstance = t2.unsetCache = t2.createRequestQueueInterceptor = t2.createRefreshCall = t2.shouldInterceptError = t2.mergeOptions = t2.defaultOptions = void 0;
          const s2 = r2(300);
          t2.defaultOptions = { statusCodes: [401], pauseInstanceWhileRefreshing: false }, t2.mergeOptions = function(e3, t3) {
            return Object.assign(Object.assign(Object.assign({}, e3), { pauseInstanceWhileRefreshing: t3.skipWhileRefreshing }), t3);
          }, t2.shouldInterceptError = function(e3, t3, r3, s3) {
            var n2, o;
            return !!e3 && (!(null === (n2 = e3.config) || void 0 === n2 ? void 0 : n2.skipAuthRefresh) && (!!(t3.interceptNetworkError && !e3.response && 0 === e3.request.status || e3.response && ((null == t3 ? void 0 : t3.shouldRefresh) ? t3.shouldRefresh(e3) : null === (o = t3.statusCodes) || void 0 === o ? void 0 : o.includes(parseInt(e3.response.status)))) && (e3.response || (e3.response = { config: e3.config }), !t3.pauseInstanceWhileRefreshing || !s3.skipInstances.includes(r3))));
          }, t2.createRefreshCall = function(e3, t3, r3) {
            return r3.refreshCall || (r3.refreshCall = t3(e3), "function" == typeof r3.refreshCall.then) ? r3.refreshCall : (console.warn("axios-auth-refresh requires `refreshTokenCall` to return a promise."), Promise.reject());
          }, t2.createRequestQueueInterceptor = function(e3, t3, r3) {
            return void 0 === t3.requestQueueInterceptorId && (t3.requestQueueInterceptorId = e3.interceptors.request.use((e4) => (null == e4 ? void 0 : e4.skipAuthRefresh) ? e4 : t3.refreshCall.catch(() => {
              throw new s2.default.Cancel("Request call failed");
            }).then(() => r3.onRetry ? r3.onRetry(e4) : e4))), t3.requestQueueInterceptorId;
          }, t2.unsetCache = function(e3, t3) {
            e3.interceptors.request.eject(t3.requestQueueInterceptorId), t3.requestQueueInterceptorId = void 0, t3.refreshCall = void 0, t3.skipInstances = t3.skipInstances.filter((t4) => t4 !== e3);
          }, t2.getRetryInstance = function(e3, t3) {
            return t3.retryInstance || e3;
          }, t2.resendFailedRequest = function(e3, t3) {
            return e3.config.skipAuthRefresh = true, t3(e3.response.config);
          };
        }, 300: function(t2) {
          t2.exports = e;
        } }, r = {};
        function s(e2) {
          var n2 = r[e2];
          if (void 0 !== n2)
            return n2.exports;
          var o = r[e2] = { exports: {} };
          return t[e2](o, o.exports, s), o.exports;
        }
        var n = {};
        return function() {
          var e2 = n;
          Object.defineProperty(e2, "__esModule", { value: true });
          const t2 = s(593);
          e2.default = function(e3, r2, s2 = {}) {
            if ("function" != typeof r2)
              throw new Error("axios-auth-refresh requires `refreshAuthCall` to be a function that returns a promise.");
            const n2 = { skipInstances: [], refreshCall: void 0, requestQueueInterceptorId: void 0 };
            return e3.interceptors.response.use((e4) => e4, (o) => {
              if (s2 = (0, t2.mergeOptions)(t2.defaultOptions, s2), !(0, t2.shouldInterceptError)(o, s2, e3, n2))
                return Promise.reject(o);
              s2.pauseInstanceWhileRefreshing && n2.skipInstances.push(e3);
              const u = (0, t2.createRefreshCall)(o, r2, n2);
              return (0, t2.createRequestQueueInterceptor)(e3, n2, s2), u.finally(() => (0, t2.unsetCache)(e3, n2)).catch((e4) => Promise.reject(e4)).then(() => (0, t2.resendFailedRequest)(o, (0, t2.getRetryInstance)(e3, s2)));
            });
          };
        }(), n;
      }();
    });
  }
});
export default require_index_min();
//# sourceMappingURL=axios-auth-refresh.js.map
