"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getManifestEntry = void 0;
const utils_1 = require("./utils");
function getManifestEntry(id, clientManifest) {
    (0, utils_1.assertPosixPath)(id);
    (0, utils_1.assert)(!id.startsWith('/@fs'), { id });
    (0, utils_1.assert)(id.startsWith('@@vite-plugin-ssr/') || id.startsWith('/'), { id });
    if (id.startsWith('@@vite-plugin-ssr/')) {
        const manifestKeyEnd = (0, utils_1.slice)(id, '@@vite-plugin-ssr'.length, 0);
        const { manifestKey, manifestEntry } = findEntryWithKeyEnd(manifestKeyEnd, clientManifest, id);
        (0, utils_1.assert)(manifestEntry && manifestKey, { id });
        return { manifestEntry, manifestKey };
    }
    {
        (0, utils_1.assert)(id.startsWith('/'));
        const manifestKey = id.slice(1);
        let manifestEntry = clientManifest[manifestKey];
        if (manifestEntry) {
            return { manifestEntry, manifestKey };
        }
    }
    if (id.startsWith('/node_modules')) {
        let manifestKeyEnd = id.slice('/node_modules'.length);
        (0, utils_1.assert)(manifestKeyEnd.startsWith('/'));
        {
            const { manifestEntry, manifestKey } = findEntryWithKeyEnd(manifestKeyEnd, clientManifest, id);
            if (manifestEntry) {
                (0, utils_1.assert)(manifestKey);
                return { manifestEntry, manifestKey };
            }
        }
        {
            (0, utils_1.assert)(manifestKeyEnd.startsWith('/'));
            const dirS = manifestKeyEnd.split('/');
            (0, utils_1.assert)(dirS[0] === '');
            manifestKeyEnd = '/' + dirS.slice(2).join('/');
            (0, utils_1.assert)(manifestKeyEnd.startsWith('/'), { id });
        }
        {
            const { manifestEntry, manifestKey } = findEntryWithKeyEnd(manifestKeyEnd, clientManifest, id);
            if (manifestEntry) {
                (0, utils_1.assert)(manifestKey);
                return { manifestEntry, manifestKey };
            }
        }
    }
    return null;
}
exports.getManifestEntry = getManifestEntry;
function findEntryWithKeyEnd(manifestKeyEnd, clientManifest, id) {
    (0, utils_1.assert)(manifestKeyEnd.startsWith('/'));
    const manifestKeys = [];
    for (const manifestKey in clientManifest) {
        if (manifestKey.endsWith(manifestKeyEnd)) {
            manifestKeys.push(manifestKey);
        }
    }
    const manifestKeysRelative = manifestKeys.filter((k) => k.startsWith('../'));
    (0, utils_1.assert)(manifestKeysRelative.length <= 1, { id });
    const manifestKey = manifestKeysRelative[0] ?? manifestKeys[0] ?? null;
    if (!manifestKey) {
        return { manifestEntry: null, manifestKey: null };
    }
    const manifestEntry = clientManifest[manifestKey];
    return { manifestEntry, manifestKey };
}
