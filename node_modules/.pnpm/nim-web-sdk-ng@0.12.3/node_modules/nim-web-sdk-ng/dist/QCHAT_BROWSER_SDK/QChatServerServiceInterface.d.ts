import { QChatChannelUnreadInfo } from './QChatChannelServiceInterface';
export interface QChatServerServiceInterface {
    /**
     * 创建服务器，返回服务器ID
     */
    createServer(options: CreateServerOptions): Promise<ServerInfo>;
    /**
     * 删除服务器
     */
    deleteServer(options: DeleteServerOptions): Promise<void>;
    /**
     * 更新服务器
     */
    updateServer(options: UpdateServerOptions): Promise<ServerInfo>;
    /**
     * 查询服务器列表
     */
    getServers(options: GetServersOptions): Promise<ServerInfo[]>;
    /**
     * 查询服务器列表（分页）
     */
    getServersByPage(options: GetServersByPageOptions): Promise<GetServersByPageResult>;
    /**
     * 邀请用户进入服务器
     */
    inviteServerMembers(options: InviteServerMembersOptions): Promise<InviteServerMembersResult>;
    /**
     * 接受邀请
     */
    acceptServerInvite(options: AcceptServerInviteOptions): Promise<void>;
    /**
     * 拒绝邀请
     */
    rejectInviteServer(options: RejectServerInviteOptions): Promise<void>;
    /**
     * 申请加入服务器
     */
    applyServerJoin(options: ApplyServerJoinOptions): Promise<QChatServerApplyRecordInfo>;
    /**
     * 同意加入服务器申请
     */
    acceptServerApply(options: AcceptServerApplyOptions): Promise<void>;
    /**
     * 拒绝加入服务器申请
     */
    rejectServerApply(options: RejectServerApplyOptions): Promise<void>;
    /**
     * 踢除服务器成员
     */
    kickServerMembers(options: KickServerMembersOptions): Promise<void>;
    /**
     * 主动离开服务器
     */
    leaveServer(options: LeaveServerOptions): Promise<void>;
    /**
     * 订阅服务器
     */
    subscribeServer(options: SubscribeServerOptions): Promise<SubscribeServerResult | void>;
    /**
     * 修改他人服务器成员信息
     */
    updateServerMemberInfo(options: UpdateServerMemberInfoOptions): Promise<MemberInfo>;
    /**
     * 修改自己服务器成员信息
     */
    updateMyMemberInfo(options: UpdateMyMemberInfoOptions): Promise<MemberInfo>;
    /**
     * 查询服务器成员列表
     * 参数为 serverId | accid 列表，格式 serverId | accid
     */
    getServerMembers(options: GetServerMembersOptions): Promise<MemberInfo[]>;
    /**
     * 查询服务器成员列表（分页）
     */
    getServerMembersByPage(options: GetServerMembersByPageOptions): Promise<GetServerMembersByPageResult>;
    /**
     * 封禁服务器成员
     */
    banServerMember(options: BanServerMemberOptions): Promise<void>;
    /**
     * 解封服务器成员
     */
    unbanServerMember(options: UnbanServerMemberOptions): Promise<void>;
    /**
     * 分页获取封禁成员
     */
    getBannedMembersByPage(options: GetBannedMembersByPageOptions): Promise<GetBannedMembersByPageResult>;
    /**
     * 检索服务器（广场/个人）
     */
    serverSearchByPage(options: ServerSearchByPageOptions): Promise<ServerSearchByPageResult>;
    /**
     * 搜索服务器成员
     */
    serverMemberSearchByPage(options: ServerMemberSearchByPageOptions): Promise<MemberInfo[]>;
    /**
     * 生成一个邀请码
     */
    generateInviteCode(options: QChatServerGenerateInviteCodeOptions): Promise<QChatServerInviteCode>;
    /**
     * 根据邀请码加入服务器
     */
    joinByInviteCode(options: QChatServerJoinByInviteCodeOptions): Promise<void>;
    /**
     * 查询某服务器下的申请和邀请进入的历史记录
     */
    getInviteApplyRecordOfServer(options: QChatServerGetInviteApplyRecordOfServerOptions): Promise<QChatServerInviteApplyRecord[]>;
    /**
     * 查询我的申请和邀请进入的历史记录
     */
    getInviteApplyRecordOfSelf(options: QChatServerGetInviteApplyRecordOfSelfOptions): Promise<QChatServerInviteApplyRecord[]>;
    /**
     * 清空服务器未读数
     *
     * 注: 会清空该服务器下所有的频道的未读数
     */
    markRead(options: QChatServerMarkReadOptions): Promise<QChatServerMarkReadResult>;
    /**
     * 订阅服务器下的所有频道
     */
    subscribeAllChannel(options: SubscribeAllChannelOptions): Promise<SubscribeAllChannelResult>;
    /**
     * 以游客身份加入服务器
     *
     * 注: 目前 IM 服务端限定最多加 10 个
     *
     * @param options serverIds: 服务器 ID 列表
     * @returns failedServers: 失败的 id 列表
     */
    enterAsVisitor(options: {
        serverIds: string[];
    }): Promise<{
        failedServers: string[];
    }>;
    /**
     * 以游客身份离开服务器
     *
     * @param options serverIds: 服务器 ID 列表
     * @returns failedServers: 失败的 id 列表
     */
    leaveAsVisitor(options: {
        serverIds: string[];
    }): Promise<{
        failedServers: string[];
    }>;
    /**
     * 以游客身份订阅服务器
     */
    subscribeAsVisitor(options: NIMEQChatServerSubscribeAsVisitorOptions): Promise<{
        failedServers: string[];
    }>;
}
export declare type NIMEQChatServerSubscribeAsVisitorOptions = {
    /**
     * 操作类型. 1 订阅; 2 取消订阅
     */
    opeType: 1 | 2;
    /**
     * 订阅模式
     *
     * 注: 订阅服务器目前默认且只能固定传 7
     */
    type?: 7;
    /**
     * 要订阅的服务器信息
     */
    serverIds: string[];
};
export declare type SubscribeAllChannelOptions = {
    /**
     * 订阅类型 :
     *
     * 1.订阅某个channel的【消息】/【通知】
     *
     * 2.订阅某个channel的【消息未读数】/【通知】
     *
     * 3.订阅某个channel的【消息未读状态】/【通知】
     */
    type: number;
    /**
     * 服务器id列表,最多十个
     */
    serverIds: string[];
};
export declare type SubscribeAllChannelResult = {
    /**
     * 订阅成功频道的未读数详情
     */
    unreadInfos: QChatChannelUnreadInfo[];
    /**
     * 订阅失败服务器id列表
     */
    failServerIds: string[];
};
export declare type QChatServerMarkReadOptions = {
    /**
     * 需要清空服务器id列表
     */
    serverIds: string[];
};
export declare type QChatServerMarkReadResult = {
    /**
     * 清空成功服务器id列表
     */
    successServerIds: string[];
    /**
     * 清空失败服务器id列表
     */
    failServerIds: string[];
    /**
     * 清空未读的服务器时间戳，这个时间戳之前的频道消息都认为是已读
     */
    ackTimestamp: number;
};
export declare type TQChatSearchOrder = keyof typeof QChatChannelEOrder;
export declare enum QChatChannelEOrder {
    ASC = 1,
    DESC = 2
}
export declare type TSearchType = keyof typeof ESearchType;
export declare enum QChatEServerSortType {
    reorderWeight = 0,
    createTime = 1,
    totalMember = 2
}
export declare type TSortType = keyof typeof QChatEServerSortType;
export declare enum ESearchType {
    /**
     * 广场
     */
    square = 1,
    /**
     * 个人
     */
    person = 2
}
export declare type ServerSearchByPageOptions = {
    /**
     * 搜索关键字
     */
    keyword: string;
    /**
     * 查询时间范围的开始时间
     */
    startTime?: number;
    /**
     * 查询时间范围的结束时间，要求比开始时间大
     */
    endTime?: number;
    /**
     * 排序规则：ASC-升序 ,DESC-倒序 默认DESC
     */
    order?: TQChatSearchOrder;
    /**
     * 返回结果的记录数，最大和默认都是100
     */
    limit?: number;
    /**
     * 搜索的服务器类型,例如[1,2,3]
     */
    serverType?: number[];
    /**
     * 搜索场景：square-广场,person-个人服务器
     */
    searchType: TSearchType;
    /**
     * 排序条件 reorderWeight-自定义权重排序、createTime-创建时间（默认）、totalMember-服务器总人数
     */
    sort?: TSortType;
    /**
     * 排序条件 查询游标，查询的起始位置，上一次查询结果中的listQueryTag字段会返回cursor字段。
     */
    cursor?: string;
};
export declare type ServerSearchByPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
        /**
         * 查询游标，下次查询的起始位置
         */
        cursor: string;
    };
    datas: ServerInfo[];
};
export declare type ServerMemberSearchByPageOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 关键字
     */
    keyword: string;
    /**
     * 查询数量 最大和默认都是100
     */
    limit?: number;
};
export declare type ServerMemberSearchByPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: MemberInfo[];
};
export declare type BanServerMemberOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 目标用户accid
     */
    accid: string;
    /**
     * 自定义扩展
     */
    ext?: string;
};
export declare type UnbanServerMemberOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 目标用户accid
     */
    accid: string;
    /**
     * 自定义扩展
     */
    ext?: string;
};
export declare type GetBannedMembersByPageOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 时间戳 传0取当前时间
     */
    timetag: number;
    /**
     * 数量, 默认 100
     */
    limit?: number;
};
export declare type GetBannedMembersByPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: ServerMemberBanInfo[];
};
export declare type ServerMemberBanInfo = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户accid
     */
    accid: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 封禁时间
     */
    banTime: string;
    /**
     * 有效标志：true-有效，false-无效
     */
    validFlag: boolean;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
};
export declare type CreateServerOptions = {
    /**
     * 名称
     */
    name: string;
    /**
     * 图标
     */
    icon?: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 邀请模式. 指服务器里的有权限者邀请某人员进入, 是否需要该人的同意
     *
     * 注: 0-需要同意(默认), 1-不需要同意
     */
    inviteMode?: 0 | 1;
    /**
     * 申请模式. 指人员申请进入服务器是否需要有权限者的同意
     *
     * 注: 0-不需要同意(默认)，1-需要同意
     */
    applyMode?: 0 | 1;
    /**
     * 反垃圾相关字段
     */
    antispamTag?: AntispamTag;
    /**
     * 服务器搜索类型，客户自定义，大于等于0的整数 0代表无类型 参见 {@link ServerInfo.searchType | searchType}
     */
    searchType?: number;
    /**
     * 服务器是否允许被搜索，true允许，false不允许，默认允许
     */
    searchEnable?: boolean;
};
/**
 * 反垃圾相关字段
 */
export declare type AntispamTag = {
    /**
     * 用户配置的对某些资料内容另外的反垃圾的业务ID, Json结构, {"textbid":"","picbid":""}
     * http://doc.hz.netease.com/display/MMC/AntispamTag
     */
    antiSpamBusinessId: {
        textbid: string;
        picbid: string;
    };
};
export declare type DeleteServerOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
};
export declare type UpdateServerOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 名称
     */
    name?: string;
    /**
     * 图标
     */
    icon?: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 邀请模式. 指服务器里的有权限者邀请某人员进入, 是否需要该人的同意
     *
     * 注: 0-需要同意(默认), 1-不需要同意
     */
    inviteMode?: 0 | 1;
    /**
     * 申请模式. 指人员申请进入服务器是否需要有权限者的同意
     *
     * 注: 0-不需要同意(默认)，1-需要同意
     */
    applyMode?: 0 | 1;
    /**
     * 反垃圾相关字段
     */
    antispamTag?: AntispamTag;
    /**
     * 服务器搜索类型，客户自定义，大于等于0的整数 0代表无类型 参见 {@link ServerInfo.searchType | searchType}
     */
    searchType?: number;
    /**
     * 服务器是否允许被搜索，true允许，false不允许，默认允许
     */
    searchEnable?: boolean;
};
export declare type GetServersOptions = {
    /**
     * 服务器ID列表
     */
    serverIds: string[];
};
export declare type GetServersByPageOptions = {
    /**
     * 时间戳 传0取当前时间
     */
    timestamp: number;
    /**
     * 条数
     */
    limit?: number;
};
export declare type GetServersByPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: ServerInfo[];
};
export declare type InviteServerMembersOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户账号列表
     */
    accids: string[];
    /**
     * 附言(最长5000)
     */
    ps: string;
    /**
     * 本邀请记录的额外参数
     */
    params: {
        /**
         * 有效时长，单位: 毫秒
         */
        ttl: number;
    };
};
export declare type InviteServerMembersResult = {
    /**
     * 因为用户服务器数量超限导致失败的accid列表
     */
    failByOverAccids: string[];
    /**
     * 因为用户被服务器封禁导致失败的accid列表
     */
    failByBanAccids: string[];
    /**
     * 邀请记录的信息
     */
    recordInfo: {
        /**
         * 邀请记录唯一标识
         */
        requestId: string;
        /**
         * 时间戳，表示邀请过期的截止日期
         */
        expireTime: number;
    };
};
export declare type AcceptServerInviteOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户账号
     */
    accid: string;
    /**
     * 邀请记录的信息
     */
    recordInfo: {
        /**
         * 邀请记录的唯一标识
         */
        requestId: string;
    };
};
export declare type RejectServerInviteOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户账号
     */
    accid: string;
    /**
     * 附言(最长5000)
     */
    ps: string;
    /**
     * 邀请记录的信息
     */
    recordInfo: {
        /**
         * 邀请记录的唯一标识
         */
        requestId: string;
    };
};
export declare type ApplyServerJoinOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 附言(最长5000)
     */
    ps: string;
    /**
     * 本申请记录的额外参数
     */
    params: {
        /**
         * 有效时长，单位: 毫秒
         */
        ttl: number;
    };
};
export declare type AcceptServerApplyOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户账号
     */
    accid: string;
    /**
     * 申请记录的信息
     */
    recordInfo: {
        /**
         * 申请记录的唯一标识
         */
        requestId: string;
    };
};
export declare type RejectServerApplyOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户账号
     */
    accid: string;
    /**
     * 附言(最长5000)
     */
    ps: string;
    /**
     * 申请记录的信息
     */
    recordInfo: {
        /**
         * 申请记录的唯一标识
         */
        requestId: string;
    };
};
export declare type KickServerMembersOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户账号列表
     */
    accids: string[];
};
export declare type LeaveServerOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
};
export declare type UpdateServerMemberInfoOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户accid
     */
    accid: string;
    /**
     * 昵称
     */
    nick?: string;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 反垃圾相关字段
     */
    antispamTag?: AntispamTag;
};
export declare type UpdateMyMemberInfoOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户accid
     */
    accid: string;
    /**
     * 昵称
     */
    nick?: string;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 反垃圾相关字段
     */
    antispamTag?: AntispamTag;
};
export declare type GetServerMembersOptions = {
    accids: {
        accid: string;
        serverId: string;
    }[];
};
export declare type GetServerMembersByPageOptions = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 时间戳 传0取当前时间
     */
    timetag: number;
    /**
     * 数量, 默认 100
     */
    limit?: number;
};
export declare type GetServerMembersByPageResult = {
    /**
     * 分页便捷选项
     */
    listQueryTag: {
        /**
         * 是否还有下一页
         */
        hasMore: boolean;
        /**
         * 下一次翻页时的起始时间戳
         */
        nextTimetag: number;
    };
    datas: MemberInfo[];
};
export declare type MemberInfo = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 用户accid
     */
    accid: string;
    /**
     * 昵称
     */
    nick: string;
    /**
     * 头像
     */
    avatar: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 类型：0-普通成员，1-所有者
     */
    type: 0 | 1;
    /**
     * 加入时间
     */
    joinTime: number;
    /**
     * 邀请模人
     */
    inviter: string;
    /**
     * 有效标志：0-无效，1-有效
     */
    validFlag: 0 | 1;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
};
export declare type ServerInfo = {
    /**
     * 服务器ID
     */
    serverId: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 图标
     */
    icon?: string;
    /**
     * 自定义扩展
     */
    ext?: string;
    /**
     * 所有者
     */
    owner: string;
    /**
     * 成员数量
     */
    memberNumber: string;
    /**
     * 邀请模式. 指服务器里的有权限者邀请某人员进入, 是否需要该人的同意
     *
     * 注: 0-需要同意(默认), 1-不需要同意
     */
    inviteMode: 0 | 1;
    /**
     * 申请模式. 指人员申请进入服务器是否需要有权限者的同意
     *
     * 注: 0-不需要同意(默认)，1-需要同意
     */
    applyMode: 0 | 1;
    /**
     * 有效标志：0-无效，1-有效
     */
    validFlag: 0 | 1;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
    /**
     * 频道数
     */
    channelNumber: number;
    /**
     * 频道分组的数量
     */
    categoryNumber?: number;
    /**
     * 服务器搜索类型，客户自定义，大于0的整数 参见 {@link ServerInfo.searchType | searchType}
     */
    searchType: number;
    /**
     * 服务器是否允许被搜索.
     *
     * true 允许, false 不允许
     */
    searchEnable: boolean;
    /**
     * 自定义排序权重值
     *
     * 注: IM 服务端下发的自定义顺序权重, 下发时已经排好，客户端不需要干预。
     *
     * 注2: 这个值目前只能通过 IM 服务端提供的 HTTP API 接口去更改
     */
    reorderWeight: string;
};
export declare type SubscribeServerOptions = {
    /**
     * 订阅类型 :
     *
     * 4.订阅某个server的【消息】/【通知】，如server基本信息修改、人员进出、权限变更、创建channel等
     */
    type: 4;
    /**
     * 操作类型 1订阅 2取消订阅
     */
    opeType: 1 | 2;
    /**
     * 要订阅的服务器信息
     */
    servers: {
        serverId: string;
    }[];
};
export declare type QChatServerInviteApplyRecord = {
    /**
     * 这条数据的唯一标识，仅用于分页查询使用。
     */
    recordId: string;
    /**
     * account ID，操作者/申请者的账号 id
     */
    accid: string;
    /**
     * 邀请/申请的类型：
     *
     * 1 表示申请，也能表示申请记录的拒绝与同意
     *
     * 2 表示邀请记录，仅查询服务器下的记录能查到这种类型, 接口为 {@link QChatServerServiceInterface.getInviteAndApplyRecord | getInviteAndApplyRecord}
     *
     * 3 表示邀请记录的同意/拒绝的记录
     *
     * 4 表示邀请码生成，仅查询服务器下的记录能查到这种类型, 接口为 {@link QChatServerServiceInterface.getInviteAndApplyRecord | getInviteAndApplyRecord}
     *
     * 5 表示通过邀请码加入
     */
    type: number;
    /**
     * 服务器 id
     */
    serverId: string;
    /**
     * 状态。0表示初始状态
     *
     * 1 表示同意
     *
     * 2 表示拒绝
     *
     * 3 表示通过其他 申请/邀请 同意了，
     *
     * 4 表示通过其他 申请/邀请 拒绝了
     *
     * 5 表示邀请/申请时自动加入
     *
     * 6 表示过期
     */
    status: number;
    /**
     * 申请/邀请的唯一标识
     */
    requestId: string;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 修改时间
     */
    updateTime: number;
    /**
     * 过期时间
     */
    expireTime: number;
    /**
     * 内容数据，对应上文 type 的类型有以下四种定义
     */
    data: QChatServerInviteAndApplyDataWithType1 & QChatServerInviteAndApplyDataWithType2 & QChatServerInviteAndApplyDataWithType3 & QChatServerInviteAndApplyDataWithType4 & QChatServerInviteAndApplyDataWithType5;
};
export declare type QChatServerInviteAndApplyDataWithType1 = {
    /**
     * 申请时的附言
     */
    applyPostscript?: string;
    /**
     * 该申请的同意人
     */
    updateAccid?: string;
    /**
     * 同意/拒绝申请时的附言
     */
    updatePostscript?: string;
};
export declare type QChatServerInviteAndApplyDataWithType2 = {
    /**
     * 邀请时的附加信息
     */
    invitePostscript?: string;
    /**
     * 受邀请者的信息
     */
    inviteUsers: {
        /**
         * 受邀者的账号 id
         */
        accid: string;
        /**
         * 受邀者的状态，0表示初始状态。定义同 {@link QChatServerInviteApplyRecord.status | status}
         */
        status: number;
        /**
         * 受到拒绝时的附言
         */
        updatePostscript?: string;
        /**
         * 更新时间
         */
        updateTime: number;
    }[];
};
export declare type QChatServerInviteAndApplyDataWithType3 = {
    /**
     * 邀请时的附加信息
     */
    invitePostscript?: string;
    /**
     * 同意/拒绝时的附加信息
     */
    updatePostscript?: string;
};
export declare type QChatServerInviteAndApplyDataWithType4 = {
    /**
     * 邀请码的附加信息
     */
    invitePostscript?: string;
    /**
     * 邀请码
     */
    inviteCode: string;
    /**
     * 该邀请码的使用人数
     */
    inviteUserCount?: number;
};
export declare type QChatServerInviteAndApplyDataWithType5 = {
    /**
     * 附言
     */
    updatePostscript?: string;
    /**
     * 邀请码
     */
    inviteCode: string;
};
export declare type QChatServerGetInviteApplyRecordOfSelfOptions = {
    /**
     * 开始时间戳
     */
    fromTime: number;
    /**
     * 结束时间戳
     */
    toTime: number;
    /**
     * 排列顺序。默认为 false
     *
     * 为 true 则代表按时间戳升序查询，从 fromTime 开始查询到 toTime 之间的 limit 条记录
     *
     * 为 false 则代表按时间戳降序查询，从 toTime 开始查询到 fromTime 之间的 limit 条记录
     */
    reverse?: boolean;
    /**
     * 分页大小
     */
    limit?: number;
    /**
     * 游标 id，id 的来源参照 {@link QChatServerInviteApplyRecord.recordId | recordId}
     *
     * 注：若有多条记录有相同的时间，需要借助这个参数才能精准的分页。
     */
    cursor?: string;
};
export declare type QChatServerGetInviteApplyRecordOfServerOptions = {
    /**
     * 服务器 id
     */
    serverId: string;
    /**
     * 开始时间戳
     */
    fromTime: number;
    /**
     * 结束时间戳
     */
    toTime: number;
    /**
     * 排列顺序。默认为 false
     *
     * 为 true 则代表按时间戳升序查询，从 fromTime 开始查询到 toTime 之间的 limit 条记录
     *
     * 为 false 则代表按时间戳降序查询，从 toTime 开始查询到 fromTime 之间的 limit 条记录
     */
    reverse?: boolean;
    /**
     * 分页大小
     */
    limit?: number;
    /**
     * 游标 id，id 的来源参照 {@link QChatServerInviteApplyRecord.recordId | recordId}
     *
     * 注：若有多条记录有相同的时间，需要借助这个参数才能精准的分页。
     */
    cursor?: string;
};
export declare type QChatServerJoinByInviteCodeOptions = {
    /**
     * 服务器 id
     */
    serverId: string;
    /**
     * 邀请码
     */
    inviteCode: string;
    /**
     * 附言
     */
    ps?: string;
};
export declare type QChatServerGenerateInviteCodeOptions = {
    /**
     * 服务器 id
     */
    serverId: string;
    /**
     * 有效时长，单位: 毫秒。默认 30 天
     */
    ttl?: number;
};
export declare type QChatServerInviteCode = {
    /**
     * 服务器 id
     */
    serverId: string;
    /**
     * 唯一标识
     */
    requestId: string;
    /**
     * 邀请码
     */
    inviteCode: string;
    /**
     * 时间戳，表示邀请过期的截止日期
     */
    expireTime: number;
};
/**
 * 申请加入服务器的记录的信息
 */
export declare type QChatServerApplyRecordInfo = {
    /**
     * 申请记录的唯一标识
     */
    requestId: string;
    /**
     * 时间戳，表示邀请过期的截止日期
     */
    expireTime: number;
};
export declare type SubscribeServerResult = {
    /**
     * 订阅失败的服务器列表
     */
    failedServers: {
        serverId: string;
    }[];
};
