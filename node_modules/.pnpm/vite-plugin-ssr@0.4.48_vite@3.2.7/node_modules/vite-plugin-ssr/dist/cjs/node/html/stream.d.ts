/// <reference types="node" />
export { getStreamReadableNode };
export { getStreamReadableWeb };
export { pipeToStreamWritableNode };
export { pipeToStreamWritableWeb };
export { processStream };
export { isStream };
export { streamToString };
export { getStreamName };
export { inferStreamName };
export { streamReadableWebToString };
export { streamPipeNodeToString };
export { isStreamWritableWeb };
export { isStreamWritableNode };
export type { Stream };
export type { StreamTypePatch };
export type { StreamReadableWeb };
export type { StreamReadableNode };
export type { StreamWritableWeb };
export type { StreamWritableNode };
export type { StreamPipeWeb };
export type { StreamPipeNode };
export { stampPipe };
export { pipeStream };
export { pipeWebStream };
export { pipeNodeStream };
import { HtmlRender } from './renderHtml';
import type { Readable as StreamReadableNode, Writable as StreamWritableNode } from 'stream';
import { StreamReactStreaming } from './stream/react-streaming';
declare type StreamReadableWeb = ReadableStream;
declare type StreamWritableWeb = WritableStream;
declare type StreamPipeWeb = (writable: StreamWritableWeb) => void;
declare type StreamPipeNode = (writable: StreamWritableNode) => void;
declare type StreamPipe = (writable: StreamWritableNode | StreamWritableWeb) => void;
declare type Stream = StreamReadableWeb | StreamReadableNode | StreamPipeWebWrapped | StreamPipeWeb | StreamPipeNodeWrapped | StreamPipeNode | StreamReactStreaming;
declare type StreamTypePatch = NodeJS.ReadableStream;
declare function isStreamWritableWeb(thing: unknown): thing is StreamWritableWeb;
declare function isStreamWritableNode(thing: unknown): thing is StreamWritableNode;
declare function streamReadableWebToString(readableWeb: ReadableStream): Promise<string>;
declare function streamPipeNodeToString(streamPipeNode: StreamPipeNode): Promise<string>;
declare function getStreamReadableNode(htmlRender: HtmlRender): Promise<null | StreamReadableNode>;
declare function getStreamReadableWeb(htmlRender: HtmlRender): null | StreamReadableWeb;
declare function pipeToStreamWritableWeb(htmlRender: HtmlRender, writable: StreamWritableWeb): boolean;
declare function pipeToStreamWritableNode(htmlRender: HtmlRender, writable: StreamWritableNode): boolean;
declare function processStream<StreamType extends Stream>(streamOriginal: StreamType, { injectStringAtBegin, injectStringAtEnd, onErrorWhileStreaming, enableEagerStreaming }: {
    injectStringAtBegin?: () => Promise<string>;
    injectStringAtEnd?: () => Promise<string>;
    onErrorWhileStreaming: (err: unknown) => void;
    enableEagerStreaming?: boolean;
}): Promise<StreamType>;
declare function isStream(something: unknown): something is Stream;
declare const __streamPipeWeb = "__streamPipeWeb";
declare type StreamPipeWebWrapped = {
    [__streamPipeWeb]: StreamPipeWeb;
};
/** @deprecated */
declare function pipeWebStream(pipe: StreamPipeWeb): StreamPipeWebWrapped;
declare const __streamPipeNode = "__streamPipeNode";
declare type StreamPipeNodeWrapped = {
    [__streamPipeNode]: StreamPipeNode;
};
/** @deprecated */
declare function pipeNodeStream(pipe: StreamPipeNode): StreamPipeNodeWrapped;
declare function stampPipe(pipe: StreamPipeNode | StreamPipeWeb, pipeType: 'web-stream' | 'node-stream'): void;
declare const __streamPipe = "__streamPipe";
declare type StreamPipeWrapped = {
    [__streamPipe]: StreamPipe;
};
declare function pipeStream(pipe: StreamPipe): StreamPipeWrapped;
declare function streamToString(stream: Stream): Promise<string>;
declare function getStreamName(type: 'pipe' | 'readable' | 'writable', standard: 'web' | 'node'): string;
declare function inferStreamName(stream: Stream): string;
