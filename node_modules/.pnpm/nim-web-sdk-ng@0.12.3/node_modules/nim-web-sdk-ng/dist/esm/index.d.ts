/** 此定义为 ESM module 所用 */
import { AdaptersInterface } from './adapters';
import { CloudStorageServiceInterface, GetFileTokenOptions, GetFileTokenResult, UploadFileResult } from './nim/src/CloudStorageServiceInterface';
import { EventServiceInterface, MsgEventSubscribe, PublishEventOptions, PublishEventResult, QuerySubscribeEventsOptions, SubscribeEventOptions, SubscribeEventResult, UnSubscribeEventsOptions, UnSubscribeEventsResult } from './nim/src/EventServiceInterface';
import { AddFriendOptions, ApplyFriendOptions, DeleteFriendOptions, FriendProfile, FriendServiceInterface, PassFriendApplyOptions, RejectFriendApplyOptions, UpdateFriendOptions } from './nim/src/FriendServiceInterface';
import { GetMsgsByIdServerOptions, GetThreadMsgsOptions, GetThreadMsgsResult, MsgExtendServiceInterface } from './nim/src/MsgExtendServiceInterface';
import { ClearHistoryMsgsFromServerOptions, GetHistoryMsgsOptions, MsgLogServiceInterface, NIMEFtsCloudMsgLogsAggWithSessionOptions, NIMEFtsMsgLogsOptions, SessionIdListOptions } from './nim/src/MsgLogServiceInterface';
import { DeleteSelfMsgsOptions, DeleteSelfMsgsResult, ForwardMsgOptions, GetTeamMsgReadAccountsOptions, GetTeamMsgReadAccountsResult, GetTeamMsgReadsOptions, GetTeamMsgReadsResult, IMMessage, MsgServiceInterface, RecallMsgOptions, ResendMsgOptions, SendMsgReceiptOptions, SendMsgReceiptResult, SendTeamMsgReceiptOptions } from './nim/src/MsgServiceInterface';
import { PassThroughServiceInterface, RequestProxyOptions } from './nim/src/PassThroughServiceInterface';
import { GetChatroomAddressOptions, GetQChatAddressOptions, PluginServiceInterface } from './nim/src/PluginServiceInterface';
import { GetSessionsOptions, NIM_AddStickTopSessionOptions, NIM_DeleteStickTopSessionOptions, NIM_UpdateStickTopSessionOptions, Session, SessionIdOptions, SessionServiceInterface, NIM_SessionIdsOptions } from './nim/src/SessionServiceInterface';
import { NIMESignalingAcceptOptions, NIMESignalingCallExOptions, NIMESignalingCancelInviteOptions, NIMESignalingChannel, NIMESignalingCloseOptions, NIMESignalingCreateOptions, NIMESignalingInviteOptions, NIMESignalingJoinAndAcceptOptions, NIMESignalingJoinOptions, NIMESignalingLeaveOptions, NIMESignalingQueryInfoOptions, NIMESignalingRejectOptions, NIMESignalingSendCustomCommandOptions, SignalingServiceInterface } from './nim/src/SignalingServiceInterface';
import { AcceptSuperTeamInviteOptions, AddSuperTeamManagersOptions, AddSuperTeamMembersOptions, ApplySuperTeamOptions, GetSuperTeamMembersByAccountsOptions, GetSuperTeamMembersOptions, MuteSuperTeamMembersOptions, MuteSuperTeamOptions, PassSuperTeamApplyOptions, QueryMuteMembersOptions, RejectSuperTeamApplyOptions, RejectSuperTeamInviteOptions, RemmoveSuperTeamManagersOptions, RemoveSuperTeamMembersOptions, SuperTeam, SuperTeamMember, SuperTeamServiceInterface, TransferSuperTeamOptions, UpdateMemberNickOptions as UpdateSuperTeamMemberNickOptions, UpdateMyMemberInfoOptions as UpdateSuperTeamMyMemberInfoOptions, UpdateSuperTeamInfoOptions } from './nim/src/SuperTeamServiceInterface';
import { SendCustomSysMsgOptions, SystemMessageServiceInterface } from './nim/src/SystemMessageServiceInterface';
import { AcceptTeamInviteOptions, AddTeamManagersOptions, AddTeamMembersOptions, ApplyTeamOptions, CreateTeamOptions, GetTeamMemberInvitorAccidOptions, GetTeamMemberInvitorAccidResult, GetTeamMembersOptions, GetTeamsByIdResult, MuteTeamMemberOptions, MuteTeamOptions, PassTeamApplyOptions, RejectTeamApplyOptions, RejectTeamInviteOptions, RemmoveTeamManagersOptions, RemoveTeamMembersOptions, Team, TeamMember, TeamServiceInterface, TransferTeamOptions, UpdateMemberNickOptions, UpdateMyMemberInfoOptions, UpdateTeamInfoOptions } from './nim/src/TeamServiceInterface';
import { ISendTextMsgOptions, ISendTipMsgOptions, ISendGeoLocationMsgOptions, ISendCustomMsgOptions, IBaseSendFileOptions, IUploadFileOptions } from './nim/src/types';
import { GetUsersNameCardFromServerOptions, MarkedUserInfo, Relations, UpdateMyInfoOptions, UpdateRelationsOptions, UserNameCard, UserServiceInterface } from './nim/src/UserServiceInterface';
/** NIM 相关 */
export { default as NIM } from './nim/src/index';
export declare class MsgService implements MsgServiceInterface {
    sendTextMsg(options: ISendTextMsgOptions): Promise<IMMessage>;
    sendTipMsg(options: ISendTipMsgOptions): Promise<IMMessage>;
    sendGeoLocationMsg(options: ISendGeoLocationMsgOptions): Promise<IMMessage>;
    sendCustomMsg(options: ISendCustomMsgOptions): Promise<IMMessage>;
    sendImageMsg(options: IBaseSendFileOptions): Promise<IMMessage>;
    sendAudioMsg(options: IBaseSendFileOptions): Promise<IMMessage>;
    sendVideoMsg(options: IBaseSendFileOptions): Promise<IMMessage>;
    sendFileMsg(options: IBaseSendFileOptions): Promise<IMMessage>;
    resendMsg(options: ResendMsgOptions): Promise<IMMessage>;
    forwardMsg(options: ForwardMsgOptions): Promise<IMMessage>;
    recallMsg(options: RecallMsgOptions): Promise<IMMessage>;
    deleteSelfMsgs(options: DeleteSelfMsgsOptions): Promise<DeleteSelfMsgsResult[]>;
    sendMsgReceipt(options: SendMsgReceiptOptions): Promise<void | SendMsgReceiptResult>;
    sendTeamMsgReceipt(options: SendTeamMsgReceiptOptions): Promise<void>;
    getTeamMsgReads(options: GetTeamMsgReadsOptions): Promise<GetTeamMsgReadsResult>;
    getTeamMsgReadAccounts(options: GetTeamMsgReadAccountsOptions): Promise<GetTeamMsgReadAccountsResult>;
}
export declare class UserService implements UserServiceInterface {
    setBlack(options: UpdateRelationsOptions): Promise<void>;
    setMute(options: UpdateRelationsOptions): Promise<void>;
    getUsersNameCardFromServer(options: GetUsersNameCardFromServerOptions): Promise<UserNameCard[]>;
    updateMyNameCard(options: UpdateMyInfoOptions): Promise<UserNameCard>;
    getRelations(): Promise<Relations>;
    getBlackList(): Promise<MarkedUserInfo[]>;
    getMuteList(): Promise<MarkedUserInfo[]>;
}
export declare class SessionService implements SessionServiceInterface {
    getSession(options: SessionIdOptions): void | Session;
    getSessions(options: GetSessionsOptions): Session[];
    resetSessionUnreadCount(options: SessionIdOptions): Promise<void>;
    resetMultiSessionUnreadCount(options: NIM_SessionIdsOptions): Promise<void>;
    resetAllSessionsUnreadCount(): Promise<void>;
    deleteSession(options: {
        id: string;
        isSyncToServer: boolean;
    }): Promise<void>;
    deleteAllSessionsFromLocal(): void;
    addStickTopSession(options: NIM_AddStickTopSessionOptions): Promise<Session>;
    deleteStickTopSession(options: NIM_DeleteStickTopSessionOptions): Promise<Session>;
    updateStickTopSession(options: NIM_UpdateStickTopSessionOptions): Promise<Session>;
}
export declare class TeamService implements TeamServiceInterface {
    getTeamInfo(options: {
        teamId: string;
    }): Promise<Team>;
    getTeams(): Promise<Team[]>;
    getTeamsById(options: {
        teamIds: string[];
    }): Promise<GetTeamsByIdResult>;
    createTeam(options: CreateTeamOptions): Promise<Team>;
    dismissTeam(options: {
        teamId: string;
    }): Promise<void>;
    leaveTeam(options: {
        teamId: string;
    }): Promise<void>;
    transferTeam(options: TransferTeamOptions): Promise<void>;
    updateTeamInfo(options: UpdateTeamInfoOptions): Promise<Team>;
    getTeamMembers(options: GetTeamMembersOptions): Promise<TeamMember[]>;
    getMutedTeamMembers(options: {
        teamId: string;
    }): Promise<TeamMember[]>;
    addTeamMembers(options: AddTeamMembersOptions): Promise<void>;
    removeTeamMembers(options: RemoveTeamMembersOptions): Promise<void>;
    applyTeam(options: ApplyTeamOptions): Promise<Team>;
    addTeamManagers(options: AddTeamManagersOptions): Promise<void>;
    removeTeamManagers(options: RemmoveTeamManagersOptions): Promise<void>;
    updateMyMemberInfo(options: UpdateMyMemberInfoOptions): Promise<TeamMember>;
    updateMemberNick(options: UpdateMemberNickOptions): Promise<TeamMember>;
    muteTeamMember(options: MuteTeamMemberOptions): Promise<void>;
    getTeamMemberInvitorAccid(options: GetTeamMemberInvitorAccidOptions): Promise<GetTeamMemberInvitorAccidResult>;
    muteTeam(options: MuteTeamOptions): Promise<void>;
    passTeamApply(options: PassTeamApplyOptions): Promise<void>;
    rejectTeamApply(options: RejectTeamApplyOptions): Promise<void>;
    acceptTeamInvite(options: AcceptTeamInviteOptions): Promise<void>;
    rejectTeamInvite(options: RejectTeamInviteOptions): Promise<void>;
}
export declare class SystemMessageService implements SystemMessageServiceInterface {
    sendCustomSysMsg(options: SendCustomSysMsgOptions): Promise<void>;
}
export declare class SignalingService implements SignalingServiceInterface {
    callEx(options: NIMESignalingCallExOptions): Promise<NIMESignalingChannel>;
    joinAndAccept(options: NIMESignalingJoinAndAcceptOptions): Promise<NIMESignalingChannel>;
    create(options: NIMESignalingCreateOptions): Promise<NIMESignalingChannel>;
    close(options: NIMESignalingCloseOptions): Promise<void>;
    queryInfo(options: NIMESignalingQueryInfoOptions): Promise<NIMESignalingChannel>;
    join(options: NIMESignalingJoinOptions): Promise<NIMESignalingChannel>;
    leave(options: NIMESignalingLeaveOptions): Promise<void>;
    invite(options: NIMESignalingInviteOptions): Promise<void>;
    cancelInvite(options: NIMESignalingCancelInviteOptions): Promise<void>;
    reject(options: NIMESignalingRejectOptions): Promise<void>;
    accept(options: NIMESignalingAcceptOptions): Promise<void>;
    sendCustomCommand(options: NIMESignalingSendCustomCommandOptions): Promise<void>;
}
export declare class FriendService implements FriendServiceInterface {
    getFriends(): Promise<FriendProfile[]>;
    addFriend(options: AddFriendOptions): Promise<FriendProfile>;
    applyFriend(options: ApplyFriendOptions): Promise<void>;
    passFriendApply(options: PassFriendApplyOptions): Promise<void>;
    rejectFriendApply(options: RejectFriendApplyOptions): Promise<void>;
    deleteFriend(options: DeleteFriendOptions): Promise<void>;
    updateFriend(options: UpdateFriendOptions): Promise<void>;
}
export declare class EventService implements EventServiceInterface {
    publishEvent(options: PublishEventOptions): Promise<PublishEventResult>;
    subscribeEvent(options: SubscribeEventOptions): Promise<SubscribeEventResult>;
    unSubscribeEvents(options: UnSubscribeEventsOptions): Promise<UnSubscribeEventsResult>;
    querySubscribeEvents(options: QuerySubscribeEventsOptions): Promise<MsgEventSubscribe[]>;
}
export declare class MsgExtendService implements MsgExtendServiceInterface {
    getThreadMsgs(options: GetThreadMsgsOptions): Promise<GetThreadMsgsResult>;
    getMsgsByIdServer(options: GetMsgsByIdServerOptions): Promise<IMMessage[]>;
}
export declare class MsgLogService implements MsgLogServiceInterface {
    deleteRoamingMsgs(options: SessionIdListOptions): Promise<void>;
    getHistoryMsgs(options: GetHistoryMsgsOptions): Promise<IMMessage[]>;
    ftsCloudMsgLogs(options: NIMEFtsMsgLogsOptions): Promise<IMMessage[]>;
    ftsCloudMsgLogsAggWithSession(options: NIMEFtsCloudMsgLogsAggWithSessionOptions): Promise<IMMessage[]>;
    clearHistoryMsgsFromServer(options: ClearHistoryMsgsFromServerOptions): Promise<{
        timetag: number;
    }>;
}
export declare class PassThroughService implements PassThroughServiceInterface {
    request(options: RequestProxyOptions): Promise<RequestProxyOptions>;
}
export declare class SuperTeamService implements SuperTeamServiceInterface {
    getSuperTeamInfo(options: {
        teamId: string;
    }): Promise<SuperTeam>;
    getSuperTeams(): Promise<SuperTeam[]>;
    updateSuperTeamInfo(options: UpdateSuperTeamInfoOptions): Promise<SuperTeam>;
    addSuperTeamMembers(options: AddSuperTeamMembersOptions): Promise<void>;
    removeSuperTeamMembers(options: RemoveSuperTeamMembersOptions): Promise<void>;
    addSuperTeamManagers(options: AddSuperTeamManagersOptions): Promise<void>;
    removeSuperTeamManagers(options: RemmoveSuperTeamManagersOptions): Promise<void>;
    applySuperTeam(options: ApplySuperTeamOptions): Promise<SuperTeam>;
    transferSuperTeam(options: TransferSuperTeamOptions): Promise<void>;
    muteSuperTeam(options: MuteSuperTeamOptions): Promise<void>;
    muteSuperTeamMembers(options: MuteSuperTeamMembersOptions): Promise<void>;
    updateMemberNick(options: UpdateSuperTeamMemberNickOptions): Promise<SuperTeamMember>;
    updateMyMemberInfo(options: UpdateSuperTeamMyMemberInfoOptions): Promise<SuperTeamMember>;
    getSuperTeamMembersByAccounts(options: GetSuperTeamMembersByAccountsOptions): Promise<SuperTeamMember[]>;
    getSuperTeamMembers(options: GetSuperTeamMembersOptions): Promise<SuperTeamMember[]>;
    queryMuteMembers(options: QueryMuteMembersOptions): Promise<SuperTeamMember[]>;
    leaveSuperTeam(options: {
        teamId: string;
    }): Promise<void>;
    passSuperTeamApply(options: PassSuperTeamApplyOptions): Promise<void>;
    rejectSuperTeamApply(options: RejectSuperTeamApplyOptions): Promise<void>;
    acceptSuperTeamInvite(options: AcceptSuperTeamInviteOptions): Promise<void>;
    rejectSuperTeamInvite(options: RejectSuperTeamInviteOptions): Promise<void>;
}
export declare class PluginService implements PluginServiceInterface {
    getChatroomAddress(options: GetChatroomAddressOptions): Promise<string[]>;
    getQChatAddress(options?: GetQChatAddressOptions): Promise<string[]>;
}
export declare class cloudStorageService implements CloudStorageServiceInterface {
    uploadFile(options: IUploadFileOptions): Promise<UploadFileResult>;
    getOriginUrl(options: string): Promise<string>;
    getFileToken(options: GetFileTokenOptions): Promise<void | GetFileTokenResult>;
}
/** Chatroom 相关 */
export { default as Chatroom } from './chatroom/src/index';
/** QChat 相关 */
export { default as QChat } from './qchat/src/index';
/** 适配器相关 */
export declare const uniAppAdapters: AdaptersInterface;
export declare const browserAdapters: AdaptersInterface;
export declare const miniAppAdapters: AdaptersInterface;
