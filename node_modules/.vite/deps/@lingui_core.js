import {
  _classCallCheck,
  _createClass,
  _getPrototypeOf,
  _inherits,
  _possibleConstructorReturn
} from "./chunk-LXBXGZNC.js";
import {
  _slicedToArray
} from "./chunk-J2LKXWZG.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-IOFESWT4.js";
import "./chunk-LKNNICOI.js";
import {
  _defineProperty
} from "./chunk-3ULZP7K6.js";
import {
  __commonJS,
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/.pnpm/messageformat-parser@4.1.3/node_modules/messageformat-parser/parser.js
var require_parser = __commonJS({
  "node_modules/.pnpm/messageformat-parser@4.1.3/node_modules/messageformat-parser/parser.js"(exports, module) {
    "use strict";
    function peg$subclass(child, parent) {
      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
    }
    function peg$SyntaxError(message, expected, found, location) {
      this.message = message;
      this.expected = expected;
      this.found = found;
      this.location = location;
      this.name = "SyntaxError";
      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError);
      }
    }
    peg$subclass(peg$SyntaxError, Error);
    peg$SyntaxError.buildMessage = function(expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return '"' + literalEscape(expectation.text) + '"';
        },
        "class": function(expectation) {
          var escapedParts = "", i2;
          for (i2 = 0; i2 < expectation.parts.length; i2++) {
            escapedParts += expectation.parts[i2] instanceof Array ? classEscape(expectation.parts[i2][0]) + "-" + classEscape(expectation.parts[i2][1]) : classEscape(expectation.parts[i2]);
          }
          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },
        any: function(expectation) {
          return "any character";
        },
        end: function(expectation) {
          return "end of input";
        },
        other: function(expectation) {
          return expectation.description;
        }
      };
      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }
      function literalEscape(s2) {
        return s2.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function classEscape(s2) {
        return s2.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }
      function describeExpected(expected2) {
        var descriptions = new Array(expected2.length), i2, j;
        for (i2 = 0; i2 < expected2.length; i2++) {
          descriptions[i2] = describeExpectation(expected2[i2]);
        }
        descriptions.sort();
        if (descriptions.length > 0) {
          for (i2 = 1, j = 1; i2 < descriptions.length; i2++) {
            if (descriptions[i2 - 1] !== descriptions[i2]) {
              descriptions[j] = descriptions[i2];
              j++;
            }
          }
          descriptions.length = j;
        }
        switch (descriptions.length) {
          case 1:
            return descriptions[0];
          case 2:
            return descriptions[0] + " or " + descriptions[1];
          default:
            return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
        }
      }
      function describeFound(found2) {
        return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
      }
      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    function peg$parse(input, options) {
      options = options !== void 0 ? options : {};
      var peg$FAILED = {}, peg$startRuleFunctions = { start: peg$parsestart }, peg$startRuleFunction = peg$parsestart, peg$c0 = "#", peg$c1 = peg$literalExpectation("#", false), peg$c2 = function() {
        return inPlural[0];
      }, peg$c3 = function() {
        return { type: "octothorpe" };
      }, peg$c4 = function(str) {
        return str.join("");
      }, peg$c5 = "{", peg$c6 = peg$literalExpectation("{", false), peg$c7 = "}", peg$c8 = peg$literalExpectation("}", false), peg$c9 = function(arg) {
        return {
          type: "argument",
          arg
        };
      }, peg$c10 = ",", peg$c11 = peg$literalExpectation(",", false), peg$c12 = "select", peg$c13 = peg$literalExpectation("select", false), peg$c14 = function(arg, m2) {
        if (options.strict) {
          inPlural.unshift(false);
        }
        return m2;
      }, peg$c15 = function(arg, cases) {
        if (options.strict)
          inPlural.shift();
        return {
          type: "select",
          arg,
          cases
        };
      }, peg$c16 = "plural", peg$c17 = peg$literalExpectation("plural", false), peg$c18 = "selectordinal", peg$c19 = peg$literalExpectation("selectordinal", false), peg$c20 = function(arg, m2) {
        inPlural.unshift(true);
        return m2;
      }, peg$c21 = function(arg, type, offset, cases) {
        var ls = (type === "selectordinal" ? options.ordinal : options.cardinal) || ["zero", "one", "two", "few", "many", "other"];
        if (ls && ls.length)
          cases.forEach(function(c2) {
            if (isNaN(c2.key) && ls.indexOf(c2.key) < 0)
              throw new Error(
                "Invalid key `" + c2.key + "` for argument `" + arg + "`. Valid " + type + " keys for this locale are `" + ls.join("`, `") + "`, and explicit keys like `=0`."
              );
          });
        inPlural.shift();
        return {
          type,
          arg,
          offset: offset || 0,
          cases
        };
      }, peg$c22 = function(arg, key, param) {
        return {
          type: "function",
          arg,
          key,
          param
        };
      }, peg$c23 = peg$otherExpectation("identifier"), peg$c24 = /^[^\t-\r \x85\u200E\u200F\u2028\u2029!-\/:-@[-\^`{-~\xA1-\xA7\xA9\xAB\xAC\xAE\xB0\xB1\xB6\xBB\xBF\xD7\xF7\u2010-\u2027\u2030-\u203E\u2041-\u2053\u2055-\u205E\u2190-\u245F\u2500-\u2775\u2794-\u2BFF\u2E00-\u2E7F\u3001-\u3003\u3008-\u3020\u3030\uFD3E\uFD3F\uFE45\uFE46]/, peg$c25 = peg$classExpectation([["	", "\r"], " ", "\x85", "\u200E", "\u200F", "\u2028", "\u2029", ["!", "/"], [":", "@"], ["[", "^"], "`", ["{", "~"], ["\xA1", "\xA7"], "\xA9", "\xAB", "\xAC", "\xAE", "\xB0", "\xB1", "\xB6", "\xBB", "\xBF", "\xD7", "\xF7", ["\u2010", "\u2027"], ["\u2030", "\u203E"], ["\u2041", "\u2053"], ["\u2055", "\u205E"], ["\u2190", "\u245F"], ["\u2500", "\u2775"], ["\u2794", "\u2BFF"], ["\u2E00", "\u2E7F"], ["\u3001", "\u3003"], ["\u3008", "\u3020"], "\u3030", "\uFD3E", "\uFD3F", "\uFE45", "\uFE46"], true, false), peg$c26 = function(key, tokens) {
        return { key, tokens };
      }, peg$c27 = function(tokens) {
        return tokens;
      }, peg$c28 = peg$otherExpectation("plural offset"), peg$c29 = "offset", peg$c30 = peg$literalExpectation("offset", false), peg$c31 = ":", peg$c32 = peg$literalExpectation(":", false), peg$c33 = function(d2) {
        return d2;
      }, peg$c34 = "=", peg$c35 = peg$literalExpectation("=", false), peg$c36 = "number", peg$c37 = peg$literalExpectation("number", false), peg$c38 = "date", peg$c39 = peg$literalExpectation("date", false), peg$c40 = "time", peg$c41 = peg$literalExpectation("time", false), peg$c42 = "spellout", peg$c43 = peg$literalExpectation("spellout", false), peg$c44 = "ordinal", peg$c45 = peg$literalExpectation("ordinal", false), peg$c46 = "duration", peg$c47 = peg$literalExpectation("duration", false), peg$c48 = function(key) {
        if (options.strict || /^\d/.test(key))
          return false;
        switch (key.toLowerCase()) {
          case "select":
          case "plural":
          case "selectordinal":
            return false;
          default:
            return true;
        }
      }, peg$c49 = function(key) {
        return key;
      }, peg$c50 = function(tokens) {
        return !options.strict;
      }, peg$c51 = function(tokens) {
        return { tokens };
      }, peg$c52 = function(parts) {
        return { tokens: [parts.join("")] };
      }, peg$c53 = peg$otherExpectation("a valid (strict) function parameter"), peg$c54 = /^[^'{}]/, peg$c55 = peg$classExpectation(["'", "{", "}"], true, false), peg$c56 = function(p2) {
        return p2.join("");
      }, peg$c57 = "'", peg$c58 = peg$literalExpectation("'", false), peg$c59 = function(quoted) {
        return quoted;
      }, peg$c60 = function(p2) {
        return "{" + p2.join("") + "}";
      }, peg$c61 = peg$otherExpectation("doubled apostrophe"), peg$c62 = "''", peg$c63 = peg$literalExpectation("''", false), peg$c64 = function() {
        return "'";
      }, peg$c65 = /^[^']/, peg$c66 = peg$classExpectation(["'"], true, false), peg$c67 = "'{", peg$c68 = peg$literalExpectation("'{", false), peg$c69 = function(str) {
        return "{" + str.join("");
      }, peg$c70 = "'}", peg$c71 = peg$literalExpectation("'}", false), peg$c72 = function(str) {
        return "}" + str.join("");
      }, peg$c73 = peg$otherExpectation("escaped string"), peg$c74 = "'#", peg$c75 = peg$literalExpectation("'#", false), peg$c76 = function(str) {
        return "#" + str.join("");
      }, peg$c77 = function(quotedOcto) {
        return quotedOcto[0];
      }, peg$c78 = peg$otherExpectation("plain char"), peg$c79 = /^[^{}#\0-\x08\x0E-\x1F\x7F]/, peg$c80 = peg$classExpectation(["{", "}", "#", ["\0", "\b"], ["", ""], "\x7F"], true, false), peg$c81 = function(octo) {
        return !inPlural[0];
      }, peg$c82 = function(octo) {
        return octo;
      }, peg$c83 = peg$otherExpectation("integer"), peg$c84 = /^[0-9]/, peg$c85 = peg$classExpectation([["0", "9"]], false, false), peg$c86 = peg$otherExpectation("white space"), peg$c87 = /^[\t-\r \x85\u200E\u200F\u2028\u2029]/, peg$c88 = peg$classExpectation([["	", "\r"], " ", "\x85", "\u200E", "\u200F", "\u2028", "\u2029"], false, false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{ line: 1, column: 1 }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }
      function text() {
        return input.substring(peg$savedPos, peg$currPos);
      }
      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }
      function expected(description, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError(
          [peg$otherExpectation(description)],
          input.substring(peg$savedPos, peg$currPos),
          location2
        );
      }
      function error(message, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location2);
      }
      function peg$literalExpectation(text2, ignoreCase) {
        return { type: "literal", text: text2, ignoreCase };
      }
      function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts, inverted, ignoreCase };
      }
      function peg$anyExpectation() {
        return { type: "any" };
      }
      function peg$endExpectation() {
        return { type: "end" };
      }
      function peg$otherExpectation(description) {
        return { type: "other", description };
      }
      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos], p2;
        if (details) {
          return details;
        } else {
          p2 = pos - 1;
          while (!peg$posDetailsCache[p2]) {
            p2--;
          }
          details = peg$posDetailsCache[p2];
          details = {
            line: details.line,
            column: details.column
          };
          while (p2 < pos) {
            if (input.charCodeAt(p2) === 10) {
              details.line++;
              details.column = 1;
            } else {
              details.column++;
            }
            p2++;
          }
          peg$posDetailsCache[pos] = details;
          return details;
        }
      }
      function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
        return {
          start: {
            offset: startPos,
            line: startPosDetails.line,
            column: startPosDetails.column
          },
          end: {
            offset: endPos,
            line: endPosDetails.line,
            column: endPosDetails.column
          }
        };
      }
      function peg$fail(expected2) {
        if (peg$currPos < peg$maxFailPos) {
          return;
        }
        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos;
          peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected2);
      }
      function peg$buildSimpleError(message, location2) {
        return new peg$SyntaxError(message, null, null, location2);
      }
      function peg$buildStructuredError(expected2, found, location2) {
        return new peg$SyntaxError(
          peg$SyntaxError.buildMessage(expected2, found),
          expected2,
          found,
          location2
        );
      }
      function peg$parsestart() {
        var s0, s1;
        s0 = [];
        s1 = peg$parsetoken();
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsetoken();
        }
        return s0;
      }
      function peg$parsetoken() {
        var s0, s1, s2;
        s0 = peg$parseargument();
        if (s0 === peg$FAILED) {
          s0 = peg$parseselect();
          if (s0 === peg$FAILED) {
            s0 = peg$parseplural();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefunction();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 35) {
                  s1 = peg$c0;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c1);
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s2 = peg$c2();
                  if (s2) {
                    s2 = void 0;
                  } else {
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c3();
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parsechar();
                  if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$parsechar();
                    }
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c4(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
        return s0;
      }
      function peg$parseargument() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c6);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseid();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s5 = peg$c7;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c8);
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c9(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseselect() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c6);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseid();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s5 = peg$c10;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c11);
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    if (input.substr(peg$currPos, 6) === peg$c12) {
                      s8 = peg$c12;
                      peg$currPos += 6;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c13);
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c14(s3, s8);
                    }
                    s7 = s8;
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s9 = peg$c10;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c11);
                          }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          if (s10 !== peg$FAILED) {
                            s11 = [];
                            s12 = peg$parseselectCase();
                            if (s12 !== peg$FAILED) {
                              while (s12 !== peg$FAILED) {
                                s11.push(s12);
                                s12 = peg$parseselectCase();
                              }
                            } else {
                              s11 = peg$FAILED;
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse_();
                              if (s12 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                  s13 = peg$c7;
                                  peg$currPos++;
                                } else {
                                  s13 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$c8);
                                  }
                                }
                                if (s13 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c15(s3, s11);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseplural() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c6);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseid();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s5 = peg$c10;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c11);
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    if (input.substr(peg$currPos, 6) === peg$c16) {
                      s8 = peg$c16;
                      peg$currPos += 6;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c17);
                      }
                    }
                    if (s8 === peg$FAILED) {
                      if (input.substr(peg$currPos, 13) === peg$c18) {
                        s8 = peg$c18;
                        peg$currPos += 13;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c19);
                        }
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c20(s3, s8);
                    }
                    s7 = s8;
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s9 = peg$c10;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c11);
                          }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseoffset();
                            if (s11 === peg$FAILED) {
                              s11 = null;
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = [];
                              s13 = peg$parsepluralCase();
                              if (s13 !== peg$FAILED) {
                                while (s13 !== peg$FAILED) {
                                  s12.push(s13);
                                  s13 = peg$parsepluralCase();
                                }
                              } else {
                                s12 = peg$FAILED;
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parse_();
                                if (s13 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 125) {
                                    s14 = peg$c7;
                                    peg$currPos++;
                                  } else {
                                    s14 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$c8);
                                    }
                                  }
                                  if (s14 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c21(s3, s7, s11, s12);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parsefunction() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c6);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseid();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s5 = peg$c10;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c11);
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsefunctionKey();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsefunctionParam();
                        if (s9 === peg$FAILED) {
                          s9 = null;
                        }
                        if (s9 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s10 = peg$c7;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c8);
                            }
                          }
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c22(s3, s7, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseid() {
        var s0, s1, s2;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        if (peg$c24.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c25);
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c24.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c25);
              }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c23);
          }
        }
        return s0;
      }
      function peg$parseselectCase() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseid();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecaseTokens();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c26(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parsepluralCase() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepluralKey();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecaseTokens();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c26(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parsecaseTokens() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c6);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c6);
              }
            }
            peg$silentFails--;
            if (s5 !== peg$FAILED) {
              peg$currPos = s4;
              s4 = void 0;
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsetoken();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsetoken();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s5 = peg$c7;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c8);
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c27(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseoffset() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c29) {
            s2 = peg$c29;
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c30);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c31;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c32);
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsedigits();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c33(s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c28);
          }
        }
        return s0;
      }
      function peg$parsepluralKey() {
        var s0, s1, s2;
        s0 = peg$parseid();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 61) {
            s1 = peg$c34;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c35);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsedigits();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c33(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parsefunctionKey() {
        var s0, s1, s2, s3, s4, s5;
        if (input.substr(peg$currPos, 6) === peg$c36) {
          s0 = peg$c36;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c37);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c38) {
            s0 = peg$c38;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c39);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c40) {
              s0 = peg$c40;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c41);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c42) {
                s0 = peg$c42;
                peg$currPos += 8;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c43);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c44) {
                  s0 = peg$c44;
                  peg$currPos += 7;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c45);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 8) === peg$c46) {
                    s0 = peg$c46;
                    peg$currPos += 8;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c47);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 6) === peg$c12) {
                      s2 = peg$c12;
                      peg$currPos += 6;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c13);
                      }
                    }
                    peg$silentFails--;
                    if (s2 === peg$FAILED) {
                      s1 = void 0;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 6) === peg$c16) {
                        s3 = peg$c16;
                        peg$currPos += 6;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c17);
                        }
                      }
                      peg$silentFails--;
                      if (s3 === peg$FAILED) {
                        s2 = void 0;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 13) === peg$c18) {
                          s4 = peg$c18;
                          peg$currPos += 13;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c19);
                          }
                        }
                        peg$silentFails--;
                        if (s4 === peg$FAILED) {
                          s3 = void 0;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseid();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = peg$currPos;
                            s5 = peg$c48(s4);
                            if (s5) {
                              s5 = void 0;
                            } else {
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c49(s4);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
        return s0;
      }
      function peg$parsefunctionParam() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c10;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c11);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsetoken();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsetoken();
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s4 = peg$c50(s3);
              if (s4) {
                s4 = void 0;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c51(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c10;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c11);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsestrictFunctionParamPart();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsestrictFunctionParamPart();
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c52(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parsestrictFunctionParamPart() {
        var s0, s1, s2, s3;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        if (peg$c54.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c55);
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c54.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c55);
              }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c56(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$parsedoubleapos();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
              s1 = peg$c57;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c58);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseinapos();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s3 = peg$c57;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c58);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c59(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c5;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c6);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsestrictFunctionParamPart();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parsestrictFunctionParamPart();
                }
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s3 = peg$c7;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c8);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c60(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c53);
          }
        }
        return s0;
      }
      function peg$parsedoubleapos() {
        var s0, s1;
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c62) {
          s1 = peg$c62;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c63);
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c64();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c61);
          }
        }
        return s0;
      }
      function peg$parseinapos() {
        var s0, s1, s2;
        s0 = peg$parsedoubleapos();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c66);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c65.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c66);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4(s1);
          }
          s0 = s1;
        }
        return s0;
      }
      function peg$parsequotedCurly() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c67) {
          s1 = peg$c67;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c68);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseinapos();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseinapos();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c57;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c58);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c69(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c70) {
            s1 = peg$c70;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c71);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseinapos();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseinapos();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c57;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c58);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c72(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parsequoted() {
        var s0, s1, s2, s3, s4, s5;
        peg$silentFails++;
        s0 = peg$parsequotedCurly();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c74) {
            s3 = peg$c74;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c75);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseinapos();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseinapos();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s5 = peg$c57;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c58);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c76(s4);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s3 = peg$c2();
            if (s3) {
              s3 = void 0;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c77(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s0 = peg$c57;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c58);
              }
            }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c73);
          }
        }
        return s0;
      }
      function peg$parseplainChar() {
        var s0, s1;
        peg$silentFails++;
        if (peg$c79.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c80);
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c78);
          }
        }
        return s0;
      }
      function peg$parsechar() {
        var s0, s1, s2;
        s0 = peg$parsedoubleapos();
        if (s0 === peg$FAILED) {
          s0 = peg$parsequoted();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s1 = peg$c0;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c1);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s2 = peg$c81(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c82(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseplainChar();
            }
          }
        }
        return s0;
      }
      function peg$parsedigits() {
        var s0, s1, s2;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        if (peg$c84.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c85);
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c84.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c85);
              }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c83);
          }
        }
        return s0;
      }
      function peg$parse_() {
        var s0, s1, s2;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        if (peg$c87.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c88);
          }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c87.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c88);
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c86);
          }
        }
        return s0;
      }
      var inPlural = [false];
      peg$result = peg$startRuleFunction();
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(
          peg$maxFailExpected,
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
        );
      }
    }
    module.exports = {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse
    };
  }
});

// node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key = sourceSymbolKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// node_modules/.pnpm/@lingui+core@3.15.0/node_modules/@lingui/core/esm/core.production.min.js
var i = function(e) {
  return "string" == typeof e;
};
var s = function(e) {
  return "function" == typeof e;
};
var u = /* @__PURE__ */ new Map();
var c = /* @__PURE__ */ new Map();
function f(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
  return function(r) {
    if (i(r) && (r = new Date(r)), n) {
      var a = v(e, t), o = c.get(a);
      if (o)
        return o.format(r);
      var l = new Intl.DateTimeFormat(e, t);
      return c.set(a, l), l.format(r);
    }
    var s2 = new Intl.DateTimeFormat(e, t);
    return s2.format(r);
  };
}
function h(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
  return function(r) {
    if (n) {
      var a = v(e, t), o = u.get(a);
      if (o)
        return o.format(r);
      var l = new Intl.NumberFormat(e, t);
      return u.set(a, l), l.format(r);
    }
    var i2 = new Intl.NumberFormat(e, t);
    return i2.format(r);
  };
}
function v(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = Array.isArray(e) ? e.sort().join("-") : e;
  return "".concat(n, "-").concat(JSON.stringify(t));
}
var m = Object.freeze({ __proto__: null, date: f, number: h });
var g = /\\u[a-fA-F0-9]{4}|\\x[a-fA-F0-9]{2}/g;
function _(e) {
  var t = e.locale, n = e.locales, r = e.values, a = e.formats, o = e.localeData, u2 = function(e2, t2) {
    var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : { plurals: void 0 }, r2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
    t2 = t2 || e2;
    var a2 = n2.plurals, o2 = function(e3) {
      return i(e3) ? r2[e3] || { style: e3 } : e3;
    }, u3 = function(e3, n3) {
      return function(a3) {
        var l = s(n3) ? n3(a3) : n3, u4 = Array.isArray(l) ? l : [l], c2 = Object.keys(r2).length ? o2("number") : {}, f2 = h(t2, c2)(e3);
        return u4.map(function(e4) {
          return i(e4) ? e4.replace("#", f2) : e4;
        });
      };
    };
    return a2 || console.error("Plurals for locale ".concat(e2, " aren't loaded. Use i18n.loadLocaleData method to load plurals for specific locale. Using other plural rule as a fallback.")), { plural: function(e3, t3) {
      var n3 = t3.offset, r3 = void 0 === n3 ? 0 : n3, o3 = _objectWithoutProperties(t3, ["offset"]), i2 = o3[e3] || o3[null == a2 ? void 0 : a2(e3 - r3)] || o3.other;
      return u3(e3 - r3, i2);
    }, selectordinal: function(e3, t3) {
      var n3 = t3.offset, r3 = void 0 === n3 ? 0 : n3, o3 = _objectWithoutProperties(t3, ["offset"]), i2 = o3[e3] || o3[null == a2 ? void 0 : a2(e3 - r3, true)] || o3.other;
      return u3(e3 - r3, i2);
    }, select: function(e3, t3) {
      return t3[e3] || t3.other;
    }, number: function(e3, n3) {
      return h(t2, o2(n3))(e3);
    }, date: function(e3, n3) {
      return f(t2, o2(n3))(e3);
    }, undefined: function(e3) {
      return e3;
    } };
  }(t, n, o, a);
  return function e2(t2, n2, a2) {
    var o2 = r[t2], l = u2[n2](o2, a2), i2 = s(l) ? l(e2) : l;
    return Array.isArray(i2) ? i2.join("") : i2;
  };
}
function d(e, t, n, r) {
  return function(a) {
    var l = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, s2 = _({ locale: t, locales: n, localeData: r, formats: l, values: a }), u2 = function e2(t2) {
      return Array.isArray(t2) ? t2.reduce(function(t3, n2) {
        if (i(n2))
          return t3 + n2;
        var r2 = _slicedToArray(n2, 3), a2 = r2[0], l2 = r2[1], u3 = r2[2], c3 = {};
        null == u3 || i(u3) ? c3 = u3 : Object.keys(u3).forEach(function(t4) {
          c3[t4] = e2(u3[t4]);
        });
        var f2 = s2(a2, l2, c3);
        return null == f2 ? t3 : t3 + f2;
      }, "") : t2;
    }, c2 = u2(e);
    return i(c2) && g.test(c2) ? JSON.parse('"'.concat(c2.trim(), '"')) : i(c2) ? c2.trim() : c2;
  };
}
var p = function() {
  function n() {
    _classCallCheck(this, n), this._events = {};
  }
  return _createClass(n, [{ key: "on", value: function(e, t) {
    var n2 = this;
    return this._hasEvent(e) || (this._events[e] = []), this._events[e].push(t), function() {
      return n2.removeListener(e, t);
    };
  } }, { key: "removeListener", value: function(e, t) {
    if (this._hasEvent(e)) {
      var n2 = this._events[e].indexOf(t);
      ~n2 && this._events[e].splice(n2, 1);
    }
  } }, { key: "emit", value: function(e) {
    for (var t = this, n2 = arguments.length, r = new Array(n2 > 1 ? n2 - 1 : 0), a = 1; a < n2; a++)
      r[a - 1] = arguments[a];
    this._hasEvent(e) && this._events[e].map(function(e2) {
      return e2.apply(t, r);
    });
  } }, { key: "_hasEvent", value: function(e) {
    return Array.isArray(this._events[e]);
  } }]), n;
}();
function y(e) {
  var t = function() {
    if ("undefined" == typeof Reflect || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if ("function" == typeof Proxy)
      return true;
    try {
      return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      })), true;
    } catch (e2) {
      return false;
    }
  }();
  return function() {
    var n, o = _getPrototypeOf(e);
    if (t) {
      var l = _getPrototypeOf(this).constructor;
      n = Reflect.construct(o, arguments, l);
    } else
      n = o.apply(this, arguments);
    return _possibleConstructorReturn(this, n);
  };
}
var b = function(r) {
  _inherits(o, r);
  var a = y(o);
  function o(t) {
    var n;
    return _classCallCheck(this, o), n = a.call(this), n._messages = {}, n._localeData = {}, null != t.missing && (n._missing = t.missing), null != t.messages && n.load(t.messages), null != t.localeData && n.loadLocaleData(t.localeData), null == t.locale && null == t.locales || n.activate(t.locale, t.locales), n;
  }
  return _createClass(o, [{ key: "_loadLocaleData", value: function(e, t) {
    null == this._localeData[e] ? this._localeData[e] = t : Object.assign(this._localeData[e], t);
  } }, { key: "loadLocaleData", value: function(e, t) {
    var n = this;
    null != t ? this._loadLocaleData(e, t) : Object.keys(e).forEach(function(t2) {
      return n._loadLocaleData(t2, e[t2]);
    }), this.emit("change");
  } }, { key: "_load", value: function(e, t) {
    null == this._messages[e] ? this._messages[e] = t : Object.assign(this._messages[e], t);
  } }, { key: "load", value: function(e, t) {
    var n = this;
    null != t ? this._load(e, t) : Object.keys(e).forEach(function(t2) {
      return n._load(t2, e[t2]);
    }), this.emit("change");
  } }, { key: "activate", value: function(e, t) {
    this._locale = e, this._locales = t, this.emit("change");
  } }, { key: "_", value: function(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, r2 = n.message, a2 = n.formats, o2 = n.context;
    i(e) || (t = e.values || t, r2 = e.message, o2 = e.context, e = e.id);
    var l, u2 = !o2 && !this.messages[e], c2 = o2 && !this.messages[o2][e], f2 = c2 || u2, h2 = this._missing;
    return h2 && f2 ? s(h2) ? h2(this._locale, e, o2) : h2 : (f2 && this.emit("missing", { id: e, context: o2, locale: this._locale }), l = o2 && !c2 ? this.messages[o2][e] || r2 || e : this.messages[e] || r2 || e, i(l) && g.test(l) ? JSON.parse('"'.concat(l, '"')) : i(l) ? l : d(l, this._locale, this._locales, this.localeData)(t, a2));
  } }, { key: "date", value: function(e, t) {
    return f(this._locales || this._locale, t)(e);
  } }, { key: "number", value: function(e, t) {
    return h(this._locales || this._locale, t)(e);
  } }, { key: "locale", get: function() {
    return this._locale;
  } }, { key: "locales", get: function() {
    return this._locales;
  } }, { key: "messages", get: function() {
    var e;
    return null !== (e = this._messages[this._locale]) && void 0 !== e ? e : {};
  } }, { key: "localeData", get: function() {
    var e;
    return null !== (e = this._localeData[this._locale]) && void 0 !== e ? e : {};
  } }]), o;
}(p);
function k() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
  return new b(e);
}
var D = k();

// node_modules/.pnpm/@lingui+core@3.15.0/node_modules/@lingui/core/esm/core.development.js
var import_messageformat_parser = __toESM(require_parser(), 1);
var isString = function isString2(s2) {
  return typeof s2 === "string";
};
var isFunction = function isFunction2(f2) {
  return typeof f2 === "function";
};
var numberFormats = /* @__PURE__ */ new Map();
var dateFormats = /* @__PURE__ */ new Map();
function date(locales) {
  var format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var memoize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  return function(value) {
    if (isString(value))
      value = new Date(value);
    if (memoize) {
      var key = cacheKey(locales, format);
      var cachedFormatter = dateFormats.get(key);
      if (cachedFormatter) {
        return cachedFormatter.format(value);
      }
      var _formatter = new Intl.DateTimeFormat(locales, format);
      dateFormats.set(key, _formatter);
      return _formatter.format(value);
    }
    var formatter = new Intl.DateTimeFormat(locales, format);
    return formatter.format(value);
  };
}
function number(locales) {
  var format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var memoize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  return function(value) {
    if (memoize) {
      var key = cacheKey(locales, format);
      var cachedFormatter = numberFormats.get(key);
      if (cachedFormatter) {
        return cachedFormatter.format(value);
      }
      var _formatter2 = new Intl.NumberFormat(locales, format);
      numberFormats.set(key, _formatter2);
      return _formatter2.format(value);
    }
    var formatter = new Intl.NumberFormat(locales, format);
    return formatter.format(value);
  };
}
function cacheKey(locales) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var localeKey = Array.isArray(locales) ? locales.sort().join("-") : locales;
  return "".concat(localeKey, "-").concat(JSON.stringify(options));
}
var formats = Object.freeze({
  __proto__: null,
  date,
  number
});
var UNICODE_REGEX = /\\u[a-fA-F0-9]{4}|\\x[a-fA-F0-9]{2}/g;
var defaultFormats = function defaultFormats2(locale, locales) {
  var localeData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
    plurals: void 0
  };
  var formats3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  locales = locales || locale;
  var plurals = localeData.plurals;
  var style = function style2(format) {
    return isString(format) ? formats3[format] || {
      style: format
    } : format;
  };
  var replaceOctothorpe = function replaceOctothorpe2(value, message) {
    return function(ctx) {
      var msg = isFunction(message) ? message(ctx) : message;
      var norm = Array.isArray(msg) ? msg : [msg];
      var numberFormat = Object.keys(formats3).length ? style("number") : {};
      var valueStr = number(locales, numberFormat)(value);
      return norm.map(function(m2) {
        return isString(m2) ? m2.replace("#", valueStr) : m2;
      });
    };
  };
  if (!plurals) {
    console.error("Plurals for locale ".concat(locale, " aren't loaded. Use i18n.loadLocaleData method to load plurals for specific locale. Using other plural rule as a fallback."));
  }
  return {
    plural: function plural(value, _ref) {
      var _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? 0 : _ref$offset, rules = _objectWithoutProperties(_ref, ["offset"]);
      var message = rules[value] || rules[plurals === null || plurals === void 0 ? void 0 : plurals(value - offset)] || rules.other;
      return replaceOctothorpe(value - offset, message);
    },
    selectordinal: function selectordinal(value, _ref2) {
      var _ref2$offset = _ref2.offset, offset = _ref2$offset === void 0 ? 0 : _ref2$offset, rules = _objectWithoutProperties(_ref2, ["offset"]);
      var message = rules[value] || rules[plurals === null || plurals === void 0 ? void 0 : plurals(value - offset, true)] || rules.other;
      return replaceOctothorpe(value - offset, message);
    },
    select: function select(value, rules) {
      return rules[value] || rules.other;
    },
    number: function number$1(value, format) {
      return number(locales, style(format))(value);
    },
    date: function date$1(value, format) {
      return date(locales, style(format))(value);
    },
    undefined: function undefined$1(value) {
      return value;
    }
  };
};
function context(_ref3) {
  var locale = _ref3.locale, locales = _ref3.locales, values = _ref3.values, formats3 = _ref3.formats, localeData = _ref3.localeData;
  var formatters = defaultFormats(locale, locales, localeData, formats3);
  var ctx = function ctx2(name, type, format) {
    var value = values[name];
    var formatted = formatters[type](value, format);
    var message = isFunction(formatted) ? formatted(ctx2) : formatted;
    return Array.isArray(message) ? message.join("") : message;
  };
  return ctx;
}
function interpolate(translation, locale, locales, localeData) {
  return function(values) {
    var formats3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var ctx = context({
      locale,
      locales,
      localeData,
      formats: formats3,
      values
    });
    var formatMessage = function formatMessage2(message) {
      if (!Array.isArray(message))
        return message;
      return message.reduce(function(message2, token) {
        if (isString(token))
          return message2 + token;
        var _token = _slicedToArray(token, 3), name = _token[0], type = _token[1], format = _token[2];
        var interpolatedFormat = {};
        if (format != null && !isString(format)) {
          Object.keys(format).forEach(function(key) {
            interpolatedFormat[key] = formatMessage2(format[key]);
          });
        } else {
          interpolatedFormat = format;
        }
        var value = ctx(name, type, interpolatedFormat);
        if (value == null)
          return message2;
        return message2 + value;
      }, "");
    };
    var result = formatMessage(translation);
    if (isString(result) && UNICODE_REGEX.test(result))
      return JSON.parse('"'.concat(result.trim(), '"'));
    if (isString(result))
      return result.trim();
    return result;
  };
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function processTokens(tokens) {
  if (!tokens.filter(function(token) {
    return !isString(token);
  }).length) {
    return tokens.join("");
  }
  return tokens.map(function(token) {
    if (isString(token)) {
      return token;
    } else if (token.type === "octothorpe") {
      return "#";
    } else if (token.type === "argument") {
      return [token.arg];
    } else if (token.type === "function") {
      var _param = token.param && token.param.tokens[0];
      var param = typeof _param === "string" ? _param.trim() : _param;
      return [token.arg, token.key, param].filter(Boolean);
    }
    var offset = token.offset ? parseInt(token.offset) : void 0;
    var formatProps = {};
    token.cases.forEach(function(item) {
      formatProps[item.key] = processTokens(item.tokens);
    });
    return [token.arg, token.type, _objectSpread({
      offset
    }, formatProps)];
  });
}
function compile(message) {
  try {
    return processTokens((0, import_messageformat_parser.parse)(message));
  } catch (e) {
    console.error("Message cannot be parsed due to syntax errors: ".concat(message));
    return message;
  }
}
var EventEmitter = function() {
  function EventEmitter2() {
    _classCallCheck(this, EventEmitter2);
    this._events = {};
  }
  _createClass(EventEmitter2, [{
    key: "on",
    value: function on(event, listener) {
      var _this = this;
      if (!this._hasEvent(event))
        this._events[event] = [];
      this._events[event].push(listener);
      return function() {
        return _this.removeListener(event, listener);
      };
    }
  }, {
    key: "removeListener",
    value: function removeListener(event, listener) {
      if (!this._hasEvent(event))
        return;
      var index = this._events[event].indexOf(listener);
      if (~index)
        this._events[event].splice(index, 1);
    }
  }, {
    key: "emit",
    value: function emit(event) {
      var _this2 = this;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (!this._hasEvent(event))
        return;
      this._events[event].map(function(listener) {
        return listener.apply(_this2, args);
      });
    }
  }, {
    key: "_hasEvent",
    value: function _hasEvent(event) {
      return Array.isArray(this._events[event]);
    }
  }]);
  return EventEmitter2;
}();
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var I18n = function(_EventEmitter) {
  _inherits(I18n3, _EventEmitter);
  var _super = _createSuper(I18n3);
  function I18n3(params) {
    var _this;
    _classCallCheck(this, I18n3);
    _this = _super.call(this);
    _this._messages = {};
    _this._localeData = {};
    if (params.missing != null)
      _this._missing = params.missing;
    if (params.messages != null)
      _this.load(params.messages);
    if (params.localeData != null)
      _this.loadLocaleData(params.localeData);
    if (params.locale != null || params.locales != null) {
      _this.activate(params.locale, params.locales);
    }
    return _this;
  }
  _createClass(I18n3, [{
    key: "_loadLocaleData",
    value: function _loadLocaleData(locale, localeData) {
      if (this._localeData[locale] == null) {
        this._localeData[locale] = localeData;
      } else {
        Object.assign(this._localeData[locale], localeData);
      }
    }
  }, {
    key: "loadLocaleData",
    value: function loadLocaleData(localeOrAllData, localeData) {
      var _this2 = this;
      if (localeData != null) {
        this._loadLocaleData(localeOrAllData, localeData);
      } else {
        Object.keys(localeOrAllData).forEach(function(locale) {
          return _this2._loadLocaleData(locale, localeOrAllData[locale]);
        });
      }
      this.emit("change");
    }
  }, {
    key: "_load",
    value: function _load(locale, messages) {
      if (this._messages[locale] == null) {
        this._messages[locale] = messages;
      } else {
        Object.assign(this._messages[locale], messages);
      }
    }
  }, {
    key: "load",
    value: function load(localeOrMessages, messages) {
      var _this3 = this;
      if (messages != null) {
        this._load(localeOrMessages, messages);
      } else {
        Object.keys(localeOrMessages).forEach(function(locale) {
          return _this3._load(locale, localeOrMessages[locale]);
        });
      }
      this.emit("change");
    }
  }, {
    key: "activate",
    value: function activate(locale, locales) {
      {
        if (!this._messages[locale]) {
          console.warn('Messages for locale "'.concat(locale, '" not loaded.'));
        }
        if (!this._localeData[locale]) {
          console.warn('Locale data for locale "'.concat(locale, `" not loaded. Plurals won't work correctly.`));
        }
      }
      this._locale = locale;
      this._locales = locales;
      this.emit("change");
    }
  }, {
    key: "_",
    value: function _2(id) {
      var values = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, message = _ref.message, formats3 = _ref.formats, context2 = _ref.context;
      if (!isString(id)) {
        values = id.values || values;
        message = id.message;
        context2 = id.context;
        id = id.id;
      }
      var messageMissing = !context2 && !this.messages[id];
      var contextualMessageMissing = context2 && !this.messages[context2][id];
      var messageUnreachable = contextualMessageMissing || messageMissing;
      var missing = this._missing;
      if (missing && messageUnreachable) {
        return isFunction(missing) ? missing(this._locale, id, context2) : missing;
      }
      if (messageUnreachable) {
        this.emit("missing", {
          id,
          context: context2,
          locale: this._locale
        });
      }
      var translation;
      if (context2 && !contextualMessageMissing) {
        translation = this.messages[context2][id] || message || id;
      } else {
        translation = this.messages[id] || message || id;
      }
      {
        translation = isString(translation) ? compile(translation) : translation;
      }
      if (isString(translation) && UNICODE_REGEX.test(translation))
        return JSON.parse('"'.concat(translation, '"'));
      if (isString(translation))
        return translation;
      return interpolate(translation, this._locale, this._locales, this.localeData)(values, formats3);
    }
  }, {
    key: "date",
    value: function date$1(value, format) {
      return date(this._locales || this._locale, format)(value);
    }
  }, {
    key: "number",
    value: function number$1(value, format) {
      return number(this._locales || this._locale, format)(value);
    }
  }, {
    key: "locale",
    get: function get() {
      return this._locale;
    }
  }, {
    key: "locales",
    get: function get() {
      return this._locales;
    }
  }, {
    key: "messages",
    get: function get() {
      var _this$_messages$this$;
      return (_this$_messages$this$ = this._messages[this._locale]) !== null && _this$_messages$this$ !== void 0 ? _this$_messages$this$ : {};
    }
  }, {
    key: "localeData",
    get: function get() {
      var _this$_localeData$thi;
      return (_this$_localeData$thi = this._localeData[this._locale]) !== null && _this$_localeData$thi !== void 0 ? _this$_localeData$thi : {};
    }
  }]);
  return I18n3;
}(EventEmitter);
function setupI18n() {
  var params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return new I18n(params);
}
var i18n = setupI18n();

// node_modules/.pnpm/@lingui+core@3.15.0/node_modules/@lingui/core/esm/index.js
var i18n2 = false ? D : i18n;
var setupI18n2 = false ? k : setupI18n;
var formats2 = false ? m : formats;
var I18n2 = false ? b : I18n;
export {
  I18n2 as I18n,
  formats2 as formats,
  i18n2 as i18n,
  setupI18n2 as setupI18n
};
//# sourceMappingURL=@lingui_core.js.map
