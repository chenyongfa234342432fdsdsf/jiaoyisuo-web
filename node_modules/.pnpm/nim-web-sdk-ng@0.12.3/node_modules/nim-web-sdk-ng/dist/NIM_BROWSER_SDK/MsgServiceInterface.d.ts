import { IBaseSendFileOptions, ISendCustomMsgOptions, ISendGeoLocationMsgOptions, ISendTextMsgOptions, ISendTipMsgOptions, StrAnyObj } from './types';
export interface MsgServiceInterface {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送文本消息
     * @locale
     *
     * @locale en
     * Send text messages
     * @locale
     */
    sendTextMsg(options: ISendTextMsgOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送提醒消息
     *
     * 提醒消息用于会话内的状态提醒，如进入会话时出现的欢迎消息，或者会话命中敏感词后的提示消息等等.
     * @locale
     *
     * @locale en
     * Send notifications
     *
     * Reminder messages are used for status reminders in the session, such as the welcome message when entering the session, the prompt message after the session hits a sensitive word, etc.
     * @locale
     */
    sendTipMsg(options: ISendTipMsgOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送地理位置消息
     * @locale
     *
     * @locale en
     * Send geolocation messages
     * @locale
     */
    sendGeoLocationMsg(options: ISendGeoLocationMsgOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送自定义消息
     * @locale
     *
     * @locale en
     * Send custom messages
     * @locale
     */
    sendCustomMsg(options: ISendCustomMsgOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送文件（包含上传文件的功能）
     * @locale
     *
     * @locale en
     * Send files
     * @locale
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送图片消息（包含上传文件的功能）
     * @locale
     *
     * @locale en
     * Send picture messages
     * @locale
     */
    sendImageMsg(options: IBaseSendFileOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送音频消息（包含上传文件的功能）
     * @locale
     *
     * @locale en
     * Send audio messages
     * @locale
     */
    sendAudioMsg(options: IBaseSendFileOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送视频消息（包含上传文件的功能）
     * @locale
     *
     * @locale en
     * Send video messages
     * @locale
     */
    sendVideoMsg(options: IBaseSendFileOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送其他文件消息（包含上传文件的功能）
     * @locale
     *
     * @locale en
     * Send other file messages
     * @locale
     */
    sendFileMsg(options: IBaseSendFileOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 重发某条消息
     * @locale
     *
     * @locale en
     * Resend a message
     * @locale
     */
    resendMsg(options: ResendMsgOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 转发这条消息
     * @locale
     *
     * @locale en
     * Forward the message
     * @locale
     */
    forwardMsg(options: ForwardMsgOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 撤回消息
     *
     * 消息接收方会收到一条类型为 'deleteMsg' 的系统通知,
     * 如果是群消息, 那么群里的所有人都会收到这条系统通知.
     * 如果同时在多个端登录了同一个账号, 那么其它端也会收到这条系统通知.
     * @locale
     *
     * @locale en
     * Recall message
     *
     * The message receiver will receive system notification of the ' deleteMsg ' type,
     * If it is a group message, everyone in the group will receive this system notification.
     * If the same account is logged in on multiple devices at the same time, other devices will also receive this system notification.
     * @locale
     */
    recallMsg(options: RecallMsgOptions): Promise<IMMessage>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 单向删除消息
     *
     * 不同与直接删除消息，单向删除消息后，自己看不到删除的消息，但对方仍能看到，也就是仅删除自己这侧的消息
     *
     * 如果同时在多个端登录了同一个账号, 其他端会收到一个单向删除的事件.
     * @locale
     *
     * @locale en
     * One-way deletion of messages
     *
     * Different from direct deletion of messages, after one-way deletion of messages, you cannot see the deleted messages, but the other party can still see them. In other words, only the messages on your side are deleted.
     *
     * If you log in to the same account on multiple devices at the same time, the current device and the other devices will receive a one-way deletion event.
     * @locale
     */
    deleteSelfMsgs(options: DeleteSelfMsgsOptions): Promise<DeleteSelfMsgsResult[]>;
    /**
     *
     * @Multi_Lang_Tag
     * @locale cn
     * 发送已读标记
     * @locale
     *
     * @locale en
     * Send message receipt for a message
     * @locale
     */
    sendMsgReceipt(options: SendMsgReceiptOptions): Promise<SendMsgReceiptResult | void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 查看这条消息对方是否已读过。
     * 依赖 session 模块，需要使用 session.msgReceiptTime 属性和参数 msg.time 共同判定。
     * @locale
     *
     * @locale en
     * Check whether the other party has read the message.
     * Depending on the session module, you need to use the session.msgReceiptTime attribute and the msg.time parameter to determine whether the other party has read the message.
     * @locale
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送群信息的已读标记
     * @locale
     *
     * @locale en
     * Send message receipt for a group message
     * @locale
     */
    sendTeamMsgReceipt(options: SendTeamMsgReceiptOptions): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 获取已读/未读数
     * @locale
     *
     * @locale en
     * Get the number of persons who have read/unread the message.
     * @locale
     */
    getTeamMsgReads(options: GetTeamMsgReadsOptions): Promise<GetTeamMsgReadsResult>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 获取已读/未读的账号
     * @locale
     *
     * @locale en
     * Get the accounts who have read/unread the message
     * @locale
     */
    getTeamMsgReadAccounts(options: GetTeamMsgReadAccountsOptions): Promise<GetTeamMsgReadAccountsResult>;
}
export declare enum EMsgType {
    text = 0,
    image = 1,
    audio = 2,
    video = 3,
    geo = 4,
    notification = 5,
    file = 6,
    tip = 10,
    robot = 11,
    g2 = 12,
    custom = 100
}
export declare type TMsgType = keyof typeof EMsgType;
export declare enum EMsgScene {
    p2p = 0,
    team = 1,
    superTeam = 5
}
export declare type TMsgScene = keyof typeof EMsgScene;
export declare enum EClientType {
    Android = 1,
    iOS = 2,
    PC = 4,
    WindowsPhone = 8,
    Web = 16,
    Server = 32,
    Mac = 64
}
export declare type TClientType = keyof typeof EClientType;
export declare enum EMsgStatus {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到对方发送的消息，默认（己方未读）
     * @locale
     *
     * @locale en
     * Received the message sent by the other party. The message is unread by the receiver by default.
     * @locale
     */
    unread = 1,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到对方发送的消息，己方已读
     * @locale
     *
     * @locale en
     * Received the message sent by the other party. The receiver has read it.
     * @locale
     */
    read = 2,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 已删
     * @locale
     *
     * @locale en
     * Deleted
     * @locale
     */
    deleted = 3,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送中
     * @locale
     *
     * @locale en
     * Sending…
     * @locale
     */
    sending = 4,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送失败
     * 失败的情况可能又很多种，最常见于网络问题。
     * @locale
     *
     * @locale en
     * Sending failed.
     * Multiple situations will lead to failure. The most common causes are network problems.
     * @locale
     */
    sendFailed = 5,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 已发送完毕
     * @locale
     *
     * @locale en
     * Sent
     * @locale
     */
    sent = 6,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 对方已读发送的内容
     * @locale
     *
     * @locale en
     * The other party has read the message.
     * @locale
     */
    receipt = 7,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被对方拒绝，比如被对方加入黑名单
     * @locale
     *
     * @locale en
     * Rejected by the other party for reasons such as being blocklisted by the other party.
     * @locale
     */
    refused = 10
}
export declare type TMsgStatus = keyof typeof EMsgStatus;
export declare type IMMessage = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息的流向
     *
     * in 表示此消息是收到的消息
     * out 表示此消息是发出的消息
     * @locale
     *
     * @locale en
     * The flow of messages
     *
     * in: The message is a received one.
     * out: The message is an outgoing message. In other words, the message is sent out.
     * @locale
     */
    flow: 'in' | 'out';
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 聊天对象, 账号或者群id
     * @locale
     *
     * @locale en
     * The person that the user chats with, account, or group ID
     * @locale
     */
    target: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息所属的会话的ID
     * @locale
     *
     * @locale en
     * ID of the conversation to which the message belongs
     * @locale
     */
    sessionId: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息发送状态
     *
     * 'sending' 发送中
     * 'success' 发送成功
     * 'fail' 发送失败
     * @locale
     *
     * @locale en
     * Message status
     *
     * 'sending': The message is being sent...
     * 'success’: The message is sent.
     * 'fail’: The message failed to be sent.
     * @locale
     */
    status: TMsgStatus;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 场景（会话类型）
     * @locale
     *
     * @locale en
     * Scenario (conversation type)
     * @locale
     */
    scene: TMsgScene;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息接收方, 帐号或群id
     * @locale
     *
     * @locale en
     * Message recipient: account, or group ID
     * @locale
     */
    to: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息发送方, 帐号
     * @locale
     *
     * @locale en
     * Message sender: account
     * @locale
     */
    from: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送方的设备类型
     * @locale
     *
     * @locale en
     * Sender's device type
     * @locale
     */
    fromClientType?: TClientType;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送端设备id
     * @locale
     *
     * @locale en
     * Sender device ID
     * @locale
     */
    fromDeviceId?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息发送方的昵称
     * @locale
     *
     * @locale en
     * The nickname of the sender of the message
     * @locale
     */
    fromNick?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息发送成功的时间戳(单位毫秒)
     * @locale
     *
     * @locale en
     * Timestamp when the message was sent successfully (unit: milliseconds)
     * @locale
     */
    time: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 用户最后更新时间
     * @locale
     *
     * @locale en
     * User’s last update time
     * @locale
     */
    userUpdateTime: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息类型
     * @locale
     *
     * @locale en
     * Message type
     * @locale
     */
    type: TMsgType;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息的文本内容
     * @locale
     *
     * @locale en
     * Text content of the message
     * @locale
     */
    body: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 附加消息
     *
     * 像是 file，geo 类型的消息，文本内容为空，在附加消息里会存在一个对象代表其内容
     * @locale
     *
     * @locale en
     * Additional message
     *
     * For file and geolocation messages, the text content is empty. Instead, there will be an object in the additional message to represent its content
     * @locale
     */
    attach?: StrAnyObj;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * sdk 端测唯一标识，可做主键使用
     * @locale
     *
     * @locale en
     * Unique identifier of the message on the client side
     * @locale
     */
    idClient: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息服务器测的标识
     *
     * 它并不一定存在，故而这条消息的唯一标识请选用 idClient
     * @locale
     *
     * @locale en
     * Unique identifier of the message on the server side
     *
     * Because the identifier might not exist, please use idClient as the unique identifier of the message.
     * @locale
     */
    idServer?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 扩展字段
     * @locale
     *
     * @locale en
     * Extension field
     * @locale
     */
    ext?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 服务器第三方回调的扩展字段
     * @locale
     *
     * @locale en
     * Extension fields for server’s third-party callbacks
     * @locale
     */
    callbackExt?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 开发者自定义的消息子类型，格式为大于0的整数
     * @locale
     *
     * @locale en
     * Developer-defined message subtype (format: integer greater than 0)
     * @locale
     */
    subType?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 通知属性
     * @locale
     *
     * @locale en
     * Notification attributes
     * @locale
     */
    feature: TMsgFeature;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息的杂项设置
     * @locale
     *
     * @locale en
     * Miscellaneous settings for messages
     * @locale
     */
    setting?: TMsgSetting;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 反垃圾相关配置
     * @locale
     *
     * @locale en
     * Anti-spam related configurations
     * @locale
     */
    antiSpamInfo?: TMsgAntiSpamInfo;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 推送相关配置
     * @locale
     *
     * @locale en
     * Configurations related to push notifications
     * @locale
     */
    pushInfo?: TMsgPushInfo;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 群组特化的杂项配置
     * @locale
     *
     * @locale en
     * Configuration available only when the “scene” field is set to team or superTeam
     * @locale
     */
    teamSpecializationInfo?: TMsgTeamSpecializationInfo;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * thread 消息的相关字段。
     * 这里举例回复了多次的消息：消息C1 的 replyMsg 是消息B1，消息C1 的 threadMsg 是消息A
     *
     * 消息A
     *  ｜   \
     * 消息B1  消息B2
     *  ｜
     * 消息C1
     * @locale
     *
     * @locale en
     * Fields related to threaded messages
     * Here is an example of a message that has been replied to many times: replyMsg of message C1 is message B1, and threadMsg of message C1 is message A
     *
     * message A
     * ｜ \
     * message B1 message B2
     * ｜
     * message C1
     * @locale
     */
    threadMessageInfo?: TMsgThreadMsgInfo;
};
/**
 * @Multi_Lang_Tag
 * @locale cn
 * thread 消息的相关字段。
 * 这里举例回复了多次的消息：消息C1 的 replyMsg 是消息B1，消息C1 的 threadMsg 是消息A
 *
 * 消息A
 *  ｜   \
 * 消息B1  消息B2
 *  ｜
 * 消息C1
 * @locale
 *
 * @locale en
 * Fields related to threaded messages
 * Here is an example of a message that has been replied to many times: replyMsg of message C1 is message B1, and threadMsg of message C1 is message A
 *
 * message A
 * ｜ \
 * message B1 message B2
 * ｜
 * message C1
 * @locale
 */
export declare type TMsgThreadMsgInfo = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被回复消息的发送者账号
     * @locale
     *
     * @locale en
     * Account who sent replyMsg
     * @locale
     */
    replyMsgFromAccount?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被回复消息的接受者账号
     * @locale
     *
     * @locale en
     * Account who received replyMsg
     * @locale
     */
    replyMsgToAccount?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被回复消息的时间
     * @locale
     *
     * @locale en
     * Time when replyMsg was sent
     * @locale
     */
    replyMsgTime?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被回复消息的idServer
     * @locale
     *
     * @locale en
     * Message ID (generated by the IM server) of replyMsg
     * @locale
     */
    replyMsgIdServer?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被回复消息的idClient
     * @locale
     *
     * @locale en
     * Message ID (generated by the Client) of replyMsg
     * @locale
     */
    replyMsgIdClient?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * thread 消息的发送者账号
     * @locale
     *
     * @locale en
     * Account who sent threadMsg
     * @locale
     */
    threadMsgFromAccount?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * thread消息的接受者账号
     * @locale
     *
     * @locale en
     * Account who received threadMsg
     * @locale
     */
    threadMsgToAccount?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * thread消息的时间
     * @locale
     *
     * @locale en
     * Time when threadMsg was sent.
     * @locale
     */
    threadMsgTime?: number;
    threadMsgIdServer?: string;
    threadMsgIdClient?: string;
};
export declare enum EMsgFeature {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 默认
     * @locale
     *
     * @locale en
     * Default
     * @locale
     */
    default = 0,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 离线消息
     * @locale
     *
     * @locale en
     * Offline messages
     * @locale
     */
    leave = 1,
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 漫游消息
     *
     * @locale
     *
     * @locale en
     * Roaming messages
     * @locale
     */
    roam = 2
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步消息
     * @locale
     *
     * @locale en
     * Sync messages
     * @locale
     */
    /**
     * 透传消息
     */
}
export declare type TMsgFeature = keyof typeof EMsgFeature;
export declare type TMsgTeamSpecializationInfo = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 群组消息强推开关，默认 false，强推全员设置 true
     * 举例：群里艾特人的场景，只需要通知某几个账号知道
     * @locale
     *
     * @locale en
     * Whether to force push group messages. The default value is false, representing that the group messages will not be force pushed to members. You can set it to true.
     * @locale
     */
    needForcePush?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 强推的成员账号
     *
     * 例：'["id1", "id2"]'
     * 注：如果要设置为强推所有成员，则将此参数设置为 "#%@all@%#"
     * @locale
     *
     * @locale en
     * Accounts of group members to whom group messages need to be force pushed.
     *
     * Example: '["id1", "id2"]'
     * Note: If you want group messages to be force pushed to all group members, set this parameter to "#%@all@%#"
     * @locale
     */
    forcePushIDsList?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 强推文本（可扩展为区别与普通推送的推送文本），长度限制 150 字符
     * @locale
     *
     * @locale en
     * Text of the group messages that are force pushed to group members (can be customized to be different from normal push text). The length is limited to 150 characters.
     * @locale
     *
     */
    pushContent?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 群消息是否需要已读业务, 默认 false
     *
     * 注:
     * 1. 发送方在发送消息时这个字段若传 true
     * 2. 那么接收方可以调用 sendTeamMsgReceipt 来标识消息 receipt 已读。
     * 3. 发送方就会接到事件 teamMsgReceipts 代表接收方已读了发送方的消息.
     * @locale
     *
     * @locale en
     * Whether the group messages need message receipts (message read or unread).
     * @locale
     */
    needACK?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否已经发送群消息已读回执。（端测维护此字段）
     * 若调用 sendTeamMsgReceipt，会对此消息的 teamSpecializationInfo.isACKSent 标记为 true。
     *
     * 注：当 db 开启才能生效
     * @locale
     *
     * @locale en
     * Whether the read receipts for group messages have been sent. (the application side maintains this field)
     * If sendTeamMsgReceipt is called, teamSpecializationInfo.isACKSent of this message will be marked as true.
     *
     * Note: Not supported currently.
     * @locale
     */
    isACKSent: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 群已读消息快照大小(即消息发送时的群人数-1)
     * @locale
     *
     * @locale en
     * Snapshot size of group messages that have been read (that is, the result of “the number of group members at the time when the message is sent” minus “1”)
     * @locale
     */
    ackSnapshot: number;
};
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 推送相关配置
 * @locale
 *
 * @locale en
 * Push notification related configurations
 * @locale
 */
export declare type TMsgPushInfo = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否需要推送 107
     * @locale
     *
     * @locale en
     * Whether push notifications is required  107
     * @locale
     */
    needPush?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否要做消息计数（推送消息后的 app 角标）109
     * @locale
     *
     * @locale en
     * Whether to do message count (app corner mark that appears after messages are pushed) 109
     * @locale
     */
    needPushBadge?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 需要推送昵称    // 110
     * @locale
     *
     * @locale en
     * Need to push nickname // 110
     * @locale
     */
    needPushNick?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 推送文本，不填则不推送
     * @locale
     *
     * @locale en
     * Push text. If the value is not entered, the text will not be pushed.
     * @locale
     */
    pushApnsText?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 第三方自定义的推送属性，长度2048
     * @locale
     *
     * @locale en
     * Attributes of third-party custom push notifications (length: 2048 bytes)
     * @locale
     */
    pushPayload?: string;
};
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 反垃圾相关配置
 * @locale
 *
 * @locale en
 * Anti-spam related configurations
 * @locale
 */
export declare type TMsgAntiSpamInfo = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * (功能暂时不开放)是否需要使用自定义反垃圾字段 antiSpamContent, 缺省false
     * 注：此字段与 antiSpamContent 联合起来使用
     * @locale
     *
     * @locale en
     * (The function is temporarily unavailable) Whether you need to use the custom anti-spam field antiSpamContent (default value: false)
     * Note: If you set the needAntiSpam field, you must set the antiSpamContent field also.
     * @locale
     */
    needAntiSpam?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 开发者自定义的反垃圾字段，长度限制 5000。格式如 '{"type":1,"data":"YOUR_DATA_KEY"}'
     * @locale
     *
     * @locale en
     * Developer-defined anti-spam field, the length is limited to 5,000 bytes. Format example: '{"type":1,"data":"YOUR_DATA_KEY"}'
     * @locale
     */
    antiSpamContent?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 用户配置的对某些单条消息另外的反垃圾的业务ID
     * @locale
     *
     * @locale en
     * User-configured additional anti-spam service IDs for some messages
     * @locale
     */
    antiSpamBIZID?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否命中客户端反垃圾
     * @locale
     *
     * @locale en
     * Whether spam is detected
     * @locale
     */
    clientAntispamHitting?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 单条消息是否使用易盾反垃圾。
     * 默认 0: (在开通易盾的情况下)不过易盾反垃圾。
     * 其他值都是按照原来的规则
     * @locale
     *
     * @locale en
     * Whether to use GuardEase anti-spam for a message.
     * Default 0: Use Client anti-spam in the case of GuardEase having been activated)
     * Other values follow the original rules
     * @locale
     */
    antiSpamUsingYidun?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 易盾check的回调URL，目前仅支持Audio类型的消息，最长256个字符，如果不合法则忽略该参数
     * @locale
     *
     * @locale en
     * The callback URL that GuardEase checks. Currently, only messages (up to 256 characters) of the “Audio” type are supported. If the field is invalid, it will not take effect.
     * @locale
     */
    yidunCallbackURL?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 易盾反垃圾增强反作弊专属字段, 限定使用 JSON 序列化字符串，长度限制1024
     * @locale
     *
     * @locale en
     * GuardEase’s exclusive field for enhanced anti-cheating (format: JSON serialized string, length limit: 1,024 bytes).
     * @locale
     */
    yidunAntiCheating?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 易盾反垃圾扩展字段，限制json，长度限制1024
     * @locale
     *
     * @locale en
     * GuardEase anti-spam extension field (format: JSON , length limit 1,024 bytes)
     * @locale
     */
    yidunAntiSpamExtension?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 易盾反垃圾返回的结果字段。
     * 若开启了易盾反垃圾，并且针对文本或图片如果被反垃圾策略匹配中，端测会透传此反垃圾结果字段返回。
     * 格式为 JSON 序列化的字符串
     * @locale
     *
     * @locale en
     * The result field returned by GuardEase Anti-Spam .
     * When GuardEase anti-spam is enabled and spams on the texts or images are detected, the application side will transparently transmit this anti-spam result field and return it.
     * formatted as JSON serialized string
     * @locale
     */
    yidunAntiSpamResult?: string;
};
export declare type TMsgSetting = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否为重发的消息
     * @locale
     *
     * @locale en
     * Whether it is resent
     * @locale
     */
    resendFlag?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * (可选) 指向自定义抄送的配置
     * @locale
     *
     * @locale en
     * (optional) custom data sync configuration
     * @locale
     */
    envConfig?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否存云端消息历史，缺省则 true
     * @locale
     *
     * @locale en
     * Whether to store historical messages on the cloud (default value: true)
     * @locale
     */
    needSaveHistory?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 该消息是否支持漫游 缺省则 true
     * @locale
     *
     * @locale en
     * Whether the message supports roaming (default value: true)
     * @locale
     */
    needRoaming?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否支持离线消息，缺省则 true
     * @locale
     *
     * @locale en
     * Whether to support offline messages (default value: true)
     * @locale
     */
    needOffline?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 该消息是否支持发送者多端同步
     * @locale
     *
     * @locale en
     * Whether the message supports multi-device synchronization for the sender
     * @locale
     */
    needSelfSync?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否要抄送
     * @locale
     *
     * @locale en
     * Whether the server’s conversation list needs to be refreshed (0: No, 1: Yes; default value: 1; this parameter will be determined only when offline messages are stored).
     * @locale
     */
    needRouted?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否需要刷新服务器会话列表，0:否，1:是；只有消息存离线的情况下，才会判断该参数，缺省：1
     * @locale
     *
     * @locale en
     * Whether the message should be muted on the recipient side. This field is returned by the server, and it does not need to be set on the application side.
     * @locale
     */
    needUpdateSession?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 该消息在接收方是否应该被静音。此字段服务器返回，端测不需要自己设置
     * @locale
     *
     * @locale en
     * Whether the message should be muted on the recipient side. This field is returned by the server, and it does not need to be set on the application side.
     * @locale
     */
    isMuted?: boolean;
};
export declare type ForwardMsgOptions = {
    scene: TMsgScene;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 转发的目标，账号或者群id
     * @locale
     *
     * @locale en
     * Forwarding target: account or group ID
     * @locale
     */
    to: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 待转发的消息对象
     * @locale
     *
     * @locale en
     * The message object to be forwarded
     * @locale
     */
    msg: IMMessage;
};
export declare type ResendMsgOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 请传入完整的消息对象
     * @locale
     *
     * @locale en
     * Please pass in the complete message object
     * @locale
     */
    msg: IMMessage;
};
export declare type RecallMsgOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 要撤回的消息对象
     * @locale
     *
     * @locale en
     * The message object to be recalled
     * @locale
     */
    msg: IMMessage;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 自定义推送文案
     * @locale
     *
     * @locale en
     * Custom push text
     * @locale
     */
    apnsText?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 第三方自定义的推送属性，限制使用 JSON 格式化的字符串
     * @locale
     *
     * @locale en
     * Third-party custom push properties (only JSON-formatted strings are allowed)
     * @locale
     */
    pushPayload?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 附言
     * @locale
     *
     * @locale en
     * Postscript
     * @locale
     */
    ps?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 附加信息，推荐使用 JSON 格式化字符串
     * @locale
     *
     * @locale en
     * Additional information, JSON formatted string is recommended
     * @locale
     */
    attach?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 抄送环境
     * @locale
     *
     * @locale en
     * Data synchronization environment
     * @locale
     */
    env?: string;
};
export declare type DeleteSelfMsgsOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 待删除的消息对象
     * @locale
     *
     * @locale en
     * The message object to be deleted
     * @locale
     */
    msgs: IMMessage[];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 扩展字段
     * @locale
     *
     * @locale en
     * Extension field
     * @locale
     */
    ext?: string;
};
export declare type DeleteSelfMsgsResult = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 删除时间
     * @locale
     *
     * @locale en
     * Deletion time
     * @locale
     */
    deletedTime: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 此消息的发送者
     * @locale
     *
     * @locale en
     * Sender of the message
     * @locale
     */
    from: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 此消息的 idClient
     * @locale
     *
     * @locale en
     * idClient of the message
     * @locale
     */
    idClient: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 此消息的 idServer
     * @locale
     *
     * @locale en
     * idServer of the message
     * @locale
     */
    idServer: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 此消息的场景，只有 p2p, team ，超大群暂时不允许单向删除
     * @locale
     *
     * @locale en
     * The message is only allowed to be one-way deleted in one-to-one chat and group chat (normal group). One-way deletion is not allowed in super groups.
     * @locale
     */
    scene: 'p2p' | 'team';
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 此消息的发送时间
     * @locale
     *
     * @locale en
     * When this message was sent
     * @locale
     */
    time: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 此消息的接收者
     * @locale
     *
     * @locale en
     * Recipient of this message
     * @locale
     */
    to: string;
};
export declare type SendMsgReceiptOptions = {
    msg: IMMessage;
};
export declare type SendMsgReceiptResult = {
    to: string;
    idClient: string;
    time: number;
};
export declare type SendTeamMsgReceiptOptions = {
    teamMsgReceipts: NIMETeamMsgReceiptsQueryOptions[];
};
export declare type GetTeamMsgReadsOptions = {
    teamMsgReceipts: NIMETeamMsgReceiptsQueryOptions[];
};
export declare type GetTeamMsgReadAccountsOptions = {
    teamMsgReceipt: NIMETeamMsgReceiptsQueryOptions;
};
export declare type NIMETeamMsgReceiptsQueryOptions = {
    teamId: string;
    idServer: string;
    idClient: string;
};
export declare type GetTeamMsgReadsResult = {
    teamId: string;
    idServer: string;
    idClient: string;
    read: number;
    unread: number;
}[];
export declare type GetTeamMsgReadAccountsResult = {
    readAccounts: string[];
    teamMsgReceipt: {
        teamId: string;
        idClient: string;
    };
    unreadAccounts: string[];
};
export declare type TeamMsgReceipt = {
    teamId: string;
    idServer: string;
    read: number;
    unread: number;
    idClient: string;
    account: string;
};
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 广播消息定义
 * @locale
 *
 * @locale en
 * @locale
 */
export declare type NIM_BroadcastMessage = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息内容
     * @locale
     *
     * @locale en
     * @locale
     */
    body: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 消息时间戳
     * @locale
     *
     * @locale en
     * @locale
     */
    time: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 广播消息 id
     * @locale
     *
     * @locale en
     * @locale
     */
    id: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 该消息的发送者账号（account id）
     * @locale
     *
     * @locale en
     * @locale
     */
    fromAccid: string;
};
