"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPageAssets = void 0;
const utils_1 = require("../utils");
const retrievePageAssets_1 = require("../retrievePageAssets");
const path_1 = __importDefault(require("path"));
const inferMediaType_1 = require("../html/inferMediaType");
const getManifestEntry_1 = require("../getManifestEntry");
async function getPageAssets(pageContext, clientDependencies, clientEntries, isPreRendering) {
    const isDev = !isPreRendering && !pageContext._isProduction;
    let assetUrls;
    let clientEntriesSrc;
    if (isDev) {
        const viteDevServer = pageContext._viteDevServer;
        (0, utils_1.assert)(viteDevServer);
        clientEntriesSrc = clientEntries.map((clientEntry) => resolveClientEntriesDev(clientEntry, viteDevServer));
        assetUrls = await (0, retrievePageAssets_1.retrieveAssetsDev)(clientDependencies, viteDevServer);
    }
    else {
        const clientManifest = pageContext._manifestClient;
        (0, utils_1.assert)(clientManifest);
        clientEntriesSrc = clientEntries.map((clientEntry) => resolveClientEntriesProd(clientEntry, clientManifest));
        assetUrls = await (0, retrievePageAssets_1.retrieveAssetsProd)(clientDependencies, clientManifest, pageContext._includeAssetsImportedByServer);
    }
    let pageAssets = [];
    clientEntriesSrc.forEach((clientEntrySrc) => {
        pageAssets.push({
            src: clientEntrySrc,
            assetType: 'script',
            mediaType: 'text/javascript',
            preloadType: null
        });
    });
    assetUrls.forEach((src) => {
        const { mediaType = null, preloadType = null } = (0, inferMediaType_1.inferMediaType)(src) || {};
        const assetType = mediaType === 'text/css' ? 'style' : 'preload';
        if (isDev && mediaType === 'text/css') {
            // https://github.com/brillout/vite-plugin-ssr/issues/449
            if (src.endsWith('?inline')) {
                return;
            }
            // https://github.com/brillout/vite-plugin-ssr/issues/401
            src = src + '?direct';
        }
        pageAssets.push({
            src,
            assetType,
            mediaType,
            preloadType
        });
    });
    pageAssets = pageAssets.map((pageAsset) => {
        const baseUrlAssets = pageContext._baseAssets || pageContext._baseUrl;
        pageAsset.src = (0, utils_1.prependBaseUrl)((0, utils_1.normalizePath)(pageAsset.src), baseUrlAssets);
        return pageAsset;
    });
    sortPageAssetsForHttpPush(pageAssets);
    return pageAssets;
}
exports.getPageAssets = getPageAssets;
function sortPageAssetsForHttpPush(pageAssets) {
    pageAssets.sort((0, utils_1.higherFirst)(({ assetType, preloadType }) => {
        let priority = 0;
        // CSS has highest priority
        if (assetType === 'style')
            return priority;
        priority--;
        if (preloadType === 'style')
            return priority;
        priority--;
        // Visual assets have high priority
        if (preloadType === 'font')
            return priority;
        priority--;
        if (preloadType === 'image')
            return priority;
        priority--;
        // JavaScript has lowest priority
        if (assetType === 'script')
            return priority - 1;
        if (preloadType === 'script')
            return priority - 2;
        return priority;
    }));
}
function resolveClientEntriesDev(clientEntry, viteDevServer) {
    let root = viteDevServer.config.root;
    (0, utils_1.assert)(root);
    root = (0, utils_1.toPosixPath)(root);
    // The `?import` suffix is needed for MDX to be transpiled:
    //   - Not transpiled: `/pages/markdown.page.mdx`
    //   - Transpiled: `/pages/markdown.page.mdx?import`
    // But `?import` doesn't work with `/@fs/`:
    //   - Not transpiled: /@fs/home/runner/work/vite-plugin-ssr/vite-plugin-ssr/examples/react-full/pages/markdown.page.mdx
    //   - Not transpiled: /@fs/home/runner/work/vite-plugin-ssr/vite-plugin-ssr/examples/react-full/pages/markdown.page.mdx?import
    if (clientEntry.endsWith('?import')) {
        (0, utils_1.assert)(clientEntry.startsWith('/'));
        return clientEntry;
    }
    (0, utils_1.assertPosixPath)(clientEntry);
    let filePath;
    if (!clientEntry.startsWith('@@vite-plugin-ssr/')) {
        (0, utils_1.assert)(path_1.default.posix.isAbsolute(clientEntry));
        filePath = path_1.default.posix.join(root, clientEntry);
    }
    else {
        const req = require; // Prevent webpack from bundling client code
        const res = req.resolve;
        // Current file: node_modules/vite-plugin-ssr/dist/cjs/node/html/injectAssets.js
        filePath = (0, utils_1.toPosixPath)(res(clientEntry.replace('@@vite-plugin-ssr/', '../../../../')));
    }
    if (!filePath.startsWith('/')) {
        (0, utils_1.assert)(process.platform === 'win32');
        filePath = '/' + filePath;
    }
    filePath = '/@fs' + filePath;
    return filePath;
}
function resolveClientEntriesProd(clientEntry, clientManifest) {
    const entry = (0, getManifestEntry_1.getManifestEntry)(clientEntry, clientManifest);
    (0, utils_1.assert)(entry);
    const { manifestEntry } = entry;
    (0, utils_1.assert)(manifestEntry.isEntry || manifestEntry.isDynamicEntry, { clientEntry });
    let { file } = manifestEntry;
    (0, utils_1.assert)(!file.startsWith('/'));
    return '/' + file;
}
