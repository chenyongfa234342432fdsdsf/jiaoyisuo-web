export { route };
export { loadPageRoutes } from './route/loadPageRoutes';
export { isErrorPageId, getErrorPageId } from './route/error-page';
export type { PageRoutes, PageContextForRoute, RouteMatches };
import type { PageFile } from './getPageFiles';
import { PageContextUrlSource } from './addComputedUrlProps';
import { PageRoutes, RouteType } from './route/loadPageRoutes';
declare type PageContextForRoute = PageContextUrlSource & {
    _pageFilesAll: PageFile[];
    _allPageIds: string[];
};
declare type RouteMatch = {
    pageId: string;
    routeString?: string;
    precedence?: number | null;
    routeType: RouteType;
    routeParams: Record<string, string>;
};
declare type RouteMatches = 'CUSTOM_ROUTE' | RouteMatch[];
declare function route(pageContext: PageContextForRoute): Promise<{
    pageContextAddendum: {
        _pageId: string | null;
        routeParams: Record<string, string>;
        _routingProvidedByOnBeforeRouteHook: boolean;
        _routeMatches: RouteMatches;
    } & Record<string, unknown>;
}>;
