"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveConfigVps = void 0;
const assertConfigVps_1 = require("./assertConfigVps");
function resolveConfigVps(fromPluginOptions, fromViteConfig) {
    assertUserInputFromPluginOptions(fromPluginOptions);
    assertUserInputFromViteConfig(fromViteConfig);
    const vitePluginSsr = {
        disableAutoFullBuild: fromPluginOptions.disableAutoFullBuild ?? fromViteConfig.disableAutoFullBuild ?? false,
        pageFiles: {
            include: [...(fromPluginOptions.pageFiles?.include ?? []), ...(fromViteConfig.pageFiles?.include ?? [])]
        },
        prerender: resolvePrerenderOptions(fromPluginOptions, fromViteConfig),
        includeCSS: fromPluginOptions.includeCSS ?? fromViteConfig.includeCSS ?? [],
        includeAssetsImportedByServer: fromPluginOptions.includeAssetsImportedByServer ?? fromViteConfig.includeAssetsImportedByServer ?? false
    };
    (0, assertConfigVps_1.assertConfigVpsResolved)({ vitePluginSsr });
    return vitePluginSsr;
}
exports.resolveConfigVps = resolveConfigVps;
function resolvePrerenderOptions(fromPluginOptions, fromViteConfig) {
    let prerender = false;
    if (fromPluginOptions.prerender || fromViteConfig.prerender) {
        const prerenderUserOptions = typeof fromPluginOptions.prerender === 'boolean' ? {} : fromPluginOptions.prerender ?? {};
        const prerenderViteConfig = typeof fromViteConfig.prerender === 'boolean' ? {} : fromViteConfig.prerender ?? {};
        prerender = {
            partial: prerenderUserOptions.partial ?? prerenderViteConfig.partial ?? false,
            noExtraDir: prerenderUserOptions.noExtraDir ?? prerenderViteConfig.noExtraDir ?? false,
            parallel: prerenderUserOptions.parallel ?? prerenderViteConfig.parallel ?? true,
            disableAutoRun: prerenderUserOptions.disableAutoRun ?? prerenderViteConfig.disableAutoRun ?? false
        };
    }
    return prerender;
}
function assertUserInputFromPluginOptions(fromPluginOptions) {
    (0, assertConfigVps_1.assertConfigVpsUser)(fromPluginOptions, ({ configPathInObject, configProp }) => `[vite.config.js][ssr({ ${configPathInObject} })] Configuration \`${configProp}\``);
}
function assertUserInputFromViteConfig(fromViteConfig) {
    (0, assertConfigVps_1.assertConfigVpsUser)(fromViteConfig, ({ configPath }) => `vite.config.js#vitePluginSsr.${configPath}`);
}
