"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = command;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chalk = _interopRequireDefault(require("chalk"));

var _commander = _interopRequireDefault(require("commander"));

var _conf = require("@lingui/conf");

var _catalog = require("./api/catalog");

var _detect = require("./api/detect");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function command(_x, _x2) {
  return _command.apply(this, arguments);
}

function _command() {
  _command = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(config, options) {
    var catalogs, catalogStats;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // `react-app` babel plugin used by CRA requires either BABEL_ENV or NODE_ENV to be
            // set. We're setting it here, because lingui macros are going to use them as well.
            if (!process.env.BABEL_ENV && !process.env.NODE_ENV) {
              process.env.BABEL_ENV = "development";
            } // We need macros to keep imports, so extract-messages plugin know what componets
            // to collect. Users usually use both BABEN_ENV and NODE_ENV, so it's probably
            // safer to introduce a new env variable. LINGUI_EXTRACT=1 during `lingui extract`


            process.env.LINGUI_EXTRACT = "1";
            options.verbose && console.error("Extracting messages from source filesâ€¦");
            catalogs = (0, _catalog.getCatalogs)(config);
            catalogStats = {};
            _context2.next = 7;
            return Promise.all(catalogs.map( /*#__PURE__*/function () {
              var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(catalog) {
                var catalogTemplate;
                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return catalog.makeTemplate(_objectSpread(_objectSpread({}, options), {}, {
                          orderBy: config.orderBy,
                          projectType: (0, _detect.detect)()
                        }));

                      case 2:
                        catalogTemplate = catalog.readTemplate();

                        if (catalogTemplate !== null && catalogTemplate !== undefined) {
                          catalogStats[catalog.templateFile] = Object.keys(catalogTemplate).length;
                        }

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x3) {
                return _ref.apply(this, arguments);
              };
            }()));

          case 7:
            Object.entries(catalogStats).forEach(function (_ref2) {
              var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
                  key = _ref3[0],
                  value = _ref3[1];

              console.log("Catalog statistics for ".concat(_chalk.default.bold(key), ": ").concat(_chalk.default.green(value), " messages"));
              console.log();
            });
            return _context2.abrupt("return", true);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _command.apply(this, arguments);
}

if (require.main === module) {
  _commander.default.option("--config <path>", "Path to the config file").option("--verbose", "Verbose output").parse(process.argv);

  var config = (0, _conf.getConfig)({
    configPath: _commander.default.config || process.env.LINGUI_CONFIG
  });
  var result = command(config, {
    verbose: _commander.default.verbose || false,
    configPath: _commander.default.config || process.env.LINGUI_CONFIG
  }).then(function () {
    if (!result) process.exit(1);
  });
}