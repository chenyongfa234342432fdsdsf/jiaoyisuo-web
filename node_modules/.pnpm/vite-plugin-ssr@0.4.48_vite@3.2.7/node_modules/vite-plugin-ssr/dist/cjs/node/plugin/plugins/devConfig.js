"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.devConfig = void 0;
const utils_1 = require("../utils");
const helpers_1 = require("../helpers");
const determineOptimizeDepsEntries_1 = require("./devConfig/determineOptimizeDepsEntries");
const getGlobRoots_1 = require("./generateImportGlobs/getGlobRoots");
const path_1 = __importDefault(require("path"));
function devConfig() {
    return [
        {
            name: 'vite-plugin-ssr:devConfig',
            apply: (0, helpers_1.apply)('dev'),
            config: () => ({
                ssr: { external: ['vite-plugin-ssr'] },
                optimizeDeps: {
                    exclude: [
                        // We exclude the client code to support `import.meta.glob()`
                        'vite-plugin-ssr/client',
                        'vite-plugin-ssr/client/router',
                        'vite-plugin-ssr/routing',
                        // We also have to exclude these because of `pnpm`
                        '@brillout/json-serializer/parse',
                        '@brillout/json-serializer/stringify'
                    ]
                }
            }),
            async configResolved(config) {
                addOptimizeDepsEntries(config, await (0, determineOptimizeDepsEntries_1.determineOptimizeDepsEntries)(config));
                await determineFsAllowList(config);
            }
        },
        {
            name: 'vite-plugin-ssr:devConfig:serverMiddleware',
            apply: (0, helpers_1.apply)('dev', { skipMiddlewareMode: true, onlyViteCli: true }),
            configureServer(server) {
                return () => {
                    (0, helpers_1.addSsrMiddleware)(server.middlewares);
                };
            }
        }
    ];
}
exports.devConfig = devConfig;
function addOptimizeDepsEntries(config, entries) {
    const total = [];
    const val = config.optimizeDeps.entries;
    if (typeof val === 'string') {
        total.push(val);
    }
    else if (Array.isArray(val)) {
        total.push(...val);
    }
    else {
        (0, utils_1.assert)(val === undefined);
    }
    total.push(...entries);
    config.optimizeDeps.entries = total;
}
async function determineFsAllowList(config) {
    const fsAllow = config.server.fs.allow;
    // Current directory: vite-plugin-ssr/dist/cjs/node/plugin/plugins/
    const vitePluginSsrRoot = path_1.default.join(__dirname, '../../../../../');
    // Assert that `vitePluginSsrRoot` is indeed pointing to `node_modules/vite-plugin-ssr/`
    require.resolve(`${vitePluginSsrRoot}/dist/cjs/node/plugin/plugins/devConfig.js`);
    fsAllow.push(vitePluginSsrRoot);
    const globRoots = await (0, getGlobRoots_1.getGlobRoots)(config);
    globRoots
        .filter(({ pkgName }) => pkgName)
        .forEach(({ pkgRootResolved }) => {
        fsAllow.push(pkgRootResolved);
    });
}
