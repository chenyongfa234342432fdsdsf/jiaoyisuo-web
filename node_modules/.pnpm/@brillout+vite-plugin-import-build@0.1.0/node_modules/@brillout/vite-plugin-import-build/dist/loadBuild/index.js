"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importBuildFileName = exports.loadBuild = void 0;
const utils_1 = require("./utils");
const importBuildFileName_1 = require("../shared/importBuildFileName");
Object.defineProperty(exports, "importBuildFileName", { enumerable: true, get: function () { return importBuildFileName_1.importBuildFileName; } });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
async function loadBuild() {
    const importer = require('../autoImporter');
    if (importer.status === 'SET') {
        importer.load();
        return {
            success: true,
            entryFile: getImporterFilePath(),
        };
    }
    else if (importer.status === 'UNSET') {
        // Yarn PnP or disabled
        const { success, distImporterFilePath } = loadWithNodejs();
        return {
            success,
            entryFile: distImporterFilePath,
        };
    }
    else {
        const { status } = importer;
        (0, utils_1.assert)(false, { status });
    }
    function loadWithNodejs() {
        const root = (0, utils_1.getCwd)();
        if (!root) {
            (0, utils_1.assert)((0, utils_1.isCloudflareWorkersAlike)());
            return {
                success: false,
                distImporterFilePath: null
            };
        }
        const distImporterPathRelative = path_1.default.posix.join(root, 'dist', 'server', importBuildFileName_1.importBuildFileName);
        const distImporterDir = path_1.default.posix.dirname(distImporterPathRelative);
        let distImporterPath;
        try {
            distImporterPath = require.resolve(distImporterPathRelative);
        }
        catch (err) {
            (0, utils_1.assert)(!fs_1.default.existsSync(distImporterDir), { distImporterDir, distImporterPathRelative });
            return {
                success: false,
                distImporterFilePath: null
            };
        }
        if (isWebpackResolve(distImporterPath)) {
            return {
                success: false,
                distImporterFilePath: null
            };
        }
        (0, utils_1.assert)(distImporterPath.endsWith('.cjs')); // Ensure ESM compability
        require(distImporterPath);
        return { success: true, distImporterFilePath: distImporterPath };
    }
    function getImporterFilePath() {
        let autoImporterFilePath = null;
        try {
            autoImporterFilePath = require.resolve('../autoImporter');
        }
        catch (_a) {
            return null;
        }
        if (isWebpackResolve(autoImporterFilePath)) {
            return null;
        }
        (0, utils_1.assert)(require(autoImporterFilePath) === importer);
        return autoImporterFilePath;
    }
}
exports.loadBuild = loadBuild;
function isWebpackResolve(moduleResolve) {
    return typeof moduleResolve === 'number';
}
