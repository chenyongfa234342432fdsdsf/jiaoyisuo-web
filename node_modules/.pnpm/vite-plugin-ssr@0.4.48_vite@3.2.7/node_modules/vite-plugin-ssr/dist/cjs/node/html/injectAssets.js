"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectAssetsToStream = exports.injectAssets = exports.injectAssets__public = void 0;
const utils_1 = require("../utils");
const serializePageContextClientSide_1 = require("../serializePageContextClientSide");
const sanitizeJson_1 = require("./injectAssets/sanitizeJson");
const assertPageContextProvidedByUser_1 = require("../../shared/assertPageContextProvidedByUser");
const injectHtmlSnippet_1 = require("./injectAssets/injectHtmlSnippet");
const infertAssetTag_1 = require("./injectAssets/infertAssetTag");
const getViteDevScripts_1 = require("./injectAssets/getViteDevScripts");
const mergeScriptTags_1 = require("./injectAssets/mergeScriptTags");
async function injectAssets__public(htmlString, pageContext) {
    (0, utils_1.assertWarning)(false, '`_injectAssets()` is deprecated and will be removed.', { onlyOnce: true, showStackTrace: true });
    (0, utils_1.assertUsage)(typeof htmlString === 'string', '[injectAssets(htmlString, pageContext)]: Argument `htmlString` should be a string.');
    (0, utils_1.assertUsage)(pageContext, '[injectAssets(htmlString, pageContext)]: Argument `pageContext` is missing.');
    const errMsg = (body) => '[injectAssets(htmlString, pageContext)]: ' +
        body +
        '. Make sure that `pageContext` is the object that `vite-plugin-ssr` provided to your `render(pageContext)` hook.';
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(pageContext, 'urlPathname', 'string'), errMsg('`pageContext.urlPathname` should be a string'));
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(pageContext, '_pageId', 'string'), errMsg('`pageContext._pageId` should be a string'));
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(pageContext, '_getPageAssets'), errMsg('`pageContext._getPageAssets` is missing'));
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(pageContext, '_passToClient', 'string[]'), errMsg('`pageContext._passToClient` is missing'));
    (0, utils_1.castProp)(pageContext, '_getPageAssets');
    htmlString = await injectAssets(htmlString, pageContext);
    return htmlString;
}
exports.injectAssets__public = injectAssets__public;
async function injectAssets(htmlString, pageContext) {
    const { injectAtStreamBegin, injectAtStreamEnd } = injectAssetsToStream(pageContext, null);
    htmlString = await injectAtStreamBegin(htmlString);
    htmlString = await injectAtStreamEnd(htmlString);
    return htmlString;
}
exports.injectAssets = injectAssets;
function injectAssetsToStream(pageContext, injectToStream) {
    let htmlSnippets;
    return {
        injectAtStreamBegin,
        injectAtStreamEnd
    };
    async function injectAtStreamBegin(htmlBegin) {
        (0, utils_1.assert)([true, false].includes(pageContext._isHtmlOnly));
        const isHtmlOnly = pageContext._isHtmlOnly;
        (0, utils_1.assert)(pageContext._pageContextPromise === null || pageContext._pageContextPromise);
        const injectJavaScriptDuringStream = pageContext._pageContextPromise === null && !!injectToStream;
        htmlSnippets = await getHtmlSnippets(pageContext, { isHtmlOnly, injectJavaScriptDuringStream });
        const htmlSnippetsAtBegin = htmlSnippets.filter((snippet) => snippet.position !== 'DOCUMENT_END');
        // Ensure existence of `<head>`
        htmlBegin = (0, injectHtmlSnippet_1.createHtmlHeadIfMissing)(htmlBegin);
        htmlBegin = (0, injectHtmlSnippet_1.injectHtmlSnippets)(htmlBegin, htmlSnippetsAtBegin, injectToStream);
        return htmlBegin;
    }
    async function injectAtStreamEnd(htmlEnd) {
        await resolvePageContextPromise(pageContext);
        const htmlSnippetsAtEnd = htmlSnippets.filter((snippet) => snippet.position === 'DOCUMENT_END');
        htmlEnd = (0, injectHtmlSnippet_1.injectHtmlSnippets)(htmlEnd, htmlSnippetsAtEnd, null);
        return htmlEnd;
    }
}
exports.injectAssetsToStream = injectAssetsToStream;
// https://vite-plugin-ssr.com/stream#initial-data-after-streaming
async function resolvePageContextPromise(pageContext) {
    if (pageContext._pageContextPromise !== null) {
        const pageContextProvidedByUser = await pageContext._pageContextPromise;
        (0, assertPageContextProvidedByUser_1.assertPageContextProvidedByUser)(pageContextProvidedByUser, { hook: pageContext._renderHook });
        Object.assign(pageContext, pageContextProvidedByUser);
    }
}
async function getHtmlSnippets(pageContext, { isHtmlOnly, injectJavaScriptDuringStream }) {
    const pageAssets = await pageContext._getPageAssets();
    const htmlSnippets = [];
    const positionJs = injectJavaScriptDuringStream ? 'STREAM' : 'DOCUMENT_END';
    // Serialized pageContext
    if (!isHtmlOnly) {
        htmlSnippets.push({
            // Needs to be called after `resolvePageContextPromise()`
            htmlSnippet: () => getPageContextTag(pageContext),
            position: positionJs
        });
    }
    const jsScript = await getMergedScriptTag(pageAssets, pageContext);
    if (jsScript) {
        htmlSnippets.push({
            htmlSnippet: jsScript,
            position: positionJs
        });
    }
    for (const pageAsset of pageAssets) {
        const { assetType, preloadType } = pageAsset;
        // JavaScript tags
        if (assetType === 'script') {
            // Already included with `getMergedScriptTag()`
            continue;
        }
        if (assetType === 'preload' && preloadType === 'script') {
            const htmlSnippet = (0, infertAssetTag_1.inferAssetTag)(pageAsset);
            if (!isHtmlOnly) {
                htmlSnippets.push({ htmlSnippet, position: positionJs });
            }
            continue;
        }
        // Style tags
        if (assetType === 'style' ||
            (assetType === 'preload' && preloadType === 'style') ||
            (assetType === 'preload' && preloadType === 'font')) {
            // In development, Vite automatically inject styles, but we still inject `<link rel="stylesheet" type="text/css" href="${src}">` tags in order to avoid FOUC (flash of unstyled content).
            //   - https://github.com/vitejs/vite/issues/2282
            //   - https://github.com/brillout/vite-plugin-ssr/issues/261
            const htmlSnippet = (0, infertAssetTag_1.inferAssetTag)(pageAsset);
            htmlSnippets.push({ htmlSnippet, position: 'HEAD_OPENING' });
            continue;
        }
        // Misc tags
        //  - Image and unknown preload tags
        if (assetType === 'preload' && preloadType !== 'script') {
            const htmlSnippet = (0, infertAssetTag_1.inferAssetTag)(pageAsset);
            htmlSnippets.push({ htmlSnippet, position: 'DOCUMENT_END' });
            continue;
        }
        (0, utils_1.assert)(false, { assetType, preloadType });
    }
    return htmlSnippets;
}
async function getMergedScriptTag(pageAssets, pageContext) {
    const scriptAssets = pageAssets.filter((pageAsset) => pageAsset.assetType === 'script');
    const viteScripts = await (0, getViteDevScripts_1.getViteDevScripts)(pageContext);
    const scriptTagsHtml = `${viteScripts}${scriptAssets.map(infertAssetTag_1.inferAssetTag).join('')}`;
    const scriptTag = (0, mergeScriptTags_1.mergeScriptTags)(scriptTagsHtml, pageContext);
    return scriptTag;
}
function getPageContextTag(pageContext) {
    const pageContextSerialized = (0, sanitizeJson_1.sanitizeJson)((0, serializePageContextClientSide_1.serializePageContextClientSide)(pageContext));
    const htmlSnippet = `<script id="vite-plugin-ssr_pageContext" type="application/json">${pageContextSerialized}</script>`;
    return htmlSnippet;
}
