"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getViteDevServer = exports.setViteDevServer = exports.getGlobalContext = void 0;
const utils_1 = require("./utils");
const loadBuild_1 = require("./plugin/plugins/importBuild/loadBuild");
const getPageFiles_1 = require("../shared/getPageFiles");
const viteManifest_1 = require("./viteManifest");
const assertPluginManifest_1 = require("./plugin/plugins/manifest/assertPluginManifest");
const runtimeConfig_1 = require("./globalContext/runtimeConfig");
const globalObject = (0, utils_1.getGlobalObject)('globalContext.ts', {
    viteDevServer: null
});
function setViteDevServer(viteDevServer) {
    (0, utils_1.assert)(viteDevServer);
    globalObject.viteDevServer = viteDevServer;
}
exports.setViteDevServer = setViteDevServer;
function getViteDevServer() {
    return globalObject.viteDevServer;
}
exports.getViteDevServer = getViteDevServer;
async function getGlobalContext(isPreRendering) {
    const { viteDevServer } = globalObject;
    assertProdEnv(viteDevServer);
    const globalContext = {};
    const isProduction = isPreRendering || viteDevServer === null;
    if (isProduction) {
        (0, utils_1.assert)(viteDevServer === null);
        const buildEntries = await (0, loadBuild_1.loadBuild)();
        assertBuildEntries(buildEntries, isPreRendering);
        const { pageFiles, clientManifest, pluginManifest } = buildEntries;
        (0, viteManifest_1.assertViteManifest)(clientManifest);
        (0, assertPluginManifest_1.assertPluginManifest)(pluginManifest);
        (0, getPageFiles_1.setPageFiles)(pageFiles);
        (0, utils_1.objectAssign)(globalContext, {
            _isProduction: true,
            _manifestClient: clientManifest,
            _manifestPlugin: pluginManifest
        });
        (0, runtimeConfig_1.setRuntimeConfig)(pluginManifest);
    }
    else {
        (0, utils_1.objectAssign)(globalContext, {
            _isProduction: false,
            _manifestClient: null,
            _manifestPlugin: null
        });
    }
    const runtimeConfig = (0, runtimeConfig_1.getRuntimeConfig)();
    (0, utils_1.objectAssign)(globalContext, {
        _baseUrl: runtimeConfig.baseUrl,
        _baseAssets: runtimeConfig.baseAssets,
        _viteDevServer: viteDevServer,
        _includeAssetsImportedByServer: runtimeConfig.includeAssetsImportedByServer,
        //_outDir: viteDevServer?.runtimeConfig.build.outDir ?? getPluginManifest().outDir)
        _objectCreatedByVitePluginSsr: true
    });
    /*
    if( !viteDevServer ) {
      return {
      isProduction: true,
      root: process.cwd(),
      outDir: 'dist',
      baseUrl: '/',
      baseAssets: null,
      viteDevServer: undefined,
      }
    }
    return {
      isProduction: false,
      root: process.cwd(),
      outDir: 'dist',
      baseUrl: '/',
      baseAssets: null,
      viteDevServer,
    }
    */
    return globalContext;
}
exports.getGlobalContext = getGlobalContext;
function assertBuildEntries(buildEntries, isPreRendering) {
    // "Don't install vite-plugin-ssr after building your app. Instead, install your app's dependencies before building.",
    const errMsg = [
        `You are tyring to run`,
        isPreRendering ? '`$ vite-plugin-ssr prerender`' : 'the server for production',
        "but your app isn't built yet. Run `$ vite build` before ",
        isPreRendering ? 'pre-rendering.' : 'running the server.'
    ].join(' ');
    (0, utils_1.assertUsage)(buildEntries, errMsg);
}
function assertProdEnv(viteDevServer) {
    (0, utils_1.assertUsage)(!(isProdEnv() && viteDevServer), "You created a Vite dev server with `createServer()` (`import { createServer } from 'vite'`) while setting `process.env.NODE_ENV` to `production`. This is contradictory: for production skip `createServer()`, and for development don't set `process.env.NODE_ENV` to `production`.");
}
function isProdEnv() {
    if (typeof process == 'undefined' || !(0, utils_1.hasProp)(process, 'env'))
        return true;
    return process.env.NODE_ENV === 'production';
}
