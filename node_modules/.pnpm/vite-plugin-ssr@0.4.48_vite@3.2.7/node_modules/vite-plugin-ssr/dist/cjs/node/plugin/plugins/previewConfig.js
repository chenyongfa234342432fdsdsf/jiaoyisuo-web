"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.previewConfig = void 0;
const utils_1 = require("../utils");
const helpers_1 = require("../helpers");
const assertConfigVps_1 = require("./config/assertConfigVps");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
function previewConfig() {
    let config;
    return {
        name: 'vite-plugin-ssr:previewConfig',
        apply: (0, helpers_1.apply)('preview'),
        config(config) {
            return {
                build: {
                    outDir: (0, utils_1.determineOutDir)(config)
                }
            };
        },
        configResolved(config_) {
            config = config_;
        },
        configurePreviewServer(server) {
            return () => {
                assertDist();
                (0, assertConfigVps_1.assertConfigVpsResolved)(config);
                if (!config.vitePluginSsr.prerender) {
                    (0, helpers_1.addSsrMiddleware)(server.middlewares);
                }
                addStatic404Middleware(server.middlewares);
            };
        }
    };
    function assertDist() {
        let { outDirRoot, outDirClient, outDirServer } = (0, utils_1.getOutDirs)(config);
        [outDirRoot, outDirClient, outDirServer].forEach((outDirAny) => {
            (0, utils_1.assertUsage)(fs_1.default.existsSync(outDirAny), `Cannot run \`$ vite preview\`: your app isn't built (the build directory ${outDirAny} is missing). Make sure to run \`$ vite build\` before running \`$ vite preview\`.`);
        });
    }
    function addStatic404Middleware(middlewares) {
        const { outDirClient } = (0, utils_1.getOutDirs)(config);
        middlewares.use(config.base, (_, res, next) => {
            const file = path_1.default.posix.join(outDirClient, './404.html');
            if (fs_1.default.existsSync(file)) {
                res.statusCode = 404;
                res.end(fs_1.default.readFileSync(file));
            }
            else {
                next();
            }
        });
    }
}
exports.previewConfig = previewConfig;
