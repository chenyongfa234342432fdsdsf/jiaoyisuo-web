// src/index.ts
import {
  resolveConfig,
  build
} from "vite";
import colors from "picocolors";
async function multibuild(config = {}, options = {}) {
  var _a, _b, _c, _d;
  let initialConfig = await resolveConfig({
    ...config,
    mode: "multibuild"
  }, "build").catch((error) => {
    console.error(colors.red(`error resolving config:
${error.stack}`), {
      error
    });
    process.exit(1);
  });
  if (!initialConfig.configFile && options.onMissingConfigFile) {
    const maybeInlineConfig = await options.onMissingConfigFile(initialConfig);
    if (maybeInlineConfig) {
      initialConfig = await resolveConfig({
        ...maybeInlineConfig,
        mode: "multibuild"
      }, "build").catch((error) => {
        console.error(colors.red(`error resolving config:
${error.stack}`), {
          error
        });
        process.exit(1);
      });
    }
  }
  await ((_a = options == null ? void 0 : options.onInitialConfigResolved) == null ? void 0 : _a.call(options, initialConfig));
  const steps = initialConfig.buildSteps || [{ name: "default" }];
  const forwarded = {};
  for (const [i, step] of steps.entries()) {
    let resolvedStepConfig;
    const info = {
      buildSteps: steps,
      currentStepIndex: i,
      currentStep: step
    };
    await ((_b = options.onStartBuildStep) == null ? void 0 : _b.call(options, info));
    await build({
      ...config,
      ...step.config,
      currentBuildStep: step,
      plugins: [
        {
          name: "@vavite/multibuild",
          enforce: "pre",
          async config(config2) {
            var _a2;
            function enforceToNumber(enforce) {
              return enforce ? enforce === "pre" ? -1 : 1 : 0;
            }
            const plugins = (config2.plugins || []).flat().filter(Boolean).sort((a, b) => enforceToNumber(a.enforce) - enforceToNumber(b.enforce));
            for (const plugin of plugins) {
              await ((_a2 = plugin.buildStepStart) == null ? void 0 : _a2.call(plugin, info, forwarded[plugin.name]));
            }
          },
          configResolved(resolvedConfig) {
            resolvedStepConfig = resolvedConfig;
          }
        },
        ...((_c = step.config) == null ? void 0 : _c.plugins) || []
      ]
    }).catch((error) => {
      initialConfig.logger.error(colors.red(`error during build:
${error.stack}`), { error });
      process.exit(1);
    });
    for (const plugin of resolvedStepConfig.plugins || []) {
      const data = await ((_d = plugin.buildStepEnd) == null ? void 0 : _d.call(plugin));
      if (data !== void 0) {
        forwarded[plugin.name] = data;
      }
    }
  }
}
export {
  multibuild as default
};
