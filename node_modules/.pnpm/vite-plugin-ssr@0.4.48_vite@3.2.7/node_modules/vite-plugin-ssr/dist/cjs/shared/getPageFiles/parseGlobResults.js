"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseGlobResults = void 0;
const utils_1 = require("../utils");
const assertExports_1 = require("./assertExports");
const getPageFileObject_1 = require("./getPageFileObject");
const types_1 = require("./types");
function parseGlobResults(pageFilesExports) {
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'isGeneratedFile'), 'Missing `isGeneratedFile`.');
    (0, utils_1.assert)(pageFilesExports.isGeneratedFile !== false, `vite-plugin-ssr was re-installed(/re-built). Restart your app.`);
    (0, utils_1.assert)(pageFilesExports.isGeneratedFile === true, `\`isGeneratedFile === ${pageFilesExports.isGeneratedFile}\``);
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'pageFilesLazy', 'object'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'pageFilesEager', 'object'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'pageFilesExportNamesLazy', 'object'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'pageFilesExportNamesEager', 'object'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports.pageFilesLazy, '.page'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports.pageFilesLazy, '.page.client') || (0, utils_1.hasProp)(pageFilesExports.pageFilesLazy, '.page.server'));
    const pageFilesMap = {};
    parseGlobResult(pageFilesExports.pageFilesLazy).forEach(({ filePath, pageFile, globValue }) => {
        pageFile = pageFilesMap[filePath] = pageFilesMap[filePath] ?? pageFile;
        const loadModule = globValue;
        assertLoadModule(loadModule);
        pageFile.loadFile = async () => {
            if (!('fileExports' in pageFile)) {
                pageFile.fileExports = await loadModule();
                (0, assertExports_1.assertExportValues)(pageFile);
            }
        };
    });
    parseGlobResult(pageFilesExports.pageFilesExportNamesLazy).forEach(({ filePath, pageFile, globValue }) => {
        pageFile = pageFilesMap[filePath] = pageFilesMap[filePath] ?? pageFile;
        const loadModule = globValue;
        assertLoadModule(loadModule);
        pageFile.loadExportNames = async () => {
            if (!('exportNames' in pageFile)) {
                const moduleExports = await loadModule();
                // Vite 2 seems to choke following assertion: https://github.com/brillout/vite-plugin-ssr/issues/455
                (0, utils_1.assertUsage)('exportNames' in moduleExports, 'You seem to be using Vite 2 but the latest vite-plugin-ssr versions only work with Vite 3');
                (0, utils_1.assert)((0, utils_1.hasProp)(moduleExports, 'exportNames', 'string[]'), pageFile.filePath);
                pageFile.exportNames = moduleExports.exportNames;
            }
        };
    });
    parseGlobResult(pageFilesExports.pageFilesEager).forEach(({ filePath, pageFile, globValue }) => {
        pageFile = pageFilesMap[filePath] = pageFilesMap[filePath] ?? pageFile;
        const moduleExports = globValue;
        (0, utils_1.assert)((0, utils_1.isObject)(moduleExports));
        pageFile.fileExports = moduleExports;
    });
    parseGlobResult(pageFilesExports.pageFilesExportNamesEager).forEach(({ filePath, pageFile, globValue }) => {
        pageFile = pageFilesMap[filePath] = pageFilesMap[filePath] ?? pageFile;
        const moduleExports = globValue;
        (0, utils_1.assert)((0, utils_1.isObject)(moduleExports));
        (0, utils_1.assert)((0, utils_1.hasProp)(moduleExports, 'exportNames', 'string[]'), pageFile.filePath);
        pageFile.exportNames = moduleExports.exportNames;
    });
    const pageFiles = Object.values(pageFilesMap);
    pageFiles.forEach(({ filePath }) => {
        (0, utils_1.assert)(!filePath.includes('\\'));
    });
    return pageFiles;
}
exports.parseGlobResults = parseGlobResults;
function parseGlobResult(globObject) {
    const ret = [];
    Object.entries(globObject).forEach(([fileType, globFiles]) => {
        (0, utils_1.cast)(fileType);
        (0, utils_1.assert)(types_1.fileTypes.includes(fileType));
        (0, utils_1.assert)((0, utils_1.isObject)(globFiles));
        Object.entries(globFiles).forEach(([filePath, globValue]) => {
            const pageFile = (0, getPageFileObject_1.getPageFileObject)(filePath);
            (0, utils_1.assert)(pageFile.fileType === fileType);
            ret.push({ filePath, pageFile, globValue });
        });
    });
    return ret;
}
function assertLoadModule(globValue) {
    (0, utils_1.assert)((0, utils_1.isCallable)(globValue));
}
