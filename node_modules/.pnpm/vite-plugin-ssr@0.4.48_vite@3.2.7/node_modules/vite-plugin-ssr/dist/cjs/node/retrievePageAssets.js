"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retrieveAssetsDev = exports.retrieveAssetsProd = void 0;
const utils_1 = require("./utils");
const getManifestEntry_1 = require("./getManifestEntry");
const extractAssetsAddQuery_1 = require("./plugin/plugins/extractAssetsPlugin/extractAssetsAddQuery");
async function retrieveAssetsDev(clientDependencies, viteDevServer) {
    const visitedModules = new Set();
    const assetUrls = new Set();
    await Promise.all(clientDependencies.map(async ({ id }) => {
        if (id.startsWith('@@vite-plugin-ssr'))
            return; // vps doesn't have any CSS
        (0, utils_1.assert)(id);
        const { moduleGraph } = viteDevServer;
        const [_, graphId] = await moduleGraph.resolveUrl(id);
        (0, utils_1.assert)(graphId, { id });
        const mod = moduleGraph.getModuleById(graphId);
        if (!mod) {
            /* Not sure when the assertion fails. So let's just remove it for now.
             *  - https://github.com/brillout/vite-plugin-ssr/issues/391
            // `moduleGraph` is missing `.page.client.js` files on the very first render
            assert(id.includes('.page.client.'), { id })
            */
            return;
        }
        (0, utils_1.assert)(mod, { id });
        collectCss(mod, assetUrls, visitedModules);
    }));
    return Array.from(assetUrls);
}
exports.retrieveAssetsDev = retrieveAssetsDev;
async function retrieveAssetsProd(clientDependencies, clientManifest, includeAssetsImportedByServer) {
    let assetUrls = new Set();
    (0, utils_1.assert)(clientManifest);
    const visistedAssets = new Set();
    clientDependencies.forEach(({ id, onlyAssets }) => {
        if (onlyAssets && id.includes('.page.server.')) {
            if (!includeAssetsImportedByServer) {
                return;
            }
            id = (0, extractAssetsAddQuery_1.extractAssetsAddQuery)(id);
        }
        const entry = (0, getManifestEntry_1.getManifestEntry)(id, clientManifest);
        if (!entry) {
            console.log(clientManifest);
            (0, utils_1.assertUsage)(entry, `You stumbled upon a rare Rollup bug. Reach out to the vite-plugin-ssr maintainer on GitHub or Discord. (The entry ${id} is missing in the client manifest which is printed above.)`);
        }
        /*
        assertWarning(
          entry,
          "You stumbled upon a Rollup bug that is known to the vite-plugin-ssr maintainer. It's usually benign but it may cause problems. Feel free to reach out on GitHub or Discord.",
          { onlyOnce: true },
        )
        if (!entry) {
          // Circumvent Rollup Bug, see https://github.com/brillout/vite-plugin-ssr/issues/51
          return
        }
        */
        const { manifestKey } = entry;
        collectAssets(manifestKey, assetUrls, visistedAssets, clientManifest, onlyAssets);
    });
    return Array.from(assetUrls);
}
exports.retrieveAssetsProd = retrieveAssetsProd;
function collectAssets(manifestKey, assetUrls, visistedAssets, manifest, onlyCollectStaticAssets) {
    if (visistedAssets.has(manifestKey))
        return;
    visistedAssets.add(manifestKey);
    const manifestEntry = manifest[manifestKey];
    (0, utils_1.assert)(manifestEntry, { manifestKey });
    const { file } = manifestEntry;
    if (!onlyCollectStaticAssets) {
        assetUrls.add(`/${file}`);
    }
    const { imports = [], assets = [], css = [] } = manifestEntry;
    for (const manifestKey of imports) {
        const importManifestEntry = manifest[manifestKey];
        (0, utils_1.assert)(importManifestEntry);
        collectAssets(manifestKey, assetUrls, visistedAssets, manifest, onlyCollectStaticAssets);
    }
    for (const cssAsset of css) {
        assetUrls.add(`/${cssAsset}`);
    }
    for (const asset of assets) {
        assetUrls.add(`/${asset}`);
    }
}
// Collect the CSS to be injected to the HTML to avoid FLOUC
//  - We only collect the root import: https://github.com/brillout/vite-plugin-ssr/issues/400
function collectCss(mod, styleUrls, visitedModules, importer) {
    (0, utils_1.assert)(mod);
    if (!mod.url)
        return;
    if (visitedModules.has(mod.url))
        return;
    visitedModules.add(mod.url);
    if (isStyle(mod) && (!importer || !isStyle(importer))) {
        if (mod.url.startsWith('/')) {
            styleUrls.add(mod.url);
        }
        else {
            // Vuetify uses virtual SCSS modules which we skip
            //  - We skip because `<link rel="stylesheet" type="text/css" href="virtual-module.css">` doesn't work
            //  - Reproduction: https://github.com/brillout/vite-plugin-ssr/issues/479
            //  - Possible workaround: `<script>import 'virtual-module.css'</script>`
            // logModule(mod)
        }
    }
    mod.importedModules.forEach((dep) => {
        collectCss(dep, styleUrls, visitedModules, mod);
    });
}
function isStyle(mod) {
    if (utils_1.styleFileRE.test(mod.url) || (mod.id && /\?vue&type=style/.test(mod.id))) {
        // `mod.type` seems broken
        (0, utils_1.assert)(mod.type === 'js');
        // logModule(mod)
        return true;
    }
    return false;
}
/*
function logModule(mod: ModuleNode) {
  const redacted = 'redacted'
  console.log({
    ...mod,
    ssrModule: redacted,
    ssrTransformResult: redacted,
    importedModules: redacted,
    importers: redacted
  })
}
//*/
