import { StrAnyObj } from './types';
export interface CloudStorageServiceInterface {
    /**
     * 上传文件
     */
    uploadFile(options: UploadFileOptions): Promise<UploadFileResult>;
    /**
     * 短链转长链
     */
    getOriginUrl(options: string): Promise<string>;
    /**
     * 获取文件鉴权的token
     */
    getFileToken(options: GetFileTokenOptions): Promise<GetFileTokenResult | void>;
}
export declare type UploadFileResult = {
    /**
     * 文件名
     */
    name: string;
    /**
     * 文件 url
     */
    url: string;
    /**
     * 文件后缀
     */
    ext: string;
    /**
     * 文件大小，单位字节
     */
    size?: number;
    /**
     * 宽度。
     */
    w?: number;
    /**
     * 高度
     */
    h?: number;
    /**
     * 音频/视频 文件的时长
     */
    dur?: number;
    md5?: string;
    /**
     * 图片的转向
     */
    orientation?: string;
    /**
     * 音频解码格式
     */
    audioCodec?: string;
    /**
     * 视频解码格式
     */
    videoCodec?: string;
    /**
     * 音视频文件的容器
     */
    container?: string;
};
export declare type FileProgressObject = {
    /**
     * 总大小
     */
    total: number;
    /**
     * 已上传大小
     */
    loaded: number;
    /**
     * 已上传进度
     */
    percentage: number;
    /**
     * 已上传进度的文本描述
     */
    percentageText: string;
};
/**
 * 当发送消息为 image/video/audio/file 时，这些字段才能生效
 */
export declare type UploadFileOptions = {
    /**
     * 文件类型
     */
    type?: 'image' | 'audio' | 'video' | 'file';
    /**
     * JS 的 File 对象。
     *
     * 浏览器专用
     */
    file?: File;
    /**
     * @deprecated Use {@link UploadFileOptions.file} instead.
     *
     * 即将弃用！！存储文件的 DOM 元素，与上面的 file 只要选填一个就可以了。
     *
     * 浏览器专用。
     *
     * 如果传字符串，最后会以 document.getElementById('fileInput').files[0] 拿到 File 对象
     * 如果传的是 DOM 节点，最后以 fileInput.files[0] 拿到 File 对象
     *
     */
    fileInput?: string | HTMLInputElement;
    /**
     * 临时文件路径
     *
     * uni-app，RN，小程序等特殊的 JS 运行环境专用（chooseImage 拿到的临时路径）
     */
    filePath?: string;
    /**
     * maxSize 限制文件大小。
     *
     * 只对浏览器生效。
     *
     * uni-app，小程序等，由于sdk只能得到一个 filePath 临时路径，不能得到整个文件的信息。
     * 所以请开发者自行在选择文件后进行判断，参考那些端的API如 wx.chooseImage，uni.chooseImage
     */
    maxSize?: number;
    /**
     * 存储场景，不传默认实例化配置，默认为"im"
     */
    nosScenes?: string;
    /**
     * 存储有效时间，不传则默认实例化配置
     *
     * 不得小于一天，单位秒
     */
    nosSurvivalTime?: number;
    /**
     * 上传进度
     */
    onUploadProgress?: (obj: FileProgressObject) => void;
    /**
     * 上传前回调事件
     */
    onUploadStart?: (task: StrAnyObj) => void;
    /**
     * 上传完成的回调
     */
    onUploadDone?: (file: UploadFileResult) => void;
};
export declare type IUploadFileOptions = {
    /**
     * JS 的 File 对象。
     *
     * 浏览器专用
     */
    file?: File;
    /**
     * 即将弃用！！存储文件的 DOM 元素，与上面的 file 只要选填一个就可以了。
     *
     * 浏览器专用。
     *
     * 如果传字符串，最后会以 document.getElementById('fileInput').files[0] 拿到 File 对象
     * 如果传的是 DOM 节点，最后以 fileInput.files[0] 拿到 File 对象
     *
     */
    fileInput?: string | HTMLInputElement;
    /**
     * 临时文件路径
     *
     * uni-app，RN，小程序等特殊的 JS 运行环境专用（chooseImage 拿到的临时路径）
     */
    filePath?: string;
    /**
     * maxSize 限制文件大小。
     *
     * 只对浏览器生效。
     *
     * uni-app，小程序等，由于sdk只能得到一个 filePath 临时路径，不能得到整个文件的信息。
     * 所以请开发者自行在选择文件后进行判断，参考那些端的API如 wx.chooseImage，uni.chooseImage
     */
    maxSize?: number;
    /**
     * 存储场景，不传默认实例化配置，默认为"im"
     */
    nosScenes?: string;
    /**
     * 存储有效时间，不传则默认实例化配置
     *
     * 不得小于一天，单位秒
     */
    nosSurvivalTime?: number;
    /**
     * 上传进度
     */
    onUploadProgress?: (obj: FileProgressObject) => void;
    /**
     * 上传前回调事件
     */
    onUploadStart?: (task: StrAnyObj) => void;
    /**
     * 上传完成的回调
     */
    onUploadDone?: (file: UploadFileResult) => void;
};
export declare type GetFileTokenOptions = {
    /**
     * 类型 2表示带过期时间的全局token鉴权，3表示文件级别的url鉴权
     */
    type: 2 | 3;
    /**
     * 如果type=3,是url鉴权，需要传url数组
     */
    urls?: string[] | string;
};
export declare type GetFileTokenResult = {
    /**
     * 类型 2表示带过期时间的全局token鉴权，3表示文件级别的url鉴权
     */
    type: 2 | 3;
    /**
     * 如果是url鉴权，就返回url数组对应的tokens
     */
    tokens?: string[];
    /**
     * 基于过期时间鉴权的token
     */
    token?: string;
    /**
     * token的过期时间，单位s
     */
    ttl: number;
};
export declare type NIMEModuleParamCloudStorageConfig = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * NOS上传地址（直传）
     * @locale
     *
     * @locale en
     * @locale
     */
    commonUploadHost?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * NOS上传地址（分片）
     * @locale
     *
     * @locale en
     * @locale
     */
    chunkUploadHost?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送文件消息中文件的url的通配符地址，例：'https://{host}/{object}'
     * @locale
     *
     * @locale en
     * @locale
     */
    uploadReplaceFormat?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 接收到文件消息的替换模版
     * 这个是用来接到消息后，要按一定模式替换掉文件链接的。给予一个安全下载链接。
     * 例：'https://{bucket}-nosdn.netease.im/{object}'
     * @locale
     *
     * @locale en
     * @locale
     */
    downloadUrl?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到哪些host地址，需要替换成downloadUrl，例：收到nos.netease.com/{bucket}/{obj}
     * @locale
     *
     * @locale en
     * @locale
     */
    downloadHostList?: string[];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 服务器下发的域名存在，并且对象前缀匹配成功，那么强行替换为`${protocol}${serverCdnDomain}/${decodePath.slice(prefixIndex)}`
     * @locale
     *
     * @locale en
     * @locale
     */
    nosCdnEnable?: boolean;
    /**
     * NOS 上传专用的 cdn 配置
     */
    cdn?: {
        /**
         * 默认的下载域名
         */
        defaultCdnDomain?: string;
        /**
         * 下载域名
         */
        cdnDomain?: string;
        /**
         * 桶名, 一般 NOS 默认为 "nim"
         */
        bucket?: string;
        /**
         * 路径前缀，一般不需要填写
         */
        objectNamePrefix?: string;
    };
    /**
     * amazon aws s3 sdk
     *
     * 注：若传入 s3 sdk 后，本 SDK 根据融合存储策略配置，可能会 new 创建出它的实例并使用它的实例方法进行上传/存储。
     */
    s3?: any;
    /**
     * localStorage 缓存的云存储配置的键名的前缀。默认叫 NIMClient
     *
     * 注: 举个例子，根据默认配置，策略缓存的键叫 'NIMClient-AllGrayscaleConfig'。
     */
    storageKeyPrefix?: string;
    /**
     * 是否需要开启融合存储整个策略。默认为 true
     *
     * 注: 为 false 则不会进行 lbs 灰度开关和策略获取，直接退化到老的 nos 上传逻辑。
     */
    isNeedToGetUploadPolicyFromServer?: boolean;
};
