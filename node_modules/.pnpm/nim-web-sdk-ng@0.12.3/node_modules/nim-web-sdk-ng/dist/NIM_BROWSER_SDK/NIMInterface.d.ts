import { NIMEModuleParamCloudStorageConfig } from './CloudStorageServiceInterface';
import { PushEvent } from './EventServiceInterface';
import { FriendProfile } from './FriendServiceInterface';
import { DeleteSelfMsgsResult, IMMessage, NIM_BroadcastMessage, TClientType, TeamMsgReceipt } from './MsgServiceInterface';
import { Session } from './SessionServiceInterface';
import { SuperTeam, SuperTeamMember, SuperTeamMemberType } from './SuperTeamServiceInterface';
import { SystemMessage, TSystemMessageStatus, TSystemMessageType } from './SystemMessageServiceInterface';
import { Team, TeamMember, TeamMemberType } from './TeamServiceInterface';
import { NIMServiceName, StrAnyObj } from './types';
import { Relations, UserNameCard } from './UserServiceInterface';
export interface NIMConstructor {
    new (options: NIMInitializeOptions, otherOptions?: NIMOtherOptions): NIMInterface;
}
export interface NIMInterface {
    /**
     * 实例状态
     */
    status: NIMEInstanceStatus;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 更新初始化传入的配置，在初始化完成后使用，在下一次建立连接时生效
     * @locale
     *
     * @locale en
     * @locale
     */
    setOptions(options: NIMInitializeOptions): void;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 建立连接，并且登录
     * @locale
     *
     * @locale en
     * Establish a connection and log in
     * @locale
     */
    connect(): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 断开连接。
     *
     * 退出登录状态，并断开 websocket 连接
     * disconnect完成后，实例不会被销毁，可再次 connect 方法登录IM
     * @locale
     *
     * @locale en
     * Disconnect.
     *
     * Log out and disconnect the WebSocket connection.
     * After the disconnection completes, the instance will not be destroyed, you can log in to IM by the connect method again.
     * @locale
     */
    disconnect(): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 销毁实例
     *
     * 销毁当前 IM 实例，同时会退出登录状态，并断开websocket连接
     * 移除所有监听事件，销毁部分内部变量，并且此实例再也无法调用 connect 恢复 IM 连接
     * @locale
     *
     * @locale en
     * Destroy the instance
     *
     * Destroy the current IM instance and log out at the same time, and disconnect the WebSocket connection
     * Remove all listening events, destroy some internal variables, and IM connection can no longer be restored for this instance by calling the connect API.
     * @locale
     */
    destroy(): Promise<void>;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 踢当前用户登录的其它端
     * @locale
     *
     * @locale en
     * Force the account logged in on other devices to go offline.
     * @locale
     */
    kick(options: KickOptions): Promise<KickResult>;
}
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 类的静态方法
 * @locale
 *
 * @locale en
 * Static method
 * @locale
 */
export interface NIMInterfaceStatic {
    /**
     * 构造函数
     */
    new (options?: NIMInitializeOptions, otherOptions?: NIMOtherOptions): NIMInterface;
    /**
     * 单例模式获取实例
     */
    getInstance(_options?: NIMInitializeOptions, _otherOptions?: NIMOtherOptions): NIMInterface;
    /**
     * 设置适配器
     * @param _newAdapters 适配器
     */
    setAdapters(_newAdapters: any): void;
    /**
     * 注册模块. ESM 模式的 NIM 类专用
     * @param _serviceClass 模块类
     * @param _serviceName 标识的模块名
     */
    registerService(_serviceClass: any, _serviceName: NIMServiceName): void;
}
/**
 * @Multi_Lang_Tag
 * @locale cn
 * 实例的状态标识
 *
 * - unconnected: 尚未建立连接(初始化、主动登出、达到最大重连次数)
 * - connecting: 正在建立连接中
 * - connected: 已连接，尚未完成鉴权认证
 * - logined: 已连接, 并且完成了鉴权认证，可以正常开始发送协议
 * - waitReconnect: 等待重连中
 * - destroyed: 实例已经销毁
 * @locale
 *
 * @locale en
 * Status of the instance
 *
 * - unconnected: no connection has been established(Initialization, active logout, and maximum reconnection times)
 * - connecting: Establishing connection
 * - connected: Connected, authentication has not been completed
 * - logined: Connected and completed the authentication
 * - waitReconnect: Waiting for reconnection
 * - destroyed: The instance has been destroyed
 * @locale
 */
export declare type NIMEInstanceStatus = 'unconnected' | 'connecting' | 'connected' | 'logined' | 'waitReconnect' | 'destroyed';
/**
 * @Multi_Lang_Tag
 * @locale cn
 * NIM 的构造函数初始化参数
 *
 * eg. new NIM({ ...NIMInitializeOptions })
 * @locale
 *
 * @locale en
 * Initialization parameters of NIM's constructor
 *
 * eg. new NIM({ ...NIMInitializeOptions })
 * @locale
 */
export interface NIMInitializeOptions {
    account: string;
    appkey: string;
    token: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 日志分级
     *
     * 可选值，"off" | "error" | "warn" | "log" | "debug"
     * @locale
     *
     * @locale en
     * Log classification
     *
     * Available values, "off" | "error" | "warn" | "log" | "debug"
     * @locale
     */
    debugLevel?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否需要自动重连
     * @locale
     *
     * @locale en
     * Whether automatic reconnection is required
     * @locale
     */
    needReconnect?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 自动重连尝试次数
     * @locale
     *
     * @locale en
     * Automatic reconnection attempts
     * @locale
     */
    reconnectionAttempts?: number;
    /**
     * 收到新消息时，是否要自动通知服务器已经接收到了。SDK 已经托管了，此字段作废
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * lbs 地址，默认为云信公网提供的链接。SDK 连接时会向 lbs 地址请求得到 socket 连接地址。
     *
     * 注：为了防止 lbs 链接被网络运营商劫持，开发者可以传入自己代理的地址做备份，['公网地址', '代理地址']
     * @locale
     *
     * @locale en
     * Location Based Services (LBS) address. Its default value is the link provided by the CommsEase public network. When the SDK connects, SDK will request the socket address from the LBS address.
     *
     * Note: To prevent the LBS link from being hijacked by the network operator, the developer can pass in their proxy address for backup, ['public network address', 'proxy address']
     * @locale
     */
    lbsUrls?: string[];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * socket 备用地址，当 lbs 请求失败时，尝试直接连接 socket 备用地址。
     *
     * 注：优先级最高的是 lbs 地址下发的 socket 连接地址，
     * 次为开发者在此填的 socket 备用地址（如果不填这个字段， SDK 会有内部默认的备用地址）
     * @locale
     *
     * @locale en
     * Alternative socket address, used when the request for LBS address fails.
     *
     * Note: The socket address sent from the LBS address is of the highest priority.
     * The alternative socket address entered by the developer is of the second-highest priority. If it is not entered, the default alternative address will be adopted.
     * @locale
     */
    linkUrl?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * token 的认证模式，默认 0.
     *
     * 0：token 是固定的
     *
     * 1：token 是动态的，有过期时间。token过期后已登录状态的连接不受影响，但之后的登录需使用新 token。
     *
     * 2：账号和 token 由开发者的服务校验，云信服务器收到登录请求后会转发至开发者服务器，并将其校验结果返回
     * @locale
     *
     * @locale en
     * @locale
     */
    authType?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 自定义的客户端类型
     * @locale
     *
     * @locale en
     * @locale
     */
    customClientType?: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否 deviceId 需要固定下来。默认 false。
     *
     * true：sdk 随机对设备生成一个设备标识并存入 localstorage 缓存起来，也就是说一个浏览器来说所有 SDK 实例连接都被认为是共同的设备。
     *
     * false：每一个 sdk 实例连接时，使用随机的字符串作为设备标识，相当于每个实例采用的不同的设备连接上来的。
     *
     * 注意：这个参数会影响多端互踢的策略。有关于多端互踢策略的配置可以参见服务器文档。
     * @locale
     *
     * @locale en
     * @locale
     */
    isFixedDeviceId?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * Abtest 是否开启，默认 true 开启
     *
     * 注: 打开这个开关，在 sdk 内部会试探某些新功能的开启，建议开发者不要轻易设置它。
     * @locale
     *
     * @locale en
     * @locale
     */
    isAbtestEnable?: boolean;
}
export interface NIMOtherOptions {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步模块的选项配置
     * @locale
     *
     * @locale en
     * @locale
     */
    syncOptions?: SyncOptions;
    /**
     * @deprecated 这个字段即将废弃，所有的属性被移入 {@link NIMOtherOptions.cloudStorageConfig} 中
     *
     * @Multi_Lang_Tag
     * @locale cn
     * 私有化配置相关参数
     * 这个参数仅在初始化有效，setOptions{@link NIMInterface.setOptions | setOptions}中不生效
     * @locale
     *
     * @locale en
     * @locale
     */
    serverConfig?: ServerConfig;
    /**
     * session 模块配置
     */
    sessionConfig?: {
        /**
         * 过滤函数: 由在线/同步/多端同步的消息触发的更新会话过程中，该函数判定这条消息是否允许被计入 session 的未读数
         *
         * 默认返回 true，该消息计入 session 未读数。
         */
        unreadCountFilterFn?: (_msg: IMMessage) => boolean;
        /**
         * 过滤函数: 由在线/同步/多端同步的消息触发的更新会话过程中，该函数判定这条消息是否允许被计入 session.lastMessage 的更新
         *
         * 默认返回 true，该消息计入 session.lastMessage 的更新。
         */
        lastMessageFilterFn?: (_msg: IMMessage) => boolean;
    };
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * cloud storage 模块配置
     * @locale
     *
     * @locale en
     * cloud storage config
     * @locale
     */
    cloudStorageConfig?: NIMEModuleParamCloudStorageConfig;
}
export declare type ServerConfig = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * NOS上传地址（直传）
     * @locale
     *
     * @locale en
     * @locale
     */
    commonUploadHost?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * NOS上传地址（分片）
     * @locale
     *
     * @locale en
     * @locale
     */
    chunkUploadHost?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 发送文件消息中文件的url的通配符地址，例：'https://{host}/{object}'
     * @locale
     *
     * @locale en
     * @locale
     */
    uploadReplaceFormat?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 接收到文件消息的替换模版
     * 这个是用来接到消息后，要按一定模式替换掉文件链接的。给予一个安全下载链接。
     * 例：'https://{bucket}-nosdn.netease.im/{object}'
     * @locale
     *
     * @locale en
     * @locale
     */
    downloadUrl?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到哪些host地址，需要替换成downloadUrl，例：收到nos.netease.com/{bucket}/{obj}
     * @locale
     *
     * @locale en
     * @locale
     */
    downloadHostList?: string[];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 服务器下发的域名存在，并且对象前缀匹配成功，那么强行替换为`${protocol}${serverCdnDomain}/${decodePath.slice(prefixIndex)}`
     * @locale
     *
     * @locale en
     * @locale
     */
    nosCdnEnable?: boolean;
    /**
     * nos cdn domain，生成文件的链接用的。注意：私有化场景下才需要配置cdn。
     */
    cdn?: {
        /**
         * 默认的文件下载地址的域名，替代上文中 {@link serverConfig.uploadReplaceFormat} 中的 host。
         */
        defaultCdnDomain: string;
        /**
         * 文件下载地址的域名，用于替换上文中 {@link serverConfig.uploadReplaceFormat} 中的 host。默认会从服务器中获取这个下载地址的域名配置。
         */
        cdnDomain: string;
        /**
         * 桶名。默认是 nim
         */
        bucket: string;
        /**
         * 匹配前缀
         */
        objectNamePrefix: string;
    };
};
/**
 * Example：
 *
 * const instance = new SDK()
 *
 * instance.on('logined', loginResult => { console.log(loginResult.connectionId) }
 */
export interface IMEventInterface {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 初始化成功登陆
     * @locale
     *
     * @locale en
     * Initialization succeeded and login
     * @locale
     */
    logined: [loginResult: LoginResult];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 多端登陆通知
     * @locale
     *
     * @locale en
     * Multi-device login notification
     * @locale
     */
    multiPortLogin: [multiLoginResults: MultiPortLoginResult[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 被踢下线
     * @locale
     *
     * @locale en
     * The previous online device is forced by the SDK to go offline when the user logs onto the last device.
     * @locale
     */
    kicked: [kickedReason: TKickedReason];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 开始自动重连
     * @locale
     *
     * @locale en
     * Start automatic reconnection
     * @locale
     */
    willReconnect: [params: TWillReconnect];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 连接断开
     * @locale
     *
     * @locale en
     * Disconnect
     * @locale
     */
    disconnect: [];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到消息
     * @locale
     *
     * @locale en
     * Received the message
     * @locale
     */
    msg: [msg: IMMessage];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到广播消息（在线或者离线同步收到均会触发）
     * @locale
     *
     * @locale en
     * Received the broadcast message
     * @locale
     */
    broadcastMsgs: [msgs: NIM_BroadcastMessage[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了单向删除某消息的通知
     * @locale
     *
     * @locale en
     * Received notification on the one-way deletion of a message.
     * @locale
     */
    deleteSelfMsgs: [result: DeleteSelfMsgsResult[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 在初始化同步/多端同步时，收到了清除历史消息的通知
     * @locale
     *
     * @locale en
     * @locale
     */
    clearServerHistoryMsgs: [
        result: {
            /**
             * @Multi_Lang_Tag
             * @locale cn
             * 会话 id
             * @locale
             *
             * @locale en
             * @locale
             */
            sessionId: string;
            /**
             * @Multi_Lang_Tag
             * @locale cn
             * 清除的时刻
             * @locale
             *
             * @locale en
             * @locale
             */
            time: number;
        }[]
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了代理消息（透传的）
     * @locale
     *
     * @locale en
     * Received transparently-transmitted proxy message.
     * @locale
     */
    proxyMsg: [proxyMsg: TProxyMsg];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步时收到了漫游消息
     * @locale
     *
     * @locale en
     * Received roaming messages during the synchronization.
     * @locale
     */
    syncRoamingMsgs: [syncRoamingMsgsResult: SyncRoamingMsgsResult];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步时收到了离线消息
     * @locale
     *
     * @locale en
     * Received offline messages during the synchronization.
     * @locale
     */
    syncOfflineMsgs: [syncRoamingMsgsResult: SyncOfflineMsgsResult];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步时收到了个人信息
     * @locale
     *
     * @locale en
     * Received profile information during the synchronization.
     * @locale
     */
    syncMyNameCard: [syncMyNameCardResult: UserNameCard];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步完成事件
     * @locale
     *
     * @locale en
     * Synchronization completed.
     * @locale
     */
    syncdone: [];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步时收到了会话
     * @locale
     *
     * @locale en
     * Received conversations during synchronization.
     * @locale
     */
    sessions: [sessions: Session[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步收到的关系，包括黑名单和静音列表
     * @locale
     *
     * @locale en
     * Received relationship information during synchronization, including the blacklist and mute list.
     * @locale
     */
    relations: [relations: Relations];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了更新个人信息通知
     * @locale
     *
     * @locale en
     * Received a notification to update the personal profile information.
     * @locale
     */
    updateMyNameCard: [myNameCard: UserNameCard];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了黑名单更新通知
     * @locale
     *
     * @locale en
     * Received a notification to update blacklist.
     * @locale
     */
    updateBlackList: [
        updateBlackListResult: {
            account: string;
            isAdd: boolean;
        }
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了静音列表更新通知
     * @locale
     *
     * @locale en
     * Received a notification to update the mute list.
     * @locale
     */
    updateMuteList: [
        updateMuteListResult: {
            account: string;
            isAdd: boolean;
        }
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 在线时收到了系统通知
     * @locale
     *
     * @locale en
     * Received system notifications when online.
     * @locale
     */
    sysMsg: [sysMsg: SystemMessage];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步漫游/离线时收到的系统消息
     * @locale
     *
     * @locale en
     * System notifications received during the synchronization of roaming/offline messages
     * @locale
     */
    syncSysMsgs: [sysMsgs: SystemMessage[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 多端同步时收到了好友相关的资料
     * @locale
     *
     * @locale en
     * Received friend-related information during multi-device synchronization.
     * @locale
     */
    syncFriend: [result: IMEventSyncFriendResult];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步时收到了好友相关资料
     * @locale
     *
     * @locale en
     * Received friend-related information during synchronization
     * @locale
     */
    friends: [friends: FriendProfile[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 同步时收到了其他用户相关资料
     * @locale
     *
     * @locale en
     * Received other user-related information during synchronization.
     * @locale
     */
    users: [users: UserNameCard[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了系统消息
     * @locale
     *
     * @locale en
     * Received a system notification.
     * @locale
     */
    updateSystemMessages: [
        result: {
            idServer: string;
            from: string;
            state: TSystemMessageStatus;
            type: TSystemMessageType;
        }[]
    ];
    /**
     * 收到了系统消息未读数更新
     * 只当开启 db 时，再考虑系统消息未读数的事件
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了订阅事件
     * @locale
     *
     * @locale en
     * Received subscription events.
     * @locale
     */
    pushEvents: [events: PushEvent[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了群已读
     * @locale
     *
     * @locale en
     * Received the message receipt of the group message.
     * @locale
     */
    teamMsgReceipts: [msgReceipts: TeamMsgReceipt[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 会话更新
     * @locale
     *
     * @locale en
     * Update conversation.
     * @locale
     */
    updateSession: [session: Session];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了初始化同步的群
     * @locale
     *
     * @locale en
     * Received the group synchronized from initialization.
     * @locale
     */
    teams: [teams: Team[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了多端同步创建群的情况
     *
     * owner 群的所有者
     * @locale
     *
     * @locale en
     * Received the event that group(s) was created simultaneously on multiple devices.
     *
     * owner refers to the group owner
     * @locale
     */
    createTeam: [team: Team, owner: StrAnyObj];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了多端同步来更新群成员的情况
     * @locale
     *
     * @locale en
     * Received the event that group members were updated simultaneously on multiple devices.
     * @locale
     */
    updateTeamMember: [member: TeamMember];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了群的更新信息
     * @locale
     *
     * @locale en
     * Received group updates.
     * @locale
     */
    updateTeam: [team: Team];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了群成员的更新
     * @locale
     *
     * @locale en
     * Received group member updates.
     * @locale
     */
    addTeamMembers: [
        addTeamMembersResult: {
            team: Team;
            accounts: string[];
            members: TeamMember[];
        }
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了群管理员的更新
     * @locale
     *
     * @locale en
     * Received group administrator updates.
     * @locale
     */
    updateTeamManagers: [updateTeamManagersResult: TUpdateTeamManagersResult];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了转让群
     * @locale
     *
     * @locale en
     * Received the information on group transfer.
     * @locale
     */
    transferTeam: [tranferTeamResult: TTransferTeamResult];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到成员离群，例如成员 A 调用了 leaveTeam 离群，其他成员会收到这个事件。
     * @locale
     *
     * @locale en
     * Received a notification on the leave of a group member. For example, when member A calls leaveTeam to leave a group, other members will receive this event.
     * @locale
     */
    removeTeamMembers: [
        result: {
            team: Team;
            accounts: string[];
        }
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 触发了解散群
     * @locale
     *
     * @locale en
     * Trigger the disbanding of the group
     * @locale
     */
    dismissTeam: [
        result: {
            teamId: string;
        }
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了更新群成员静音
     * @locale
     *
     * @locale en
     * Received updates on the group’s mute list.
     * @locale
     */
    updateTeamMembersMute: [result: TUpdateTeamMembersMute];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 收到了初始化同步的群
     * @locale
     *
     * @locale en
     * Received the group synchronized from initialization.
     * @locale
     */
    superTeams: [teams: SuperTeam[]];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 超级群更新
     * @locale
     *
     * @locale en
     * Supergroup update
     * @locale
     */
    updateSuperTeam: [team: SuperTeam];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 超级群添加
     * @locale
     *
     * @locale en
     * Add members to supergroup
     * @locale
     */
    addSuperTeamMembers: [
        result: {
            team: SuperTeam;
            accounts: string[];
            members: SuperTeamMember[];
        }
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 移除超级群成员
     * @locale
     *
     * @locale en
     * Remove supergroup members。
     * @locale
     */
    removeSuperTeamMembers: [
        result: {
            team: SuperTeam;
            accounts: string[];
        }
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 超级群管理员更新
     * @locale
     *
     * @locale en
     * Update supergroup administrator information.
     * @locale
     */
    updateSuperTeamManagers: [updateSuperTeamManagersResult: TUpdateSuperTeamManagersResult];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 触发转让超级群事件
     * @locale
     *
     * @locale en
     * Trigger the Transfer Supergroup event.
     * @locale
     */
    transferSuperTeam: [
        result: {
            team: SuperTeam;
            from: {
                id: string;
                account: string;
                type: SuperTeamMemberType;
                updateTime: number;
            };
            to: {
                id: string;
                account: string;
                type: SuperTeamMemberType;
                updateTime: number;
            };
        }
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 超级群成员静音事件
     * @locale
     *
     * @locale en
     * Update mute status of supergroup member
     * @locale
     */
    updateSuperTeamMembersMute: [
        result: {
            team: SuperTeam;
            accounts: string[];
            members: {
                id: string;
                account: string;
                teamId: string;
                mute: boolean;
                updateTime: number;
            }[];
            mute: boolean;
        }
    ];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 超级群成员更新的多端同步
     * @locale
     *
     * @locale en
     * Multi-device synchronization of supergroup member information
     * @locale
     */
    updateSuperTeamMember: [teamMember: SuperTeamMember];
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 超级群解散
     * @locale
     *
     * @locale en
     * Disband supergroup.
     * @locale
     */
    dismissSuperTeam: [result: {
        teamId: string;
    }];
}
export declare type IMEventSyncFriendResult = {
    type: string;
    friend?: FriendProfile;
    account?: string;
};
export declare type LoginResult = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 连接id
     * @locale
     *
     * @locale en
     * connection ID
     * @locale
     */
    connectionId: string;
    ip: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 端口
     * @locale
     *
     * @locale en
     * Port
     * @locale
     */
    port: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 上一次登陆的设备 id
     * @locale
     *
     * @locale en
     * ID of the device that the user logged onto last time
     * @locale
     */
    lastLoginDeviceId?: string;
    country?: string;
    appkey?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 自定义登陆标签
     * @locale
     *
     * @locale en
     * Custom login tag
     * @locale
     */
    customTag?: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * AOS 推荐推送配置信息
     * @locale
     *
     * @locale en
     * Recommended AOS push notification configurations
     * @locale
     */
    aosPushInfo?: {
        pushType?: number;
        hasTokenPreviously?: boolean;
    };
};
export declare type MultiPortLoginResult = {
    account: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * socket 连接 id
     * @locale
     *
     * @locale en
     * Socket connection ID
     * @locale
     */
    connectionId: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 设备id
     * @locale
     *
     * @locale en
     * Device ID
     * @locale
     */
    deviceId: string;
    ip: string;
    mac: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否在线
     * @locale
     *
     * @locale en
     * Online or offline
     * @locale
     */
    online: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 系统版本
     * @locale
     *
     * @locale en
     * System version
     * @locale
     */
    os: string;
    time: number;
    type: TClientType;
};
export declare type TKickedReason = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 未知 | 互斥类型的客户端互踢-不允许同一个帐号在多个地方同时登录 | 服务器端发起踢客户端指令-被服务器踢了 | 被自己账号所在的其他端踢掉 | 被悄悄踢掉, 表示这个链接已经废掉了
     * @locale
     *
     * @locale en
     * Unknown | force offline logic for multi-device login – a user is not allowed to use one account to log onto multiple devices at the same time | The server initiates a force offline command - the server forces the user to go offline on the previous device| Force go offline without notice; it means that the link is deprecated.
     * @locale
     */
    reason: 'unknow' | 'samePlatformKick' | 'serverKick' | 'otherPlatformKick' | 'silentlyKick';
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 原因的详细描述
     * @locale
     *
     * @locale en
     * @locale
     */
    message: string;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 踢了本链接的那个客户端的类型
     * @locale
     *
     * @locale en
     * @locale
     */
    clientType: TClientType;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 踢了本链接的那个客户端的自定义端类型
     * @locale
     *
     * @locale en
     * @locale
     */
    customClientType: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 扩展字段
     * @locale
     *
     * @locale en
     * @locale
     */
    ext?: string;
};
export declare type SyncRoamingMsgsResult = {
    timetag: number;
    sessionId: string;
    msgs: IMMessage[];
};
export declare type SyncOfflineMsgsResult = {
    timetag: number;
    sessionId: string;
    msgs: IMMessage[];
};
export declare type TWillReconnect = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 重试次数
     * @locale
     *
     * @locale en
     * Number of reconnections
     * @locale
     */
    retryCount: number;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 重试间隔
     * @locale
     *
     * @locale en
     * Reconnection interval
     * @locale
     */
    duration: number;
};
export declare type TUpdateTeamMembersMute = {
    team: Team;
    accounts: string[];
    members: {
        id: string;
        account: string;
        teamId: string;
        mute: boolean;
        updateTime: number;
    }[];
    mute: boolean;
};
export declare type TProxyMsg = {
    from: string;
    body: string;
    time: number;
};
export declare type TUpdateTeamManagersResult = {
    team: {
        teamId: string;
        memberUpdateTime: number;
    };
    accounts: string[];
    isManager: boolean;
    members: {
        id: string;
        type: TeamMemberType;
        account: string;
        updateTime: number;
    }[];
};
export declare type TUpdateSuperTeamManagersResult = {
    team: {
        teamId: string;
        memberUpdateTime: number;
    };
    accounts: string[];
    isManager: boolean;
    members: {
        id: string;
        account: string;
        type: SuperTeamMemberType;
        updateTime: number;
    }[];
};
export declare type TTransferTeamResult = {
    team: Team;
    from: {
        id: string;
        account: string;
        type: TeamMemberType;
        updateTime: number;
    };
    to: {
        id: string;
        account: string;
        type: TeamMemberType;
        updateTime: number;
    };
};
export declare type KickOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 要踢掉的端的设备号数组
     *
     * 端设备号能在 multiPortLogin 多端登陆事件里拿到
     * @locale
     *
     * @locale en
     * Array of IDs of the devices to be forced to go offline
     *
     * The device ID can be obtained in the {@link IMEventInterface.multiPortLogin | multiPortLogin} event.
     * @locale
     */
    deviceIds: string[];
};
export declare type KickResult = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 成功被踢掉的设备号数组
     * @locale
     *
     * @locale en
     * Array of IDs of devices that were forced to go offline
     * @locale
     */
    deviceIds: string[];
};
export declare type SyncOptions = {
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步用户信息。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize user information. Default value: true
     * @locale
     */
    myInfo?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步离线消息和离线系统通知。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize offline messages and offline system notifications. Default value: true
     * @locale
     */
    offlineMsgs?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步群列表。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize the group list. Default value: true
     * @locale
     */
    teams?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步漫游消息。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize roaming messages. Default value: true
     * @locale
     */
    roamingMsgs?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步黑名单和静音列表。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize the blacklist and mute list. Default value: true
     * @locale
     */
    relations?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步好友列表。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize the friend list. Default value: true
     * @locale
     */
    friends?: boolean;
    /**
     * 是否同步会话列表。默认 false。弃用
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步好友的用户名片。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize friends’ name cards. Default value: true
     * @locale
     */
    friendUsers?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步已读回执。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize read receipts. Default value: true
     * @locale
     */
    msgReceipts?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步当前用户的所有群的群成员信息。默认 false
     * @locale
     *
     * @locale en
     * Whether to synchronize the current user’s member information in all groups. Default value: false
     * @locale
     */
    myTeamMembers?: boolean;
    /**
     * 桌面端在线时，移动端是否需要推送。默认 true
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步撤回消息离线和漫游通知。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize the recalled messages. Default value: true
     * @locale
     */
    recallMsg?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步消息会话 ack，时间戳单位毫秒。默认 false
     *
     * 会话 ACK 代表本账号在此会话里读过的最新消息的时间戳
     * @locale
     *
     * @locale en
     * Whether to synchronize conversation ACK of the message (timestamp unit: milliseconds, default value: false)
     *
     * Conversation ACK represents the timestamp of the latest message read by the account in a conversation.
     * @locale
     */
    sessionAck?: boolean;
    /**
     * 是否同步机器人列表最后更新时间戳。默认false，弃用
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步离线的广播消息，默认 false
     * @locale
     *
     * @locale en
     * @locale
     */
    broadcastMsgs?: boolean;
    /**
     * 是否同步音视频独立信令，默认 false，弃用
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步超大群信息，默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize supergroup information (default value: true)
     * @locale
     */
    superTeams?: boolean;
    /**
     * 是否同步所在的超大群的群成员信息，默认 false，弃用
     */
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步超大群漫游消息。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize roaming messages in supergroup (default value: true)
     * @locale
     */
    superTeamRoamingMsgs?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步超大群撤回消息离线和漫游通知，默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize the recalled messages in the supergroup, the default value is true
     * @locale
     */
    deleteSuperTeamMsg?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步超大群会话 ack 位置列表，默认 false
     * @locale
     *
     * @locale en
     * Whether to synchronize the supergroup's conversation ACK (default value: false)
     * @locale
     */
    superTeamSessionAck?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步单向删除信息，默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize one-way delete information (default value: true)
     * @locale
     */
    deleteSelfMsgs?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步置顶会话信息，默认 false
     * @locale
     *
     * @locale en
     * Whether to synchronize information of pinned conversation (default value: false)
     * @locale
     */
    stickTopSessions?: boolean;
    /**
     * @Multi_Lang_Tag
     * @locale cn
     * 是否同步会话历史消息的删除信息。默认 true
     * @locale
     *
     * @locale en
     * Whether to synchronize the deletion information of the conversation's history messages (default value: true)
     * @locale
     */
    sessionHistoryMsgsDelete?: boolean;
};
